{"pageProps":{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.8.15 Release Announcement","date":"2022-06-15","author":"Solidity Team","category":"Releases"},"content":"\n[Solidity v0.8.15](https://github.com/ethereum/solidity/releases/tag/v0.8.15)\nfixes two important bugs, improves inlining heuristics and adds a `.selector` member for errors and events.\n\n## Important Bugs\n\nThe first one is an optimizer bug that can lead to memory write operations in inline assembly being removed if\nthe result of such an operation is not read back from within the same assembly block.\nThe bug can be triggered only when using the default legacy compiler pipeline (the new compilation pipeline via\nIR is not affected) and happens only in assembly blocks that never access Solidity variables defined in the\nsurrounding code.\nThe bug affects only versions 0.8.13 and 0.8.14 and we strongly encourage users of those versions to update their compiler.\nWhile we deem the problem unlikely to occur and go undetected in practical applications, which significantly lowers the overall\nseverity, when it does happen, it may lead to serious issues.\nSee [Optimizer Bug Regarding Memory Side Effects of Inline Assembly](/2022/06/15/inline-assembly-memory-side-effects-bug/)\nfor more information.\n\nThe second bug may result in a `.push()` operation on a `bytes` array in storage appending\nbytes that are not properly zero-initialized if the array was originally copied from memory or calldata.\nThis, again, can be triggered only when using the legacy code generation pipeline.\nSee [Bug when Copying Dirty Bytes Arrays to Storage](/2022/06/15/dirty-bytes-array-to-storage-bug/)\nfor more information.\n\n## Notable New Features\n\n### Improved Inlining Heuristics in Yul Optimizer\n\nThe compiler used to be very conservative in deciding whether to inline a function or not.\nThis was necessary due to the fact that inlining may easily increase stack pressure and lead to the dreaded \"Stack too deep\" error.\n\nNow that the mechanism for moving variables from stack to memory is available for the IR pipeline, we were able to relax\nthe conditions necessary for inlining.\nThe optimizer will now inline slightly bigger functions as long as nothing prevents the mechanism from being used.\nIf you want to benefit from it, make sure that your inline assembly blocks are\n[memory safe](https://docs.soliditylang.org/en/latest/assembly.html#memory-safety).\n\nOur benchmarks show that the change significantly decreases the bytecode size (which impacts the deployment cost) while the effect\non the runtime gas usage is smaller.\nThe following table shows the overall differences between 0.8.14 and 0.8.15 that we observed when using the IR-based pipeline to run\ntest suites of several real-life projects in our CI:\n\n|      project       |   Bytecode size |  Deployment gas |     Runtime gas |\n| :----------------: | --------------: | --------------: | --------------: |\n|        ENS         |                 | **`-4.85% ✅`** | **`-0.29% ✅`** |\n|       Euler        | **`-2.43% ✅`** | **`-1.68% ✅`** | **`-2.08% ✅`** |\n|    Gnosis Safe     | **`-3.87% ✅`** | **`-4.31% ✅`** | **`-0.02% ✅`** |\n| Gnosis Protocol v2 | **`-3.95% ✅`** | **`-2.55% ✅`** | **`-0.07% ✅`** |\n|  Perpetual Pools   | **`-4.55% ✅`** | **`-2.64% ✅`** |    **`-1% ✅`** |\n|   Pool Together    | **`-7.09% ✅`** | **`-5.59% ✅`** | **`-0.37% ✅`** |\n|      PRBMath       | **`-3.56% ✅`** | **`-3.49% ✅`** |                 |\n|      Trident       | **`-9.84% ✅`** | **`-7.98% ✅`** | **`-6.26% ✅`** |\n|     Uniswap v3     | **`-4.32% ✅`** | **`-4.53% ✅`** | **`-1.24% ✅`** |\n|  Yield Liquidator  | **`-7.13% ✅`** | **`-6.08% ✅`** |  **`-0.5% ✅`** |\n|    OpenZeppelin    | **`-7.83% ✅`** | **`-6.01% ✅`** | **`-0.28% ✅`** |\n\n### Error and Event Selectors\n\nSelectors of external functions can be accessed via the `.selector` member.\nNow this member is available also [on non-anonymous events](https://docs.soliditylang.org/en/latest/contracts.html#members-of-events) and\n[on custom errors](https://docs.soliditylang.org/en/latest/contracts.html#members-of-errors).\n\nNote that for events the selector represents the topic 0, which, unlike error and function selectors, is not truncated to 4 bytes.\n\n## New or Improved Documentation\n\n### Dangling References\n\nWe have recently received vulnerability reports about cases where normal use of language features may leave the user with\na dangling reference and lead to data being overwritten in storage.\nUnfortunately, this is a natural consequence of the current design of the language and not a bug that can be simply fixed.\nSolidity strongly restricts the use of references to value types, but the possibility to store references to elements of\narrays of arrays in local variables together with the ability to resize them has always meant that the target of a reference may disappear.\nWhat the newly reported cases uncovered is that there are some unusual patterns which may produce dangling references\nin situations where they may not be expected.\nTo make this more transpared and raise awareness we prepared a new documentation section that goes into more detail about the topic:\n[Dangling References to Storage Array Elements](https://docs.soliditylang.org/en/latest/types.html#dangling-references-to-storage-array-elements).\nThanks go to Kuroi with Binance Smart Contract Security Team and Red Team for reporting this!\n\n## Full Changelog\n\nImportant Bugfixes:\n\n- Code Generation: Avoid writing dirty bytes to storage when copying `bytes` arrays.\n- Yul Optimizer: Keep all memory side-effects of inline assembly blocks.\n\nLanguage Features:\n\n- Add `E.selector` for a non-anonymous event `E` to access the 32-byte selector topic.\n\nCompiler Features:\n\n- LSP: Add rudimentary support for semantic highlighting.\n- Type Checker: Warn about assignments involving multiple pushes to storage `bytes` that may invalidate references.\n- Yul Optimizer: Improve inlining heuristics for via IR code generation and pure Yul compilation.\n\nBugfixes:\n\n- ABI Encoder: When encoding an empty string coming from storage do not add a superfluous empty slot for data.\n- Common Subexpression Eliminator: Process assembly items in chunks with maximum size of 2000. It helps to avoid extremely time-consuming searches during code optimization.\n- Yul Optimizer: Do not remove `returndatacopy` in cases in which it might perform out-of-bounds reads that unconditionally revert as out-of-gas. Previously, any `returndatacopy` that wrote to memory that was never read from was removed without accounting for the out-of-bounds condition.\n\nA big thank you to all contributors who helped make this release possible!\n\nDownload the new version of Solidity [here](https://github.com/ethereum/solidity/releases/tag/v0.8.15).\n","availableURLs":["/2023/05/10/solidity-0.8.20-release-announcement","/2023/03/10/solidity-developer-survey-2022-results","/2023/02/22/user-defined-operators","/2023/02/22/solidity-0.8.19-release-announcement","/2023/02/01/solidity-0.8.18-release-announcement","/2022/12/07/solidity-developer-survey-2022-announcement","/2022/12/05/solidity-core-team-updates","/2022/09/08/storage-write-removal-before-conditional-termination","/2022/09/08/solidity-0.8.17-release-announcement","/2022/08/08/solidity-0.8.16-release-announcement","/2022/08/08/calldata-tuple-reencoding-head-overflow-bug","/2022/06/15/solidity-0.8.15-release-announcement","/2022/06/15/inline-assembly-memory-side-effects-bug","/2022/06/15/dirty-bytes-array-to-storage-bug","/2022/05/17/solidity-0.8.14-release-announcement","/2022/05/17/data-location-inheritance-bug","/2022/05/17/calldata-reencode-size-check-bug","/2022/05/03/solidity-summit-2022-recap","/2022/04/08/announcing-the-underhanded-contest-winners-2022","/2022/03/16/solidity-0.8.13-release-announcement","/2022/03/16/encodecall-bug","/2022/02/22/solidity-summit-2022-announcement","/2022/02/16/solidity-0.8.12-release-announcement","/2022/02/09/underhanded-solidity-contest-2022-announcement","/2022/02/07/solidity-developer-survey-2021-results","/2021/12/20/solidity-0.8.11-release-announcement","/2021/11/18/solidity-developer-survey-2021","/2021/11/09/solidity-0.8.10-release-announcement","/2021/09/29/user-defined-value-types-bug","/2021/09/29/solidity-0.8.9-release-announcement","/2021/09/29/signed-immutables-bug","/2021/09/27/user-defined-value-types","/2021/09/27/solidity-0.8.8-release-announcement","/2021/08/11/solidity-0.8.7-release-announcement","/2021/06/22/solidity-0.8.6-release-announcement","/2021/06/10/solidity-0.8.5-release-announcement","/2021/05/03/soliditylangorg-umbrella-domain","/2021/04/21/solidity-0.8.4-release-announcement","/2021/04/21/decoding-from-memory-bug","/2021/04/21/custom-errors","/2021/04/01/announcing-solidity-collectibles","/2021/03/23/solidity-0.8.3-release-announcement","/2021/03/23/keccak-optimizer-bug","/2021/03/02/solidity-0.8.2-release-announcement","/2021/03/02/saving-gas-with-simple-inliner","/2021/02/15/contributing-to-solidity-101","/2021/02/10/an-introduction-to-soliditys-fuzz-testing-approach","/2021/02/01/launching-the-solidity-forum","/2021/01/27/solidity-0.8.1-release-announcement","/2021/01/26/solidity-developer-survey-2020-results","/2020/12/16/solidity-v0.8.0-release-announcement","/2020/12/16/solidity-0.7.6-release-announcement","/2020/12/09/solidity-developer-survey-2020","/2020/12/03/solidity-underhanded-contest-winners","/2020/11/18/solidity-0.7.5-release-announcement","/2020/11/04/solidity-ama-1-recap","/2020/10/28/solidity-0.8.x-preview","/2020/10/19/solidity-0.7.4-release-announcement","/2020/10/19/empty-byte-array-copy-bug","/2020/10/07/solidity-dynamic-array-cleanup-bug","/2020/10/07/solidity-0.7.3-release-announcement","/2020/09/28/solidity-0.7.2-release-announcement","/2020/09/21/solidity-underhanded-contest","/2020/09/18/meet-the-team","/2020/09/02/solidity-0.7.1-release-announcement","/2020/07/28/solidity-v0.7.0-release-announcement","/2020/07/22/Solidity-0612-release-announcement","/2020/07/08/solidity-turns-5","/2020/07/07/Solidity-0611-release-announcement","/2020/06/25/sourcify-faq","/2020/06/18/solidity-0.6-inheritance","/2020/06/11/Solidity-0610-release-announcement","/2020/06/09/solidity-summit-recap","/2020/06/05/Solidity-069-release-announcement","/2020/06/02/Sourcify-Towards-Safer-Contract-Interaction-for-Humans","/2020/05/26/array-slices","/2020/05/14/Solidity-068-release-announcement","/2020/05/13/immutable-keyword","/2020/05/04/solidity-0.6.7-release-announcement","/2020/04/17/Solidity-Summit-2020-Goes-Interspace","/2020/04/09/solidity-0.6.6-release-announcement","/2020/04/06/solidity-0.6.5-release-announcement","/2020/04/06/memory-creation-overflow-bug","/2020/03/23/fallback-receive-split","/2020/03/17/solidity-0.5.17-release-announcement","/2020/03/10/solidity-0.6.4-release-announcement","/2020/02/18/solidity-0.6.3-release-announcement","/2020/01/29/solidity-0.6-try-catch","/2020/01/27/solidity-0.6.2-release-announcement","/2020/01/02/solidity-0.6.1-release-announcement","/2020/01/02/solidity-0.5.16-release-announcement","/2019/12/17/solidity-0.6.0-release-announcement","/2019/12/17/solidity-0.5.15-release-announcement","/2019/12/09/solidity-0.5.14-release-announcement","/2019/11/14/solidity-0.5.13-release-announcement","/2019/10/01/solidity-0.5.12-release-announcement","/2019/08/12/solidity-0.5.11-release-announcement","/2019/06/25/solidity-storage-array-bugs","/2019/06/25/solidity-0.5.10-release-announcement","/2019/05/28/solidity-0.5.9-release-announcement","/2019/04/30/solidity-0.5.8-release-announcement","/2019/04/29/solidity-0.4.26-release-announcement","/2019/03/26/solidity-optimizer-and-abiencoderv2-bug","/2019/03/26/solidity-0.5.7-release-announcement","/2019/03/13/solidity-0.5.6-release-announcement","/2019/03/05/solidity-0.5.5-release-announcement","/2019/02/12/solidity-0.5.4-release-announcement","/2019/01/22/solidity-0.5.3-release-announcement","/2018/12/19/solidity-0.5.2-release-announcement","/2018/12/03/solidity-0.5.1-release-announcement","/2018/11/13/solidity-0.5.0-release-announcement","/2018/09/13/solidity-bugfix-release","/2018/09/13/solidity-0.4.25-release-announcement","/2018/05/16/solidity-0.4.24-release-announcement","/2018/04/19/solidity-0.4.23-release-announcement","/2018/04/17/solidity-0.4.22-release-announcement","/2018/03/08/solidity-0.4.21-release-announcement","/2018/02/14/solidity-0.4.20-release-announcement","/2017/11/30/solidity-0.4.19-release-announcement","/2017/10/18/solidity-0.4.18-release-announcement","/2017/09/21/solidity-0.4.17-release-announcement","/2017/08/24/solidity-0.4.16-release-announcement","/2017/08/08/solidity-0.4.15-release-announcement","/2017/07/31/solidity-0.4.14-release-announcement","/2017/07/06/solidity-0.4.13-release-announcement","/2017/07/03/solidity-0.4.12-release-announcement","/2017/05/03/solidity-optimizer-bug","/2017/05/03/solidity-0.4.11-release-announcement","/2017/03/15/solidity-0.4.10-release-announcement","/2017/01/31/solidity-0.4.9-release-announcement","/2017/01/13/solidity-0.4.8-release-announcement","/2016/12/15/solidity-0.4.7-release-announcement","/2016/11/22/solidity-0.4.6-release-announcement","/2016/11/21/solidity-0.4.5-release-announcement","/2016/11/09/analysis-storage-corruption-bug","/2016/11/01/solidity-0.4.4-release-announcement","/2016/11/01/security-alert-solidity-variables-can-overwritten-storage","/2016/10/25/solidity-0.4.3-release-announcement","/2016/09/17/solidity-0.4.2-release-announcement","/2016/09/09/solidity-0.4.1-release-announcement","/2016/09/08/solidity-0.4.0-release-announcement","/2016/09/01/formal-methods-roadmap","/2016/08/10/solidity-0.3.6-release-announcement","/2016/06/10/solidity-0.3.5-release-announcement","/2016/06/10/smart-contract-security","/2016/05/31/solidity-0.3.4-release-announcement","/2016/05/27/solidity-0.3.3-release-announcement","/2016/04/18/solidity-0.3.2-release-announcement","/2016/03/31/solidity-0.3.1-release-announcement","/2016/03/11/solidity-0.3.0-release-announcement","/2016/02/17/solidity-0.2.2-release-announcement","/2016/01/30/solidity-0.2.1-release-announcement","/2015/12/01/solidity-0.2.0-release-announcement","/2015/11/17/solidity-0.1.7-release-announcement","/2015/10/16/solidity-0.1.6-release-announcement","/2015/10/07/solidity-0.1.5-release-announcement","/2015/09/30/solidity-0.1.4-release-announcement","/2015/09/22/solidity-0.1.3-release-announcement","/2015/08/21/solidity-0.1.2-release-announcement"]},"__N_SSG":true}