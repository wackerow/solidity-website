{"pageProps":{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.8.18 Release Announcement","date":"2023-02-01","author":"Solidity Team","category":"Releases"},"content":"\nIntroducing the newest version of the Solidity Compiler!\n\nWe are excited to announce the latest release of the Solidity Compiler, [Solidity v0.8.18](https://github.com/ethereum/solidity/releases/tag/v0.8.18).\nThis latest version includes a range of improvements and it also introduces support for the [Paris upgrade](https://blog.ethereum.org/2022/08/24/mainnet-merge-announcement)!\n\n### Notable New Features\n\nThese are the features we want to highlight in this release.\n\n#### Disabling CBOR metadata\n\nA new command-line flag (`--no-cbor-metadata`) and Standard JSON option (`settings.metadata.appendCBOR: false`) to prevent compiler from appending the CBOR metadata section at the end of the bytecode.\nUntil now, it was only possible to exclude the hash of the JSON metadata file (`--metadata-hash none`/`settings.metadata.bytecodehash: \"none\"`) from that section, but the bytecode would still include a small bit of CBOR data containing the version of the compiler.\n\n#### Support for Paris Hardfork\n\nThe support for the Paris hard fork, includes:\n\n- Deprecation of global `block.difficulty` built-in in Solidity and removal of `difficulty()` instruction from inline assembly for EVM versions >= Paris. The change is due to the renaming and semantic changes of the `difficulty` instruction introduced by [EIP-4399](https://eips.ethereum.org/EIPS/eip-4399).\n- Introduction of global `block.prevrandao` built-in in Solidity and `prevrandao()` instruction in inline assembly for EVM versions >= Paris.\n\n_Note_: `block.difficulty` is planned to be removed entirely in Solidity version `0.9.0`.\n\n#### Deprecation of `selfdestruct`\n\n`selfdestruct` is now considered deprecated ([EIP-6049](https://eips.ethereum.org/EIPS/eip-6049)) and the compiler will warn about its use, both in Solidity and in Yul, including inline assembly.\nThere is currently no replacement, but its use is highly discouraged because it will eventually change its semantics and all contracts using it will be affected in some way.\n\n#### EVM bytecode generation from Yul\n\nThis release also involves a change in the generation of EVM bytecode from Yul code when the optimizer is enabled: for Yul functions that never return back to the caller (i.e. always revert or always terminate the EVM call), the compiler no longer pushes a return label.\nThe label is only used to jump back to the caller. This will decrease both gas cost and code size.\nTooling that relies on the current calling convention on the bytecode level may need to be adjusted to accommodate this change.\n\n## Full Changelog\n\n### Language Features\n\n- Allow named parameters in mapping types.\n\n### Compiler Features\n\n- Commandline Interface: Add `--no-cbor-metadata` that skips CBOR metadata from getting appended at the end of the bytecode.\n- Commandline Interface: Return exit code `2` on uncaught exceptions.\n- EVM: Deprecate `block.difficulty` and disallow `difficulty()` in inline assembly for EVM versions >= paris. The change is due to the renaming introduced by [EIP-4399](https://eips.ethereum.org/EIPS/eip-4399).\n- EVM: Introduce `block.prevrandao` in Solidity and `prevrandao()` in inline assembly for EVM versions >= paris.\n- EVM: Set the default EVM version to \"Paris\".\n- EVM: Support for the EVM version \"Paris\".\n- Language Server: Add basic document hover support.\n- Natspec: Add event Natspec inheritance for devdoc.\n- Optimizer: Added optimization rule `and(shl(X, Y), shl(X, Z)) => shl(X, and(Y, Z))`.\n- Parser: More detailed error messages about invalid version pragmas.\n- SMTChecker: Make `z3` the default solver for the BMC and CHC engines instead of all solvers.\n- SMTChecker: Support Eldarica as a Horn solver for the CHC engine when using the CLI option `--model-checker-solvers eld`. The binary `eld` must be available in the system.\n- Solidity Upgrade Tool: Remove `solidity-upgrade` tool.\n- Standard JSON: Add a boolean field `settings.metadata.appendCBOR` that skips CBOR metadata from getting appended at the end of the bytecode.\n- TypeChecker: Warn when using deprecated builtin `selfdestruct`.\n- Yul EVM Code Transform: Generate more optimal code for user-defined functions that always terminate a transaction. No return labels will be pushed for calls to functions that always terminate.\n- Yul Optimizer: Allow replacing the previously hard-coded cleanup sequence by specifying custom steps after a colon delimiter (`:`) in the sequence string.\n- Yul Optimizer: Eliminate `keccak256` calls if the value was already calculated by a previous call and can be reused.\n\n### Bugfixes\n\n- Parser: Disallow several `indexed` attributes for the same event parameter.\n- Parser: Disallow usage of the `indexed` attribute for modifier parameters.\n- SMTChecker: Fix display error for negative integers that are one more than powers of two.\n- SMTChecker: Fix internal error on chain assignments using static fully specified state variables.\n- SMTChecker: Fix internal error on multiple wrong SMTChecker natspec entries.\n- SMTChecker: Fix internal error when a public library function is called internally.\n- SMTChecker: Fix internal error when deleting struct member of function type.\n- SMTChecker: Fix internal error when using user-defined types as mapping indices or struct members.\n- SMTChecker: Improved readability for large integers that are powers of two or almost powers of two in error messages.\n- TypeChecker: Fix bug where private library functions could be attached with `using for` outside of their declaration scope.\n- Yul Optimizer: Hash hex and decimal literals according to their value instead of their representation, improving the detection of equivalent functions.\n\nAs always, a big thank you to all contributors who helped make this release possible!\n\n## How to install/upgrade\n\nTo upgrade to the latest version of the Solidity Compiler, simply follow the [installation instructions](https://docs.soliditylang.org/en/v0.8.18/installing-solidity.html) available in our documentation.\nOur team has made sure to provide detailed and straightforward steps to make the upgrade process as seamless as possible. If you have any questions or run into any issues during the upgrade process, don't hesitate to reach out to our [community Matrix channel](https://matrix.to/#/#ethereum_solidity:gitter.im).\n\nYou can download the new version of Solidity here: [v0.8.18](https://github.com/ethereum/solidity/releases/tag/v0.8.18).\nIf you want to build from the source code, do not use the source archives generated automatically by GitHub, instead please use [`solidity_0.8.18.tar.gz`](https://github.com/ethereum/solidity/releases/download/v0.8.18/solidity_0.8.18.tar.gz) and take a look at [our documentation on how to build from source](https://docs.soliditylang.org/en/v0.8.18/installing-solidity.html#building-from-source) if you need guidance.\n\nPlease note that for those using Solidity versions below 0.8.0, [there are breaking changes](https://docs.soliditylang.org/en/v0.8.18/080-breaking-changes.html).\nWe highly recommend reviewing the detailed list of breaking changes in our documentation to ensure a smooth upgrade process. Additionally, we encourage all Solidity users to regularly check for updates to stay up-to-date with the latest improvements and optimizations.\nWe advise all Solidity developers to upgrade to version 0.8.18 to take advantage of these improvements and optimizations. Our team remains dedicated to continuously enhancing Solidity to benefit the entire Ethereum ecosystem.\n\nGet ready to unleash your creativity and build impactful decentralized applications with the latest version of the Solidity Compiler. Happy coding!\n\n## UPDATE 2023-02-02: Rebuilt Linux binary for Solidity 0.8.18\n\nThe Linux binary for the 0.8.18 release was originally built against a too recent version of glibc and thereby did not run on older Linux systems.\nTherefore, we rebuilt and replaced the binary so that you may encounter an older version of `solc-linux-amd64-v0.8.18+commit.87f61d96` that does not match the hash you can find on the [list of currently published Linux binaries](https://binaries.soliditylang.org/linux-amd64/list.json).\nBoth versions of the compiler will behave identically other than the fact that only the new one will work on systems with glibc versions older than 2.32.\n\nTo be clear: both binaries will produce identical outputs under all circumstances, including the commit hash in the metadata. Only the hash of the compiler binary itself will change due to the replacement, but the new binary will always produce byte-identical output.\n\nIn the listings at https://binaries.soliditylang.org, the original, now replaced binary, was listed as follows:\n\n```json\n{\n  \"path\": \"solc-linux-amd64-v0.8.18+commit.87f61d96\",\n  \"version\": \"0.8.18\",\n  \"build\": \"commit.87f61d96\",\n  \"longVersion\": \"0.8.18+commit.87f61d96\",\n  \"keccak256\": \"0x265ad8479d7c5d30ef3556c5c23efddbf1718c1112abd219a6add420489cf930\",\n  \"sha256\": \"0xa1c0f33eb4482c26f56719ecf62b0ee05d7d7a4f8264ffbddf9ebcd9095c32bd\",\n  \"urls\": [\n    \"bzzr://bc795017b74430520c9fd41300536f45d43edb74ca3c497ce2117d1954bbca12\",\n    \"dweb:/ipfs/QmPkAoHf5hNoZS9W7uZhrGgVTSPoCui3h9MEEKTTfSe8am\"\n  ]\n}\n```\n\nIt has been replaced with:\n\n```json\n{\n  \"path\": \"solc-linux-amd64-v0.8.18+commit.87f61d96\",\n  \"version\": \"0.8.18\",\n  \"build\": \"commit.87f61d96\",\n  \"longVersion\": \"0.8.18+commit.87f61d96\",\n  \"keccak256\": \"0x932901581a2ef0795851363522811fa160db5561e34cbb306e7105b6bbc3834d\",\n  \"sha256\": \"0x95e6ed4949a63ad89afb443ecba1fb8302dd2860ee5e9baace3e674a0f48aa77\",\n  \"urls\": [\n    \"bzzr://61828ca55d703ddcd2ceff0e20a48ae6bca28a58b09725836893dc5f6b8e8018\",\n    \"dweb:/ipfs/Qmf68UBPAspGAh6TJ1F9zKLFy3WjvH6W43HvzWWGAUQXTv\"\n  ]\n}\n```\n","availableURLs":["/2023/05/10/solidity-0.8.20-release-announcement","/2023/03/10/solidity-developer-survey-2022-results","/2023/02/22/user-defined-operators","/2023/02/22/solidity-0.8.19-release-announcement","/2023/02/01/solidity-0.8.18-release-announcement","/2022/12/07/solidity-developer-survey-2022-announcement","/2022/12/05/solidity-core-team-updates","/2022/09/08/storage-write-removal-before-conditional-termination","/2022/09/08/solidity-0.8.17-release-announcement","/2022/08/08/solidity-0.8.16-release-announcement","/2022/08/08/calldata-tuple-reencoding-head-overflow-bug","/2022/06/15/solidity-0.8.15-release-announcement","/2022/06/15/inline-assembly-memory-side-effects-bug","/2022/06/15/dirty-bytes-array-to-storage-bug","/2022/05/17/solidity-0.8.14-release-announcement","/2022/05/17/data-location-inheritance-bug","/2022/05/17/calldata-reencode-size-check-bug","/2022/05/03/solidity-summit-2022-recap","/2022/04/08/announcing-the-underhanded-contest-winners-2022","/2022/03/16/solidity-0.8.13-release-announcement","/2022/03/16/encodecall-bug","/2022/02/22/solidity-summit-2022-announcement","/2022/02/16/solidity-0.8.12-release-announcement","/2022/02/09/underhanded-solidity-contest-2022-announcement","/2022/02/07/solidity-developer-survey-2021-results","/2021/12/20/solidity-0.8.11-release-announcement","/2021/11/18/solidity-developer-survey-2021","/2021/11/09/solidity-0.8.10-release-announcement","/2021/09/29/user-defined-value-types-bug","/2021/09/29/solidity-0.8.9-release-announcement","/2021/09/29/signed-immutables-bug","/2021/09/27/user-defined-value-types","/2021/09/27/solidity-0.8.8-release-announcement","/2021/08/11/solidity-0.8.7-release-announcement","/2021/06/22/solidity-0.8.6-release-announcement","/2021/06/10/solidity-0.8.5-release-announcement","/2021/05/03/soliditylangorg-umbrella-domain","/2021/04/21/solidity-0.8.4-release-announcement","/2021/04/21/decoding-from-memory-bug","/2021/04/21/custom-errors","/2021/04/01/announcing-solidity-collectibles","/2021/03/23/solidity-0.8.3-release-announcement","/2021/03/23/keccak-optimizer-bug","/2021/03/02/solidity-0.8.2-release-announcement","/2021/03/02/saving-gas-with-simple-inliner","/2021/02/15/contributing-to-solidity-101","/2021/02/10/an-introduction-to-soliditys-fuzz-testing-approach","/2021/02/01/launching-the-solidity-forum","/2021/01/27/solidity-0.8.1-release-announcement","/2021/01/26/solidity-developer-survey-2020-results","/2020/12/16/solidity-v0.8.0-release-announcement","/2020/12/16/solidity-0.7.6-release-announcement","/2020/12/09/solidity-developer-survey-2020","/2020/12/03/solidity-underhanded-contest-winners","/2020/11/18/solidity-0.7.5-release-announcement","/2020/11/04/solidity-ama-1-recap","/2020/10/28/solidity-0.8.x-preview","/2020/10/19/solidity-0.7.4-release-announcement","/2020/10/19/empty-byte-array-copy-bug","/2020/10/07/solidity-dynamic-array-cleanup-bug","/2020/10/07/solidity-0.7.3-release-announcement","/2020/09/28/solidity-0.7.2-release-announcement","/2020/09/21/solidity-underhanded-contest","/2020/09/18/meet-the-team","/2020/09/02/solidity-0.7.1-release-announcement","/2020/07/28/solidity-v0.7.0-release-announcement","/2020/07/22/Solidity-0612-release-announcement","/2020/07/08/solidity-turns-5","/2020/07/07/Solidity-0611-release-announcement","/2020/06/25/sourcify-faq","/2020/06/18/solidity-0.6-inheritance","/2020/06/11/Solidity-0610-release-announcement","/2020/06/09/solidity-summit-recap","/2020/06/05/Solidity-069-release-announcement","/2020/06/02/Sourcify-Towards-Safer-Contract-Interaction-for-Humans","/2020/05/26/array-slices","/2020/05/14/Solidity-068-release-announcement","/2020/05/13/immutable-keyword","/2020/05/04/solidity-0.6.7-release-announcement","/2020/04/17/Solidity-Summit-2020-Goes-Interspace","/2020/04/09/solidity-0.6.6-release-announcement","/2020/04/06/solidity-0.6.5-release-announcement","/2020/04/06/memory-creation-overflow-bug","/2020/03/23/fallback-receive-split","/2020/03/17/solidity-0.5.17-release-announcement","/2020/03/10/solidity-0.6.4-release-announcement","/2020/02/18/solidity-0.6.3-release-announcement","/2020/01/29/solidity-0.6-try-catch","/2020/01/27/solidity-0.6.2-release-announcement","/2020/01/02/solidity-0.6.1-release-announcement","/2020/01/02/solidity-0.5.16-release-announcement","/2019/12/17/solidity-0.6.0-release-announcement","/2019/12/17/solidity-0.5.15-release-announcement","/2019/12/09/solidity-0.5.14-release-announcement","/2019/11/14/solidity-0.5.13-release-announcement","/2019/10/01/solidity-0.5.12-release-announcement","/2019/08/12/solidity-0.5.11-release-announcement","/2019/06/25/solidity-storage-array-bugs","/2019/06/25/solidity-0.5.10-release-announcement","/2019/05/28/solidity-0.5.9-release-announcement","/2019/04/30/solidity-0.5.8-release-announcement","/2019/04/29/solidity-0.4.26-release-announcement","/2019/03/26/solidity-optimizer-and-abiencoderv2-bug","/2019/03/26/solidity-0.5.7-release-announcement","/2019/03/13/solidity-0.5.6-release-announcement","/2019/03/05/solidity-0.5.5-release-announcement","/2019/02/12/solidity-0.5.4-release-announcement","/2019/01/22/solidity-0.5.3-release-announcement","/2018/12/19/solidity-0.5.2-release-announcement","/2018/12/03/solidity-0.5.1-release-announcement","/2018/11/13/solidity-0.5.0-release-announcement","/2018/09/13/solidity-bugfix-release","/2018/09/13/solidity-0.4.25-release-announcement","/2018/05/16/solidity-0.4.24-release-announcement","/2018/04/19/solidity-0.4.23-release-announcement","/2018/04/17/solidity-0.4.22-release-announcement","/2018/03/08/solidity-0.4.21-release-announcement","/2018/02/14/solidity-0.4.20-release-announcement","/2017/11/30/solidity-0.4.19-release-announcement","/2017/10/18/solidity-0.4.18-release-announcement","/2017/09/21/solidity-0.4.17-release-announcement","/2017/08/24/solidity-0.4.16-release-announcement","/2017/08/08/solidity-0.4.15-release-announcement","/2017/07/31/solidity-0.4.14-release-announcement","/2017/07/06/solidity-0.4.13-release-announcement","/2017/07/03/solidity-0.4.12-release-announcement","/2017/05/03/solidity-optimizer-bug","/2017/05/03/solidity-0.4.11-release-announcement","/2017/03/15/solidity-0.4.10-release-announcement","/2017/01/31/solidity-0.4.9-release-announcement","/2017/01/13/solidity-0.4.8-release-announcement","/2016/12/15/solidity-0.4.7-release-announcement","/2016/11/22/solidity-0.4.6-release-announcement","/2016/11/21/solidity-0.4.5-release-announcement","/2016/11/09/analysis-storage-corruption-bug","/2016/11/01/solidity-0.4.4-release-announcement","/2016/11/01/security-alert-solidity-variables-can-overwritten-storage","/2016/10/25/solidity-0.4.3-release-announcement","/2016/09/17/solidity-0.4.2-release-announcement","/2016/09/09/solidity-0.4.1-release-announcement","/2016/09/08/solidity-0.4.0-release-announcement","/2016/09/01/formal-methods-roadmap","/2016/08/10/solidity-0.3.6-release-announcement","/2016/06/10/solidity-0.3.5-release-announcement","/2016/06/10/smart-contract-security","/2016/05/31/solidity-0.3.4-release-announcement","/2016/05/27/solidity-0.3.3-release-announcement","/2016/04/18/solidity-0.3.2-release-announcement","/2016/03/31/solidity-0.3.1-release-announcement","/2016/03/11/solidity-0.3.0-release-announcement","/2016/02/17/solidity-0.2.2-release-announcement","/2016/01/30/solidity-0.2.1-release-announcement","/2015/12/01/solidity-0.2.0-release-announcement","/2015/11/17/solidity-0.1.7-release-announcement","/2015/10/16/solidity-0.1.6-release-announcement","/2015/10/07/solidity-0.1.5-release-announcement","/2015/09/30/solidity-0.1.4-release-announcement","/2015/09/22/solidity-0.1.3-release-announcement","/2015/08/21/solidity-0.1.2-release-announcement"]},"__N_SSG":true}