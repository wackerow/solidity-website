{"pageProps":{"frontmatter":{"layout":"post","published":true,"title":"Solidity Developer Survey 2022 Results","date":"2023-03-10","author":"Franziska Heintel","category":"Announcements"},"content":"\nThe [2022 Solidity Developer Survey](https://blog.soliditylang.org/2022/12/07/solidity-developer-survey-2022-announcement/) results are in! In this post, we will be summarizing and analyzing them.\n\nFirst of all, a big thank you to everybody who took the time and participated and to everybody who helped us spread the word about it!\nThis year, we received a smashing 1401 responses. That is more than a 3x in responses compared to the previous survey and we couldn't be happier with the turnout.\nYour input is invaluable to us and plays a crucial role in helping to continuously improve the Solidity developer experience as a whole.\n\nBefore we get started, here are a few useful links:\n\n- In the spirit of open source, you can find all raw data of the survey results [here](https://docs.google.com/spreadsheets/d/1A5iF3aKhFv9wTTJ10ko_uxgoflc8oEpVe3gqAAWoC2w/edit?usp=sharing) and all graphs [here](https://docs.google.com/presentation/d/1xH5pGZ6rrAP_jzRQobf0Mn1XYquyg8bD17DBQyrErMo/edit?usp=sharing).\n- Since this is already our third time conducting a yearly survey, it may be interesting for you to compare the outcome to the previous surveys. The results from the 2021 developer survey are available [here](https://blog.soliditylang.org/2022/02/07/solidity-developer-survey-2021-results/) and from 2020 [here](https://blog.soliditylang.org/2021/01/26/solidity-developer-survey-2020-results/).\n\nWithout further ado, let’s dig into the 2022 results!\n\n## Summary & Notable Insights\n\n- **Survey Audience**: In total, 1401 developers from 100 different countries participated in the 2022 survey. That is more than a 222% increase in responses compared to the previous survey (435 respondents)! The coverage of different geographies also continuously increased from 48 countries in 2020 to 73 countries in 2021 to 100 countries in 2022. Roughly 18% stated to be residing in the US, followed by India (10%) and France (5%).\n- **Developer Profiles**: The level of coding experience remains at a medium to a high level, with the majority of respondents having coded professionally for 3 or more years, 12.5% even more than 15 years.\n- **Solidity Experience**: More than half of all respondents have been using Solidity for less than a year, while 13.8% have been using it for more than 3 years. 41% use Solidity daily, and 37.3% weekly.\n- **Solidity Expertise**: Many deem themselves Solidity experts, with a self-rating in the expertise of 7 or higher (out of 10). 4.6% rate their expertise as a 10 out of 10. 70% of those have been using Solidity for 2-3 years or longer.\n- **Developer Experience**: The majority (+75%) believe that the Solidity developer experience improved in the last year. 0.9% are of the opinion it got worse. Debugging issues are frequently encountered, followed by stack-too-deep errors and bytecode size limitations.\n- **Future Features**: Support for decimal numbers and generics was mentioned most often as the “most anticipated Solidity feature”.\n- **Liked & Dreaded Features**: Respondents most like Solidity's syntax, the simplicity of learning, reading, coding, and compiling, and the static typing. The most significant pain point is “stack-too-deep”, with 33.6% of all votes, followed by missing memory optimizations (waste of memory) (24.4%) and redundant checks (e.g. in checked arithmetic) (11.8%). 9.9% say that compiler performance is their biggest issue.\n\n![Demographics Header](/img/2023/02/header1.png)\n\n## Demographics of the Survey Audience\n\n_⚠️ Be aware that this survey has only been shared in English when interpreting results regarding the distribution of countries of residency and language preferences._\n\nAs usual, we begin by looking at the developers who participated in this survey: In this first chapter, we cover general information on the survey audience, which includes residency and spoken languages.\n\nIn total, 1401 developers from 100 different countries participated in the 2022 survey. Compared to the previous survey, this represents a 222% increase in responses.\n\nThe coverage of different geographies increased from 73 countries in 2021 to 100 countries in 2022.\n\n#### Residency\n\nRoughly 18% of respondents stated to be residing in the US, followed by India (10%), France (5%), and Nigeria (4.5%).\n\n![Survey Participants World Map](/img/2023/02/geo.png)\n\n![Survey Participants List of Countries with 20+](/img/2023/02/geo2.png)\n\n#### Language\n\nThe diversity of respondents did not only increase in terms of countries of residency but also in terms of the native language. In total, 70 different languages were mentioned as their native languages.\nThat’s a 40% increase compared to the previous year.\n\n31.5% state English as their native language, followed by Indian languages (12.4%), Spanish (8.4%), French (6.9%), Russian (6.4%), and German (4.7%).\n\n_ℹ️Hindi, Urdu, Telugu, Bengali, Tamil, Malayalam, Gujarati, Marathi, Kannada, and Odia were clustered as “Indian languages”. Chinese, Cantonese, and Mandarin were clustered as “Chinese languages”. Persian, Pashto, and Ossetian were clustered as “Iranian languages”._\n\n![Survey Participants Native Language](/img/2023/02/lang.png)\n\nWith almost 80%, the majority of respondents predominantly speak English at work.\nOther languages that are spoken at work: French (3.2%), Russian (3.1%), and Chinese languages (2.3%).\n\n![Survey Participants Work Language](/img/2023/02/lang_work.png)\n\nOf the respondents who didn't name English as their native language, 87% are okay with reading the Solidity documentation in English.\n\n12.9% would prefer to read it in their native language, the most mentioned ones being Spanish, Indian languages, and Russian.\n\n![Preferred Documentation Language](/img/2023/02/lang_docs.png)\n\n![Preferred Documentation Language Breakdown](/img/2023/02/lang_docs_integrated.png)\n\n_ℹ️ Note: This survey has only been conducted in English, which may have impacted the outcome of this question. We still believe internationalization of resources like the Solidity documentation is a crucial factor in lowering the barriers of entry, and we aim to support by helping coordinate the community-driven [translation efforts](https://github.com/solidity-docs)._\n\n![Developer Profile Header](/img/2023/02/header2.png)\n\n### Developer Profile\n\nIn the second section of the Solidity Developer Survey, we learn more about the professional experience and coding preferences of the survey audience.\n\n#### Work Experience & Employment\n\nRoughly 71% of respondents were employed at the time of the survey, while roughly 12% stated they were students, and 17% said they were currently not working professionally.\n\nCompared to the previous survey, there is a slight increase in both the number of students and currently unemployed developers.\n\n![Employment Status](/img/2023/02/employment.png)\n\nThe employed respondents predominantly work in the “crypto” (58.2%) and technology (21.6%) and financial services (5.4%) sector.\n\n![Industry Sector Breakdown](/img/2023/02/sector.png)\n\n37,1% of all respondents are seniors and have been coding professionally for 6 years or more, 12.5% of them even for 15+ years.\n\nOn the other side, roughly 12% are coding newbies and have only coded professionally for less than a year.\n\nWith approximately 22%, the biggest group sits in the middle of the distribution and has professional coding experience of 3-5 years.\n\nOverall, the level of coding experience is medium to high with the majority of respondents (59.2%) having coded professionally for 3 or more years.\n7.7% have never coded as part of their job, 37% of which are students.\n\n![Professional Coding Experience](/img/2023/02/coding_xp.png)\n\n#### Touch Points with Solidity\n\nAs in the previous survey, the majority of respondents (75.7%) still use Solidity for their personal projects.\n\nRoughly 64% of all respondents use Solidity at work.\n\nMore than 20% state they are leading a programming team.\n\n![Survey Participants Touch Points with Solidity](/img/2023/02/touchpoints.png)\n\nOnly 23.4% of respondents contribute to open-source projects written in Solidity on a daily or weekly basis. The rest states to do so monthly (27.4%) or never (47.1%).\n\n![Survey Participants Open Source Contributions](/img/2023/02/open_source.png)\n\n#### Programming Language Preferences\n\nSolidity marks the most used programming language for the survey audience (28.6%), closely followed by JavaScript (25.6%) and TypeScript (20.5%).\n\nOther less frequently mentioned languages are Python (8.7%), Rust (2.7%), and Go (2.5%).\n\n![Most Used Programming Language](/img/2023/02/progr_lang_use.png)\n\nSimilar to the previous year, the respondents' favorite programming languages are distributed more evenly across various languages.\n\nSolidity is the most popular, scoring 18.8% of all entries, followed by JavaScript (17.3%), Python (15.2%), TypeScript (15.0%), and Rust (8.6%).\n\n![Favorite Programming Language](/img/2023/02/progr_lang_fav.png)\n\n#### Operating System\n\nMost respondents use MacOS as their primary Operating System (41.8%). Windows and Linux seem comparatively popular, with 30.5 and 27.7%, respectively.\n\n![Operating System](/img/2023/02/os.png)\n\n![Solidity User Profile Header](/img/2023/02/header3.png)\n\n### Solidity User Profile\n\nIn this section of the survey, we asked respondents about their Solidity-specific development experience and usage habits.\n\n#### Solidity Experience\n\nAlmost 50% of all respondents deem themselves Solidity experts, with a self rating in expertise of 7 or higher (scale of 10).\n\n4.6% rate their expertise as a 10 out of 10, and 70% of those have been using Solidity for 2-3 years, or longer.\n\nRoughly 23% can be considered beginners or low-frequency users with a self-rated expertise level of 4 or lower.\n\nThe distribution of self rating remained similar to the previous survey, even though the survey audience tripled in size.\n\n![Solidity Expertise Level](/img/2023/02/sol_expertise.png)\n\nRoughly 50% of all respondents have been using Solidity for less than a year, with 13% having just started their Solidity journey (less than three months of experience).\n\n13.83% have been using Solidity for more than 3 years and can thus be considered “Solidity seniors''.\nTo put years into perspective: [“Version 0.1.1”](https://github.com/ethereum/solidity/commits/15dc5954c3a2e2a9ce96f2f77d41adef98a4cced), the oldest version of Solidity on `solc-bin`, is from August 2015 and thus roughly 7.5 year old.\nThe language is still relatively young and continues to evolve. We may add more granular selection options for “more than 3 years” of Solidity experience to distinguish this better in the next survey.\n\n![Solidity Experience Level](/img/2023/02/sol_experience.png)\n\nAs in previous years, Solidity appears rather easy to learn, with 21.2% of respondents feeling productive in less than a month and 39.3% in less than half a year.\n\n8.1% needed more than a year to feel comfortable with the language.\n\n17.8% don't feel productive yet, out of which more than 74.2% are beginners and have been using Solidity for 6 months or less, and 47% even less than three months.\n\n![Time to Productiveness](/img/2023/02/sol_productivity.png)\n\n#### Solidity User Profile and Usage Habits\n\nWith regards to usage frequency, more than 40% of respondents use Solidity on a daily basis!\n\n37.3% use it weekly, and 13.9% on a monthly basis.\n\nRoughly 8% indicated to be using Solidity \"rarely\" or \"never\".\n\nMost of them indicated before that they use Solidity for personal projects and code in a different programming language at work.\n\n![Solidity Usage Frequency](/img/2023/02/sol_frequency.png)\n\nA striking 81.8% of all respondents use Visual Studio Code as their editor when writing Solidity code.\nVim and IntelliJ follow in the second and third ranks with 3.7 and 3.4% usage, respectively.\n\nCompared to the previous survey in 2021, Visual Studio code gained significantly in popularity (from roughly 50% to 81.8%).\n\n![Editor Overview](/img/2023/02/editor.png)\n\nDepending on the chosen IDE, we also asked respondents which Solidity-related plugins they use, if any.\n\n“HardHat VSCode” by Nomic Foundation and the “Solidity” extension by Juan Blanco (both for Visual Studio Code) are the most popular.\n\n![Editor Plugins Overview](/img/2023/02/editor_plugins.png)\n\nHardhat remains the most popular Ethereum-specific development environment, with roughly 75% of all respondents using Hardhat.\n\nRemix follows with 42%. Foundry has significantly increased its share from 1.6% in 2021 to 30% in 2022.\n\nTruffle continues to move more into the background, with 17% of respondents indicating that they use it.\n\nRather \"niche\" Ethereum-specific development environments are Brownie (6.7%), Ape (3.3%), Dapptools (2.3%), and Embark (0.8%).\n\n4.4% of respondents are not using any Ethereum-specific development environment.\n\nIt’s worth noting that this question was a checkbox question, allowing respondents to select multiple answers.\n\n_⚠️ Comparing the results from 2020, 2021, to 2022 may offer some insights like Truffle losing a significant share (2020: 59.3% -> 2021: 26.2% -> 2022: 17%), while Hardhat, and newcomers like Foundry increased their share in users. However, it's important to consider that the previous surveys had significantly fewer responses (2020: 194, 2021: 435, 2022: 1401). A year-on-year comparison can only be interpreted as a loose trend and it’s not the intent of this study to analyze user splits between IDEs in detail._\n\n![Ethereum IDE Overview](/img/2023/02/eth_ide.png)\n\nWith roughly 90%, 0.8.x Solidity versions remain to be the by far most used ones. The usage share of both the 0.7.x (10.2%) and the 0.6.x (7.7%) series continues to decrease since the previous survey. Everything older than that is hardly in use anymore.\n\n![Used Solidity Versions](/img/2023/02/versions.png)\n\n_⚠️ Reminder: Please make sure to frequently update your code (and compiler) to the latest Solidity version. [Several important bug fixes and security improvements](https://github.com/ethereum/solidity/blob/develop/docs/bugs_by_version.json) are added in the newer versions!_\n\n#### Solidity Usage Details\n\nThis year, we also asked specific questions about Solidity usage habits.\n\nFor charts and figures on those, please refer to the [presentation with all graphs](https://docs.google.com/presentation/d/1xH5pGZ6rrAP_jzRQobf0Mn1XYquyg8bD17DBQyrErMo/edit?usp=sharing) and the [raw data file](https://docs.google.com/spreadsheets/d/1A5iF3aKhFv9wTTJ10ko_uxgoflc8oEpVe3gqAAWoC2w/edit?usp=sharing).\n\nTo summarize:\n\n- Command line: Roughly two thirds of respondents do not use the Solidity compiler directly via the command line. 37.5% do.\n- Command line: When using the compiler on the command line, 61.3% still use Standard JSON.\n- Optimizer: 93.6% do not disable the optimizer. The 6.4% that enabled the optimizer, stated that they would do so due to contract size limits, slow compilation, in order to pass EtherScan verification, for gas testing purposes or because of security concerns.\n- Gas estimator: 23.4% use the gas estimator that is built into the compiler. 25% have tried it, but don’t use it regularly, while 41.5% never use it.\n- SMTChecker: 81% of all respondents never use the SMTChecker. 13.7% have tried it and 5.4% use it frequently. You can learn more about the SMTChecker [here](https://docs.soliditylang.org/en/latest/smtchecker.html).\n- `via-IR` compilation pipeline: 70.8% do not know what `via-IR` is. 18.6% use the `via-IR` pipeline already. In the following weeks, we will share more context about why you should switch from the legacy compilation pipeline to `via-IR` and what this means.\n- Metadata publication: 53.5% publish the metadata of their smart contracts. 27.8% don’t, while 18.7% don’t know what this means.\n- Sourcify: 11% of all respondents use Sourcify for smart contract verification, while 21.2% claim to not need it. 67.8% don’t know what Sourcify is. If you want to learn more about Sourcify, visit [sourcify.dev](https://sourcify.dev/).\n\n#### Fixed-Point Types\n\nApproximately 91% of all survey respondents don’t use fixed-point types.\n\nThe 9% (100 people) that do primarily use [PRB Math](https://github.com/PaulRBerg/prb-math), [solmate’s FixedPointMathLib](https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol), and custom implementations.\n\n![Fixed-Point Types Usage](/img/2023/02/fixed_point_types.png)\n\n![Fixed-Point Types Libraries](/img/2023/02/fixed_point_types_libs.png)\n\n#### Other EVM Networks\n\nMore than half of all respondents use Solidity outside of [Ethereum Mainnet](https://ethereum.org/en/glossary/#mainnet) and [testnets](https://ethereum.org/en/glossary/#testnet).\nWhen asked which other networks they deploy their smart contracts on, the most popular chain was by far Polygon (formerly Matic Network).\nOther often mentioned blockchains include Binance Smart Chain, Arbitrum, Avalanche and Optimism.\n\n![Deployment To Other Chains](/img/2023/02/solidity_other_chains.png)\n\n![Deployment To Other Chains Breakdown](/img/2023/02/solidity_other_chains_breakdown.png)\n\n#### Other Smart Contract Languages\n\nHalf of all respondents use other smart contract languages alongside Solidity.\nThe most used other smart contract language is [Yul](https://docs.soliditylang.org/en/latest/yul.html), an intermediate language for Solidity, with 17.2%, followed by [Vyper](https://docs.vyperlang.org), a pythonic EVM language, with 10.5%.\n[Cairo](https://www.cairo-lang.org/docs/) (7.1%), a STARK based language targeting StarkNet, and [Huff](https://docs.huff.sh) (6.2%), a low-level assembly language for the EVM, are also mentioned several times.\nOther “newcomers” like [Sway](https://fuellabs.github.io/sway/) (2.4%) and [Fe](https://fe-lang.org/docs/) (1.5%) also make it into the chart.\n\n![Other Smart Contract Languages](/img/2023/02/smart_contr_langs.png)\n\n![Solidity Developer Experience Header](/img/2023/02/header4.png)\n\n## Solidity Developer Experience\n\n76.5% of all respondents believe that the Solidity developer experience generally improved throughout the last year. 25.1% are of the opinion that they noticed a big improvement compared to the previous year.\n\n7.8% say that nothing has changed in their experience, while 0.9% of the respondents think it got worse.\n\nCompared to the previous year’s results, the share of “got worse” and “I don’t know” decreased, while “no change” slightly increased. Overall, the picture is very comparable.\n\n![Solidity Developer Experience](/img/2023/02/dev_ex.png)\n\nWhen getting stuck on a Solidity problem, most respondents visit Ethereum StackExchange / StackOverflow for help or search for a solution on the Internet.\nMany also ask their coworkers for help or watch tutorial videos.\n\n![Solving Problems](/img/2023/02/solidity_problem.png)\n\n### Recurring Issues\n\n60% of respondents don't encounter the same or similar issues multiple times when developing in Solidity.\n\nAmongst the 40% that do, debugging issues are encountered most frequently, followed by stack-too-deep errors and bytecode size limitations.\n\n_ℹ️On the topic of debugging issues, we'd like to use the opportunity to highlight a new initiative aimed at defining a common debugging data format for languages built on top of the EVM: [ethdebug](https://github.com/ethdebug/format/). The end result will be a specification that will allow debuggers, analyzers, and other tools to reliably map between the EVM bytecode produced by compilers and the high-level language features. This has been a common pain point across the ecosystem for years and is becoming more pressing with the introduction of the new IR-based code generator (i.e. the `via-IR` pipeline) in Solidity, which often breaks implicit assumptions tools made based on how the legacy pipeline worked. We encourage all developers working on such tools to join the working group. The group has regular bi-weekly meetings and coordinates via the [ethdebug channel](https://matrix.to/#/#ethdebug:matrix.org) on Matrix._\n\n![Recurring Issues](/img/2023/02/recurring_issues.png)\n\n![Recurring Issues](/img/2023/02/recurring_issues_breakdown.png)\n\n### Getting Started & Documentation\n\nMost respondents considered it easy or “okay” to get started using the Solidity compiler.\n4.2% (55 people) stated that it was difficult for them. When asked what made it difficult to get started, some mentioned a previous lack of technical background or development experience, and others also pointed out a lack of good learning resources or outdated learning resources.\n\n![Getting Started](/img/2023/02/getting_started.png)\n\nAlmost 64% of survey respondents consider the Solidity documentation helpful, followed by 33% who deem it “somewhat” useful. Only 3.3% don’t find it useful at all.\n\nIdeas for improvement most prominently ask for more code examples but also a better high-level overview of syntax, better in-docs search, better SEO, and easier wording.\n\n![Solidity Documentation Usefulness](/img/2023/02/docs.png)\n\n### Biggest Pain Points\n\nDifferent from the previous years, this year, we tried to structure the question around the “biggest pain points” better and clustered the first step into several prominent categories: Stack-to-deep, gas related issues, compiler performance, and “other”.\n\nThe biggest pain point is “stack-too-deep”, with 33.6% of all votes, followed by missing memory optimizations (waste of memory) (24.4%) and redundant checks (e.g. in checked arithmetic) (11.8%).\n9.9% say that compiler performance is their biggest issue.\n\n15.8% selected “other” and were able to specify their most significant pain point in a free text field. Most prominently mentioned: Contract size limit, error messages, and issues with debugging.\n\n![Solidity Pain Points](/img/2023/02/pain_points.png)\n\n### High-Impact Compiler Bugs\n\nAs part of this year’s study, we were also curious to find out whether Solidity developers had been affected by any of the high-impact compiler bugs (codegen bugs that are announced with [Security Alerts](https://blog.soliditylang.org/category/security-alerts/) on the Solidity blog).\n\nInitially, 4.7% said yes. However, when asked which one they were affected by, only two out of the 63 people were able to point to actual Solidity vulnerabilities in the follow-up question.\nThis gives room to assume the actual number of affected developers from this survey is significantly lower than 4.7%, and some respondents may have simply misunderstood the question.\nWe will try to phrase this question more precisely in the next survey.\n\n![High Impact Bugs](/img/2023/02/security_bugs.png)\n\n## Language Design & Upcoming Features\n\n### Favorite Feature / Solidity Aspect\n\nRespondents most like Solidity's syntax, the simplicity with regards to learning, reading, coding and compiling and static typing.\n\nThe most mentioned liked features in descending order were:\n\n- Syntax\n- Easy to... read/code/compile/learn\n- Simplicity\n- Static/strong/strict typing\n- Similarity to other languages (most mentioned JS/TS and object-orientedness, also mentioned: Rust, C++, Python)\n- Modifiers\n- Inline assembly\n- Mappings\n- Inheritance\n- (User-defined) types\n- SafeMath / checked and unchecked\n- Yul\n\n### Most Dreaded Aspect\n\nThis year, we asked the survey audience a slightly different question: “If you could change one thing about Solidity, what would it be?”\n\nMost mentioned “change requests” in descending order were:\n\n- Fix stack-too-deep\n- Better array handling\n- Gas optimizations\n- Add fractional numbers (fixed point types / floating types)\n- Better error handling, descriptions\n- Better debugging\n- Higher contact bytecode size limit\n\n### Future Features\n\n#### Most Anticipated Feature\n\nSupport for fractional numbers and generics was mentioned most often as the “most anticipated Solidity feature”.\n\n_⚠️ Similar to the previous year, we noted that respondents were using various different terms like \"floats\", \"floating point arithmetic\", \"floating point number\", \"fixed point numbers\", and \"fixed point math\". We categorized those as \"fractional numbers\"._\n\nMost mentioned anticipated features in descending order:\n\n- Support for fractional numbers (fixed point types / floating points)\n- Generics\n- Better optimization\n- No stack-too-deep\n- Better debugging\n- Transient storage\n- Standard library\n- Better error messages\n\n#### EIP Support\n\nWe also wanted to know what Solidity-related EIPs the survey respondents think need support in the compiler.\n\nEIP-2535 “‘Diamonds, Multi-Facet Proxy” was mentioned most often, followed by EIP-1153 “Transient Storage” and EIP-3540 “EOF - EVM Object Format”.\n\n![Solidity-related EIPs](/img/2023/02/EIP_support.png)\n\n### Restrictiveness\n\nRegarding language restrictiveness, roughly 43% of respondents wish that Solidity stays “as is”. 41% tend towards more restrictive/explicit, having more checks, while approximately 16% would like Solidity to be less restrictive.\n\n![Solidity Restrictiveness Ranking](/img/2023/02/restrictiveness.png)\n\n![Solidity Developer Community Header](/img/2023/02/header6.png)\n\n## Solidity Developer Community\n\n### Language Design Community Participation\n\nLess than 10% of all respondents ever participated in Solidity language design related efforts.\n\nThe distribution between participating in forum discussion and proposing features or language changes as a Github issue is fairly similar,\nwhile language design discussions and feedback calls have slightly less participation (all between 80 - 108 people, multiple selections possible).\n\nOf the roughly 90% that did not participate in language design, most state they don’t know how, followed by being “too busy with work or other things”.\nRoughly 30% say that they are not interested in or qualified for the discussions.\n\n![Language Design Participation](/img/2023/02/lang_design.png)\n\n### Staying Informed\n\nSimilar to the previous years, most people like to stay up-to-date about Solidity versions, security alerts, and announcements by following Solidity on [Twitter](https://twitter.com/solidity_lang) or [Mastodon](https://fosstodon.org/@solidity).\n\nOther often used means for information are the [Solidity blog](https://blog.soliditylang.org/) and [Solidity GitHub release page](https://github.com/ethereum/solidity/releases).\n\nInterestingly, almost 30% claim to not be doing any of the above.\n\nAs part of “other”, respondents specified several community based means to stay up-to-date:\n\n- YouTube\n- Crypto Twitter / Community chats\n- [Solidity docs](https://docs.soliditylang.org/en/latest/)\n- [\"Week in Ethereum News\" Newsletter](https://www.weekinethereumnews.com/)\n- \"Crypto influencers\" / Popular Solidity developers\n- Updating [RemixIDE](https://remix.ethereum.org/) / [Hardhat](https://hardhat.org/) / [VS Code](https://code.visualstudio.com/)\n- Coworkers\n- Google\n- Newsletters\n- Conferences / Meetups\n- [OpenZeppelin forum](https://forum.openzeppelin.com/)\n- [Solidity website](https://soliditylang.org/)\n- Reddit\n\n![Means To Stay Up-To-Date](/img/2023/02/stay_informed.png)\n\n### Interaction with Other Solidity Developers\n\nMore than half of respondents interact with other Solidity developers.\n\n16.7% don’t interact with other Solidity developers at all.\n\n![Developer Interaction](/img/2023/02/interaction.png)\n\nLike in the previous years, as the last part of the survey, we wanted to hear how many participants agree or disagree with several statements regarding the Solidity community and the work of the Solidity team.\n\n- 66% of respondents feel (somewhat) welcome in the Solidity developer community.\n- Roughly 77% agree or somewhat agree that they feel confident in the work of the Solidity team.\n- More than half feel welcome to contribute to Solidity, however, only less than 40% say that they know how to contribute ideas or feedback to Solidity.\n- Roughly 25% are confident that the Solidity team understands their needs as a developer. Another 35% somewhat agree, while approximately 9% disagree or strongly disagree.\n\nThe results of this “community and Solidity team confidence ranking” are very comparable to the previous year.\n\nOne can derive that while the community seems confident in the competency/qualification of the Solidity team, the communications around ways to contribute as well as understanding of the community’s needs, can be improved.\nThose are things that we have been working on improving throughout the last years and will continue to do so.\n\n![Community and Solidity Team Confidence Ranking](/img/2023/02/community_statements.png)\n\n## Thank You & See You Next Year!\n\nLastly, we want to take the opportunity to thank you for all your lovely and motivating messages and the feedback received.\nWe were overwhelmed by the sheer number of survey responses and hope to continue this trend in the coming years!\nWe hope the insights from this survey were useful to you, as they certainly are for us!\nWe will continue to collect feedback on an ongoing basis.\n\nTo not miss anything, make sure to:\n\n- Follow Solidity on [Twitter](https://twitter.com/solidity_lang) or [Mastodon](https://fosstodon.org/@solidity).\n- Join the language design discussions in the [Solidity forum](https://forum.soliditylang.org/) or provide us feedback there.\n- Follow announcements and security alerts on the [Solidity blog](https://blog.soliditylang.org/).\n- Follow and ⭐ the [Solidity repo on Github](https://github.com/ethereum/solidity).\n\n---\n\n_All graphs can be found [here](https://docs.google.com/presentation/d/1xH5pGZ6rrAP_jzRQobf0Mn1XYquyg8bD17DBQyrErMo/edit?usp=sharing). The raw and analyzed data can be found [here](https://docs.google.com/spreadsheets/d/1A5iF3aKhFv9wTTJ10ko_uxgoflc8oEpVe3gqAAWoC2w/edit?usp=sharing)._\n","availableURLs":["/2023/05/10/solidity-0.8.20-release-announcement","/2023/03/10/solidity-developer-survey-2022-results","/2023/02/22/user-defined-operators","/2023/02/22/solidity-0.8.19-release-announcement","/2023/02/01/solidity-0.8.18-release-announcement","/2022/12/07/solidity-developer-survey-2022-announcement","/2022/12/05/solidity-core-team-updates","/2022/09/08/storage-write-removal-before-conditional-termination","/2022/09/08/solidity-0.8.17-release-announcement","/2022/08/08/solidity-0.8.16-release-announcement","/2022/08/08/calldata-tuple-reencoding-head-overflow-bug","/2022/06/15/solidity-0.8.15-release-announcement","/2022/06/15/inline-assembly-memory-side-effects-bug","/2022/06/15/dirty-bytes-array-to-storage-bug","/2022/05/17/solidity-0.8.14-release-announcement","/2022/05/17/data-location-inheritance-bug","/2022/05/17/calldata-reencode-size-check-bug","/2022/05/03/solidity-summit-2022-recap","/2022/04/08/announcing-the-underhanded-contest-winners-2022","/2022/03/16/solidity-0.8.13-release-announcement","/2022/03/16/encodecall-bug","/2022/02/22/solidity-summit-2022-announcement","/2022/02/16/solidity-0.8.12-release-announcement","/2022/02/09/underhanded-solidity-contest-2022-announcement","/2022/02/07/solidity-developer-survey-2021-results","/2021/12/20/solidity-0.8.11-release-announcement","/2021/11/18/solidity-developer-survey-2021","/2021/11/09/solidity-0.8.10-release-announcement","/2021/09/29/user-defined-value-types-bug","/2021/09/29/solidity-0.8.9-release-announcement","/2021/09/29/signed-immutables-bug","/2021/09/27/user-defined-value-types","/2021/09/27/solidity-0.8.8-release-announcement","/2021/08/11/solidity-0.8.7-release-announcement","/2021/06/22/solidity-0.8.6-release-announcement","/2021/06/10/solidity-0.8.5-release-announcement","/2021/05/03/soliditylangorg-umbrella-domain","/2021/04/21/solidity-0.8.4-release-announcement","/2021/04/21/decoding-from-memory-bug","/2021/04/21/custom-errors","/2021/04/01/announcing-solidity-collectibles","/2021/03/23/solidity-0.8.3-release-announcement","/2021/03/23/keccak-optimizer-bug","/2021/03/02/solidity-0.8.2-release-announcement","/2021/03/02/saving-gas-with-simple-inliner","/2021/02/15/contributing-to-solidity-101","/2021/02/10/an-introduction-to-soliditys-fuzz-testing-approach","/2021/02/01/launching-the-solidity-forum","/2021/01/27/solidity-0.8.1-release-announcement","/2021/01/26/solidity-developer-survey-2020-results","/2020/12/16/solidity-v0.8.0-release-announcement","/2020/12/16/solidity-0.7.6-release-announcement","/2020/12/09/solidity-developer-survey-2020","/2020/12/03/solidity-underhanded-contest-winners","/2020/11/18/solidity-0.7.5-release-announcement","/2020/11/04/solidity-ama-1-recap","/2020/10/28/solidity-0.8.x-preview","/2020/10/19/solidity-0.7.4-release-announcement","/2020/10/19/empty-byte-array-copy-bug","/2020/10/07/solidity-dynamic-array-cleanup-bug","/2020/10/07/solidity-0.7.3-release-announcement","/2020/09/28/solidity-0.7.2-release-announcement","/2020/09/21/solidity-underhanded-contest","/2020/09/18/meet-the-team","/2020/09/02/solidity-0.7.1-release-announcement","/2020/07/28/solidity-v0.7.0-release-announcement","/2020/07/22/Solidity-0612-release-announcement","/2020/07/08/solidity-turns-5","/2020/07/07/Solidity-0611-release-announcement","/2020/06/25/sourcify-faq","/2020/06/18/solidity-0.6-inheritance","/2020/06/11/Solidity-0610-release-announcement","/2020/06/09/solidity-summit-recap","/2020/06/05/Solidity-069-release-announcement","/2020/06/02/Sourcify-Towards-Safer-Contract-Interaction-for-Humans","/2020/05/26/array-slices","/2020/05/14/Solidity-068-release-announcement","/2020/05/13/immutable-keyword","/2020/05/04/solidity-0.6.7-release-announcement","/2020/04/17/Solidity-Summit-2020-Goes-Interspace","/2020/04/09/solidity-0.6.6-release-announcement","/2020/04/06/solidity-0.6.5-release-announcement","/2020/04/06/memory-creation-overflow-bug","/2020/03/23/fallback-receive-split","/2020/03/17/solidity-0.5.17-release-announcement","/2020/03/10/solidity-0.6.4-release-announcement","/2020/02/18/solidity-0.6.3-release-announcement","/2020/01/29/solidity-0.6-try-catch","/2020/01/27/solidity-0.6.2-release-announcement","/2020/01/02/solidity-0.6.1-release-announcement","/2020/01/02/solidity-0.5.16-release-announcement","/2019/12/17/solidity-0.6.0-release-announcement","/2019/12/17/solidity-0.5.15-release-announcement","/2019/12/09/solidity-0.5.14-release-announcement","/2019/11/14/solidity-0.5.13-release-announcement","/2019/10/01/solidity-0.5.12-release-announcement","/2019/08/12/solidity-0.5.11-release-announcement","/2019/06/25/solidity-storage-array-bugs","/2019/06/25/solidity-0.5.10-release-announcement","/2019/05/28/solidity-0.5.9-release-announcement","/2019/04/30/solidity-0.5.8-release-announcement","/2019/04/29/solidity-0.4.26-release-announcement","/2019/03/26/solidity-optimizer-and-abiencoderv2-bug","/2019/03/26/solidity-0.5.7-release-announcement","/2019/03/13/solidity-0.5.6-release-announcement","/2019/03/05/solidity-0.5.5-release-announcement","/2019/02/12/solidity-0.5.4-release-announcement","/2019/01/22/solidity-0.5.3-release-announcement","/2018/12/19/solidity-0.5.2-release-announcement","/2018/12/03/solidity-0.5.1-release-announcement","/2018/11/13/solidity-0.5.0-release-announcement","/2018/09/13/solidity-bugfix-release","/2018/09/13/solidity-0.4.25-release-announcement","/2018/05/16/solidity-0.4.24-release-announcement","/2018/04/19/solidity-0.4.23-release-announcement","/2018/04/17/solidity-0.4.22-release-announcement","/2018/03/08/solidity-0.4.21-release-announcement","/2018/02/14/solidity-0.4.20-release-announcement","/2017/11/30/solidity-0.4.19-release-announcement","/2017/10/18/solidity-0.4.18-release-announcement","/2017/09/21/solidity-0.4.17-release-announcement","/2017/08/24/solidity-0.4.16-release-announcement","/2017/08/08/solidity-0.4.15-release-announcement","/2017/07/31/solidity-0.4.14-release-announcement","/2017/07/06/solidity-0.4.13-release-announcement","/2017/07/03/solidity-0.4.12-release-announcement","/2017/05/03/solidity-optimizer-bug","/2017/05/03/solidity-0.4.11-release-announcement","/2017/03/15/solidity-0.4.10-release-announcement","/2017/01/31/solidity-0.4.9-release-announcement","/2017/01/13/solidity-0.4.8-release-announcement","/2016/12/15/solidity-0.4.7-release-announcement","/2016/11/22/solidity-0.4.6-release-announcement","/2016/11/21/solidity-0.4.5-release-announcement","/2016/11/09/analysis-storage-corruption-bug","/2016/11/01/solidity-0.4.4-release-announcement","/2016/11/01/security-alert-solidity-variables-can-overwritten-storage","/2016/10/25/solidity-0.4.3-release-announcement","/2016/09/17/solidity-0.4.2-release-announcement","/2016/09/09/solidity-0.4.1-release-announcement","/2016/09/08/solidity-0.4.0-release-announcement","/2016/09/01/formal-methods-roadmap","/2016/08/10/solidity-0.3.6-release-announcement","/2016/06/10/solidity-0.3.5-release-announcement","/2016/06/10/smart-contract-security","/2016/05/31/solidity-0.3.4-release-announcement","/2016/05/27/solidity-0.3.3-release-announcement","/2016/04/18/solidity-0.3.2-release-announcement","/2016/03/31/solidity-0.3.1-release-announcement","/2016/03/11/solidity-0.3.0-release-announcement","/2016/02/17/solidity-0.2.2-release-announcement","/2016/01/30/solidity-0.2.1-release-announcement","/2015/12/01/solidity-0.2.0-release-announcement","/2015/11/17/solidity-0.1.7-release-announcement","/2015/10/16/solidity-0.1.6-release-announcement","/2015/10/07/solidity-0.1.5-release-announcement","/2015/09/30/solidity-0.1.4-release-announcement","/2015/09/22/solidity-0.1.3-release-announcement","/2015/08/21/solidity-0.1.2-release-announcement"]},"__N_SSG":true}