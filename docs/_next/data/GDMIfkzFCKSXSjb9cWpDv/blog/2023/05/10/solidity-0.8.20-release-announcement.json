{"pageProps":{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.8.20 Release Announcement","date":"2023-05-10","author":"Solidity Team","category":"Releases"},"content":"\nWe are excited to announce the latest release of the Solidity Compiler, [Solidity v0.8.20](https://github.com/ethereum/solidity/releases/tag/v0.8.20).\nThis latest version includes a range of improvements in the via-IR pipeline and improves the list of events exposed in the contract ABI, and, most importantly, support for the [Shanghai hard fork](https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md)!\n\n### Important Note\n\nThis compiler switches the **default** target EVM version to Shanghai, which means that the generated bytecode will include `PUSH0` opcodes.\nBe sure to [select the appropriate EVM](https://docs.soliditylang.org/en/v0.8.20/using-the-compiler.html#setting-the-evm-version-to-target) version in case you intend to deploy on a chain other than mainnet like L2 chains that may not yet support `PUSH0`,\notherwise, deployment of your contracts will fail.\n\n### Experimental AST import via Standard JSON\n\nAn interesting new feature for tooling developers is the ability to import JSON ASTs via the Standard JSON interface using `SolidityAST` as input language.\nWe have released this as an experimental feature so far, mainly due to the lack of proper error reporting on malformed ASTs and the fact that for now we\ngenerally don't guarantee sound behavior on invalid input ASTs.\n\nSo while we strongly advise against using the AST import in any production pipeline, and especially against relying on the bytecode generated from imported\nASTs for production use, we hope that this new feature will enable the easier development of tools in the ecosystem, and we encourage giving it a try and\ngetting back to us with any feedback.\n\nAlso, note that the compiler will perform type-checking and analysis on the imported AST again - to make sure that the compiler honors the transformation you\nmay perform on the AST, you can re-export the imported AST and check the result.\n\n## Full Changelog\n\n### Compiler Features\n\n- Assembler: Use `push0` for placing `0` on the stack for EVM versions starting from \"Shanghai\". This decreases the deployment and runtime costs.\n- EVM: Set default EVM version to \"Shanghai\".\n- EVM: Support for the EVM Version \"Shanghai\".\n- NatSpec: Add support for NatSpec documentation in `enum` definitions.\n- NatSpec: Add support for NatSpec documentation in `struct` definitions.\n- NatSpec: Include NatSpec from events that are emitted by a contract but defined outside of it in userdoc and devdoc output.\n- Optimizer: Re-implement simplified version of `UnusedAssignEliminator` and `UnusedStoreEliminator`. It can correctly remove some unused assignments in deeply nested loops that were ignored by the old version.\n- Parser: Unary plus is no longer recognized as a unary operator in the AST and triggers an error at the parsing stage (rather than later during the analysis).\n- SMTChecker: Group all messages about unsupported language features in a single warning. The CLI option `--model-checker-show-unsupported` and the JSON option `settings.modelChecker.showUnsupported` can be enabled to show the full list.\n- SMTChecker: Properties that are proved safe are now reported explicitly at the end of analysis. By default, only the number of safe properties is shown. The CLI option `--model-checker-show-proved-safe` and the JSON option `settings.modelChecker.showProvedSafe` can be enabled to show the full list of safe properties.\n- Standard JSON Interface: Add experimental support for importing ASTs via Standard JSON.\n- Yul EVM Code Transform: If available, use `push0` instead of `codesize` to produce an arbitrary value on stack in order to create equal stack heights between branches.\n\n### Bugfixes\n\n- ABI: Include events in the ABI that are emitted by a contract but defined outside of it.\n- Immutables: Disallow initialization of immutables in try/catch statements.\n- SMTChecker: Fix false positives in ternary operators that contain verification targets in its branches, directly or indirectly.\n\n### AST Changes\n\n- AST: Add the `internalFunctionIDs` field to the AST nodes of contracts containing IDs of functions that may be called via the internal dispatch. The field is a map from function AST IDs to internal dispatch function IDs. These IDs are always generated, but they are only used in via-IR code generation.\n- AST: Add the `usedEvents` field to `ContractDefinition` which contains the AST IDs of all events emitted by the contract as well as all events defined and inherited by the contract.\n\nAs always, a big thank you to all contributors who helped make this release possible!\n\n## How to install/upgrade\n\nTo upgrade to the latest version of the Solidity Compiler,\nsimply follow the [installation instructions](https://docs.soliditylang.org/en/v0.8.20/installing-solidity.html) available in our documentation.\nOur team has made sure to provide detailed and straightforward steps to make the upgrade process as seamless as possible.\nIf you have any questions or run into any issues during the upgrade process,\ndon't hesitate to reach out to our [community Matrix channel](https://matrix.to/#/#ethereum_solidity:gitter.im).\n\nYou can download the new version of Solidity here: [v0.8.20](https://github.com/ethereum/solidity/releases/tag/v0.8.20).\nIf you want to build from the source code, do not use the source archives generated automatically by GitHub,\ninstead please use [`solidity_0.8.20.tar.gz`](https://github.com/ethereum/solidity/releases/download/v0.8.20/solidity_0.8.20.tar.gz)\nand take a look at [our documentation on how to build from source](https://docs.soliditylang.org/en/v0.8.20/installing-solidity.html#building-from-source)\nif you need guidance.\n\nPlease note that for those using Solidity versions below 0.8.0, [there are breaking changes](https://docs.soliditylang.org/en/v0.8.20/080-breaking-changes.html).\nWe highly recommend reviewing the detailed list of breaking changes in our documentation to ensure a smooth upgrade process.\nAdditionally, we encourage all Solidity users to regularly check for updates to stay up-to-date with the latest improvements and optimizations.\nWe advise all Solidity developers to upgrade to version 0.8.20 to take advantage of these improvements and optimizations.\n","availableURLs":["/2023/05/10/solidity-0.8.20-release-announcement","/2023/03/10/solidity-developer-survey-2022-results","/2023/02/22/user-defined-operators","/2023/02/22/solidity-0.8.19-release-announcement","/2023/02/01/solidity-0.8.18-release-announcement","/2022/12/07/solidity-developer-survey-2022-announcement","/2022/12/05/solidity-core-team-updates","/2022/09/08/storage-write-removal-before-conditional-termination","/2022/09/08/solidity-0.8.17-release-announcement","/2022/08/08/solidity-0.8.16-release-announcement","/2022/08/08/calldata-tuple-reencoding-head-overflow-bug","/2022/06/15/solidity-0.8.15-release-announcement","/2022/06/15/inline-assembly-memory-side-effects-bug","/2022/06/15/dirty-bytes-array-to-storage-bug","/2022/05/17/solidity-0.8.14-release-announcement","/2022/05/17/data-location-inheritance-bug","/2022/05/17/calldata-reencode-size-check-bug","/2022/05/03/solidity-summit-2022-recap","/2022/04/08/announcing-the-underhanded-contest-winners-2022","/2022/03/16/solidity-0.8.13-release-announcement","/2022/03/16/encodecall-bug","/2022/02/22/solidity-summit-2022-announcement","/2022/02/16/solidity-0.8.12-release-announcement","/2022/02/09/underhanded-solidity-contest-2022-announcement","/2022/02/07/solidity-developer-survey-2021-results","/2021/12/20/solidity-0.8.11-release-announcement","/2021/11/18/solidity-developer-survey-2021","/2021/11/09/solidity-0.8.10-release-announcement","/2021/09/29/user-defined-value-types-bug","/2021/09/29/solidity-0.8.9-release-announcement","/2021/09/29/signed-immutables-bug","/2021/09/27/user-defined-value-types","/2021/09/27/solidity-0.8.8-release-announcement","/2021/08/11/solidity-0.8.7-release-announcement","/2021/06/22/solidity-0.8.6-release-announcement","/2021/06/10/solidity-0.8.5-release-announcement","/2021/05/03/soliditylangorg-umbrella-domain","/2021/04/21/solidity-0.8.4-release-announcement","/2021/04/21/decoding-from-memory-bug","/2021/04/21/custom-errors","/2021/04/01/announcing-solidity-collectibles","/2021/03/23/solidity-0.8.3-release-announcement","/2021/03/23/keccak-optimizer-bug","/2021/03/02/solidity-0.8.2-release-announcement","/2021/03/02/saving-gas-with-simple-inliner","/2021/02/15/contributing-to-solidity-101","/2021/02/10/an-introduction-to-soliditys-fuzz-testing-approach","/2021/02/01/launching-the-solidity-forum","/2021/01/27/solidity-0.8.1-release-announcement","/2021/01/26/solidity-developer-survey-2020-results","/2020/12/16/solidity-v0.8.0-release-announcement","/2020/12/16/solidity-0.7.6-release-announcement","/2020/12/09/solidity-developer-survey-2020","/2020/12/03/solidity-underhanded-contest-winners","/2020/11/18/solidity-0.7.5-release-announcement","/2020/11/04/solidity-ama-1-recap","/2020/10/28/solidity-0.8.x-preview","/2020/10/19/solidity-0.7.4-release-announcement","/2020/10/19/empty-byte-array-copy-bug","/2020/10/07/solidity-dynamic-array-cleanup-bug","/2020/10/07/solidity-0.7.3-release-announcement","/2020/09/28/solidity-0.7.2-release-announcement","/2020/09/21/solidity-underhanded-contest","/2020/09/18/meet-the-team","/2020/09/02/solidity-0.7.1-release-announcement","/2020/07/28/solidity-v0.7.0-release-announcement","/2020/07/22/Solidity-0612-release-announcement","/2020/07/08/solidity-turns-5","/2020/07/07/Solidity-0611-release-announcement","/2020/06/25/sourcify-faq","/2020/06/18/solidity-0.6-inheritance","/2020/06/11/Solidity-0610-release-announcement","/2020/06/09/solidity-summit-recap","/2020/06/05/Solidity-069-release-announcement","/2020/06/02/Sourcify-Towards-Safer-Contract-Interaction-for-Humans","/2020/05/26/array-slices","/2020/05/14/Solidity-068-release-announcement","/2020/05/13/immutable-keyword","/2020/05/04/solidity-0.6.7-release-announcement","/2020/04/17/Solidity-Summit-2020-Goes-Interspace","/2020/04/09/solidity-0.6.6-release-announcement","/2020/04/06/solidity-0.6.5-release-announcement","/2020/04/06/memory-creation-overflow-bug","/2020/03/23/fallback-receive-split","/2020/03/17/solidity-0.5.17-release-announcement","/2020/03/10/solidity-0.6.4-release-announcement","/2020/02/18/solidity-0.6.3-release-announcement","/2020/01/29/solidity-0.6-try-catch","/2020/01/27/solidity-0.6.2-release-announcement","/2020/01/02/solidity-0.6.1-release-announcement","/2020/01/02/solidity-0.5.16-release-announcement","/2019/12/17/solidity-0.6.0-release-announcement","/2019/12/17/solidity-0.5.15-release-announcement","/2019/12/09/solidity-0.5.14-release-announcement","/2019/11/14/solidity-0.5.13-release-announcement","/2019/10/01/solidity-0.5.12-release-announcement","/2019/08/12/solidity-0.5.11-release-announcement","/2019/06/25/solidity-storage-array-bugs","/2019/06/25/solidity-0.5.10-release-announcement","/2019/05/28/solidity-0.5.9-release-announcement","/2019/04/30/solidity-0.5.8-release-announcement","/2019/04/29/solidity-0.4.26-release-announcement","/2019/03/26/solidity-optimizer-and-abiencoderv2-bug","/2019/03/26/solidity-0.5.7-release-announcement","/2019/03/13/solidity-0.5.6-release-announcement","/2019/03/05/solidity-0.5.5-release-announcement","/2019/02/12/solidity-0.5.4-release-announcement","/2019/01/22/solidity-0.5.3-release-announcement","/2018/12/19/solidity-0.5.2-release-announcement","/2018/12/03/solidity-0.5.1-release-announcement","/2018/11/13/solidity-0.5.0-release-announcement","/2018/09/13/solidity-bugfix-release","/2018/09/13/solidity-0.4.25-release-announcement","/2018/05/16/solidity-0.4.24-release-announcement","/2018/04/19/solidity-0.4.23-release-announcement","/2018/04/17/solidity-0.4.22-release-announcement","/2018/03/08/solidity-0.4.21-release-announcement","/2018/02/14/solidity-0.4.20-release-announcement","/2017/11/30/solidity-0.4.19-release-announcement","/2017/10/18/solidity-0.4.18-release-announcement","/2017/09/21/solidity-0.4.17-release-announcement","/2017/08/24/solidity-0.4.16-release-announcement","/2017/08/08/solidity-0.4.15-release-announcement","/2017/07/31/solidity-0.4.14-release-announcement","/2017/07/06/solidity-0.4.13-release-announcement","/2017/07/03/solidity-0.4.12-release-announcement","/2017/05/03/solidity-optimizer-bug","/2017/05/03/solidity-0.4.11-release-announcement","/2017/03/15/solidity-0.4.10-release-announcement","/2017/01/31/solidity-0.4.9-release-announcement","/2017/01/13/solidity-0.4.8-release-announcement","/2016/12/15/solidity-0.4.7-release-announcement","/2016/11/22/solidity-0.4.6-release-announcement","/2016/11/21/solidity-0.4.5-release-announcement","/2016/11/09/analysis-storage-corruption-bug","/2016/11/01/solidity-0.4.4-release-announcement","/2016/11/01/security-alert-solidity-variables-can-overwritten-storage","/2016/10/25/solidity-0.4.3-release-announcement","/2016/09/17/solidity-0.4.2-release-announcement","/2016/09/09/solidity-0.4.1-release-announcement","/2016/09/08/solidity-0.4.0-release-announcement","/2016/09/01/formal-methods-roadmap","/2016/08/10/solidity-0.3.6-release-announcement","/2016/06/10/solidity-0.3.5-release-announcement","/2016/06/10/smart-contract-security","/2016/05/31/solidity-0.3.4-release-announcement","/2016/05/27/solidity-0.3.3-release-announcement","/2016/04/18/solidity-0.3.2-release-announcement","/2016/03/31/solidity-0.3.1-release-announcement","/2016/03/11/solidity-0.3.0-release-announcement","/2016/02/17/solidity-0.2.2-release-announcement","/2016/01/30/solidity-0.2.1-release-announcement","/2015/12/01/solidity-0.2.0-release-announcement","/2015/11/17/solidity-0.1.7-release-announcement","/2015/10/16/solidity-0.1.6-release-announcement","/2015/10/07/solidity-0.1.5-release-announcement","/2015/09/30/solidity-0.1.4-release-announcement","/2015/09/22/solidity-0.1.3-release-announcement","/2015/08/21/solidity-0.1.2-release-announcement"]},"__N_SSG":true}