{"pageProps":{"categoryPostsData":[{"frontmatter":{"layout":"post","published":true,"title":"Feature Deep-Dive: User-Defined Operators","date":"2023-02-22","author":"Kamil Åšliwak, Matheus Aguiar","category":"Explainers"},"content":"\nThe highlight of Solidity 0.8.19 release\nis the support for defining operators on user-defined value types (UDVTs).\n\nIf you have not been keeping up with recent features, UDVTs are a new class of types introduced in Solidity 0.8.8.\nThey provide an abstraction over an elementary value type that results in a completely new type.\nThis is similar to creating an alias, but the new type is distinct from the underlying value type\nand all other UDVTs derived from that underlying type.\nThe ability to use operators...","url":"/blog/2023/02/22/user-defined-operators"},{"frontmatter":{"layout":"post","published":true,"title":"User Defined Value Types in Solidity","date":"2021-09-27","author":"Solidity Team","category":"Explainers"},"content":"\nSolidity v0.8.8 introduces user defined\nvalue types as a\nmeans to create zero-cost abstractions over an elementary value type that also increases type safety\nand improves readability.\n\nMotivation\n\nA problem with primitive value types is that they are not very descriptive: they only specify how\nthe data is stored and not how it should be interpreted. For example, one may want to use uint128\nto store the price of some object as well as the quantity available. It is quite useful to have\nstricter type rules to avoid...","url":"/blog/2021/09/27/user-defined-value-types"},{"frontmatter":{"layout":"post","published":true,"title":"What Happened with Solidity-related Domains?","date":"2021-05-03","author":"Franziska Heintel","category":"Explainers"},"content":"\nSome time ago we decided to get a domain that the Solidity team has easy access to in\norder to streamline efforts and initiatives that were hosted on other domains before.\n\nAnd so soliditylang.org was born! ðŸŽ‰\n\nWe announced most of these domain changes individually on Twitter, but we want to take a moment to\nalso officially announce it here on the blog\nand explain the various subdomains we have now, what they are for and which older\ndomains may be deprecated in the future.\n\nIn short,...","url":"/blog/2021/05/03/soliditylangorg-umbrella-domain"},{"frontmatter":{"layout":"post","published":true,"title":"Custom Errors in Solidity","date":"2021-04-21","author":"Solidity Team","category":"Explainers"},"content":"\nStarting from Solidity v0.8.4, there is\na convenient and gas-efficient way to explain to users why an operation failed through the use of\ncustom errors. Until now, you could already use strings to give more information about failures\n(e.g., revert(\"Insufficient funds.\");), but they are rather expensive, especially when it comes to\ndeploy cost, and it is difficult to use dynamic information in them.\n\nCustom errors are defined using the error statement, which can be used inside and outside of\ncontracts (including interfaces and libraries).\n\nExample\n\nThe following contract...","url":"/blog/2021/04/21/custom-errors"},{"frontmatter":{"layout":"post","published":true,"title":"Saving Gas with Simple Inlining","date":"2021-03-02","author":"Christian Reitwiessner","category":"Explainers"},"content":"\nSolidity v0.8.2 adds a simple inliner to the low-level optimizer of Solidity. In this post, we examine how it works and take a look at synergies with other steps of the optimizer.\n\nLow-Level Inliner\n\nThe Low-Level Inliner is a component of the low-level optimizer of the Solidity compiler.\nTo save gas, it can inline short functions that do not contain control-flow branches or\nopcodes with side-effects.\n\nThe decision to inline or not is based on the trade-off parameter \"runs\":\nThe combined code deposit cost and execution...","url":"/blog/2021/03/02/saving-gas-with-simple-inliner"},{"frontmatter":{"layout":"post","published":true,"title":"Contributing to Solidity 101","date":"2021-02-15","author":"Franziska Heintel","category":"Explainers"},"content":"\nThe Solidity programming language is an open-source project governed by a core team. We rely on the communityâ€™s feedback, input and contributions to make the language as effective, safe and useful as possible.\n\nIn this post, we will walk you through the various different ways how you can get involved contributing to Solidity! Do not hesitate to contact us in case anything is left unclear after reading the post.\n\nOverview of Contribution Opportunities\n\nThere are plenty of options how you can contribute to...","url":"/blog/2021/02/15/contributing-to-solidity-101"},{"frontmatter":{"layout":"post","published":true,"title":"An Introduction to Solidity's Fuzz Testing Approach","date":"2021-02-10","author":"Bhargava Shastry","category":"Explainers"},"content":"\nSecurity vulnerabilities and bugs detract from software quality.\nTo discover them early, at best before they are released, we have adopted fuzz testing: feeding randomly generated programs to the Solidity compiler and observing the compilation runtime and code generated.\n\nSince Q1 2019, the Solidity compiler is fuzz tested via Google's open-source software fuzz (oss-fuzz) framework.\n\nIn this post, we briefly describe the work that has been done on this front, and work that is currently in progress.\n\nFuzzer Overview\n\nBroadly speaking, we have developed two...","url":"/blog/2021/02/10/an-introduction-to-soliditys-fuzz-testing-approach"},{"frontmatter":{"layout":"post","published":true,"title":"All you need to know about Sourcify","date":"2020-06-25","author":"Franziska Heintel","category":"Explainers"},"content":"\nWelcome to Sourcify's first short FAQ! If your questions around source verification haven't been answered after reading\nthis post, please feel free to drop by the Sourcify Gitter channel and ask us\nany question there. Also stay tuned on more turorials and developer focused content to follow here and on the Remix blog!\n\nSource Verification\n\nWhat is source verification?\n\nSolidity contract source code can be verified by checking whether the on-chain deployed code\nis matching with published source code files. In order to allow for source...","url":"/blog/2020/06/25/sourcify-faq"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.6.x features: inheritance","date":"2020-06-18","author":"Elena Gesheva","category":"Explainers"},"content":"\nSimilar to object-oriented programming in Solidity - a contract-oriented language - the inheritance and polymorphism features are as widely adopted and critical for the language evolution. There is hardly any Solidity developer who hasn't used these language features in their contracts to decouple logic and increase code reuse. With version 0.6 of the language the main improvements introduced are to make existing rules explicit in addition to introducing interface inheritance and disallowing the dangerous state variable shadowing. The compiler continues...","url":"/blog/2020/06/18/solidity-0.6-inheritance"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.6.x features: Array Slices","date":"2020-05-26","author":"Solidity Team","category":"Explainers"},"content":"\nStarting from version 0.6.0, Solidity supports array slices.\nArray slices are handy when you want to reference a\ncontiguous portion of an array but do not want to perform a full copy of that portion. For now, array slices are only\nsupported for calldata arrays.\n\nHow to use Array Slices\n\nThe expression x[start:end] references a portion of the calldata array x starting at index start and ending just\nbefore index end.\n\nBoth start and end are optional. If not provided, start defaults to 0 and end defaults...","url":"/blog/2020/05/26/array-slices"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.6.x features: Saving Storage Costs with Immutables","date":"2020-05-13","author":"Daniel Kirchner","category":"Explainers"},"content":"\nWith version 0.6.5, Solidity introduced the\nimmutable keyword\nfor state variables. Immutable state variables can only be assigned during contract creation, but will remain\nconstant throughout the life-time of a deployed contract.\nThe big advantage of immutables is that reading them is significantly cheaper than reading from regular state variables,\nsince immutables will not be stored in storage, but their values will be directly inserted into the runtime code.\n\nHow to use Immutables\n\nImmutable state variables can be declared using the immutable keyword. They cannot be read...","url":"/blog/2020/05/13/immutable-keyword"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.6.x features: fallback and receive functions","date":"2020-03-26","author":"Elena Gesheva","category":"Explainers"},"content":"\nIn versions of Solidity before 0.6.x, developers typically used the fallback function to handle logic in two scenarios:\n\ncontract received ether and no data\ncontract received data but no function matched the function called\n\nThe main use case of the pre-0.6.x fallback function is to receive ether and react\nto it, a typical pattern used by token-style contracts to reject transfers, emit\nevents or forward the ether. The function executes when a contract is called\nwithout any data e.g. via .send() or .transfer() functions. The 0.5.x\nsyntax...","url":"/blog/2020/03/23/fallback-receive-split"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.6.x features: try/catch statement","date":"2020-01-29","author":"Elena Gesheva","category":"Explainers"},"content":"\nThis post was originally published on the Ethereum blog.\n\nThe try/catch syntax introduced in 0.6.0 is arguably the biggest leap in error handling capabilities in Solidity, since reason strings for revert and require were released in v0.4.22. Both try and catch have been reserved keywords since v0.5.9 and now we can use them to handle failures in external function calls without rolling back the complete transaction (state changes in the called function are still rolled back, but the ones in the...","url":"/blog/2020/01/29/solidity-0.6-try-catch"}],"category":"Explainers"},"__N_SSG":true}