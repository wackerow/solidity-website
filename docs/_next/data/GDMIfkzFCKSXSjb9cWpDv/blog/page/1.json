{"pageProps":{"allPostsData":[{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.8.20 Release Announcement","date":"2023-05-10","author":"Solidity Team","category":"Releases"},"content":"\nWe are excited to announce the latest release of the Solidity Compiler, Solidity v0.8.20.\nThis latest version includes a range of improvements in the via-IR pipeline and improves the list of events exposed in the contract ABI, and, most importantly, support for the Shanghai hard fork!\n\nImportant Note\n\nThis compiler switches the default target EVM version to Shanghai, which means that the generated bytecode will include PUSH0 opcodes.\nBe sure to select the appropriate EVM version in case you intend to deploy on a...","url":"/blog/2023/05/10/solidity-0.8.20-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity Developer Survey 2022 Results","date":"2023-03-10","author":"Franziska Heintel","category":"Announcements"},"content":"\nThe 2022 Solidity Developer Survey results are in! In this post, we will be summarizing and analyzing them.\n\nFirst of all, a big thank you to everybody who took the time and participated and to everybody who helped us spread the word about it!\nThis year, we received a smashing 1401 responses. That is more than a 3x in responses compared to the previous survey and we couldn't be happier with the turnout.\nYour input is invaluable to us and plays a crucial...","url":"/blog/2023/03/10/solidity-developer-survey-2022-results"},{"frontmatter":{"layout":"post","published":true,"title":"Feature Deep-Dive: User-Defined Operators","date":"2023-02-22","author":"Kamil ≈öliwak, Matheus Aguiar","category":"Explainers"},"content":"\nThe highlight of Solidity 0.8.19 release\nis the support for defining operators on user-defined value types (UDVTs).\n\nIf you have not been keeping up with recent features, UDVTs are a new class of types introduced in Solidity 0.8.8.\nThey provide an abstraction over an elementary value type that results in a completely new type.\nThis is similar to creating an alias, but the new type is distinct from the underlying value type\nand all other UDVTs derived from that underlying type.\nThe ability to use operators...","url":"/blog/2023/02/22/user-defined-operators"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.8.19 Release Announcement","date":"2023-02-22","author":"Solidity Team","category":"Releases"},"content":"\nWe are excited to announce the latest release of the Solidity Compiler, Solidity v0.8.19.\nThis latest version includes a range of improvements and it also introduces the support for defining operators on user-defined value types (UDVTs)!\nYou can learn about it at length in our feature deep-dive blogpost.\n\nNotable New Features\n\nThese are the features we want to highlight in this release.\n\nOperators for User-Defined Value Types\n\nThe ability to use operators is meant to bring the UDVTs closer to being as natural to use\nas the...","url":"/blog/2023/02/22/solidity-0.8.19-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.8.18 Release Announcement","date":"2023-02-01","author":"Solidity Team","category":"Releases"},"content":"\nIntroducing the newest version of the Solidity Compiler!\n\nWe are excited to announce the latest release of the Solidity Compiler, Solidity v0.8.18.\nThis latest version includes a range of improvements and it also introduces support for the Paris upgrade!\n\nNotable New Features\n\nThese are the features we want to highlight in this release.\n\nDisabling CBOR metadata\n\nA new command-line flag (--no-cbor-metadata) and Standard JSON option (settings.metadata.appendCBOR: false) to prevent compiler from appending the CBOR metadata section at the end of the bytecode.\nUntil now, it was only...","url":"/blog/2023/02/01/solidity-0.8.18-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity Developer Survey 2022 is Live!","date":"2022-12-07","author":"Franziska Heintel","category":"Announcements"},"content":"\nIt‚Äôs that time of the year. Drumroll, please! ü•Åü•Åü•Å\nWe are launching the Solidity Developer Survey 2022!\n\nBefore we wrap up 2022 for good, we want to reach out to collect your feedback and insights so we can improve on it!\n\nüìù TAKE THE SURVEY! üìù\n\nYou can find the previous results of the Solidity Developer Survey 2021 here. In 2021, 435 developers from 73 different countries participated with 80% of respondents using Solidity daily or weekly.\n\nAbout the Survey ü™Ñ\n\nLike in previous years, this...","url":"/blog/2022/12/07/solidity-developer-survey-2022-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity Core Team Updates","date":"2022-12-05","author":"Solidity Team","category":"Announcements"},"content":"\nMore than two years have passed since we introduced Solidity core team members on the blog and we realized it is high time for some updates: Meet new team members, find out who moved on to other adventures and learn about recent changes in the team structure!\n\nBefore we dive in, a reminder that the Solidity programming language and compiler are open-source community projects. This post dives into the core team that leads the development. Nevertheless, we cannot stress enough how...","url":"/blog/2022/12/05/solidity-core-team-updates"},{"frontmatter":{"layout":"post","published":true,"title":"Storage Write Removal Bug On Conditional Early Termination","date":"2022-09-08","author":"Solidity Team","category":"Security Alerts"},"content":"\nOn September 5, 2022, a bug in Solidity's Yul optimizer was found by differential fuzzing.\n\nThe bug was introduced in version 0.8.13 and Solidity version 0.8.17, released on September 08, 2022, provides a fix. The bug is significantly easier to trigger with optimized via-IR code generation, but can theoretically also occur in optimized legacy code generation.\n\nWe assigned the bug a severity of \"medium/high\".\n\nWho Should Be Concerned\n\nIf you're using optimized legacy code generation, you only need to be concerned, if you use...","url":"/blog/2022/09/08/storage-write-removal-before-conditional-termination"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.8.17 Release Announcement","date":"2022-09-08","author":"Solidity Team","category":"Releases"},"content":"\nSolidity v0.8.17\nfixes an important bug, makes overflow checks on multiplication more efficient and adds an LSP feature to\nalways analyze all files in a project.\n\nImportant Bugs\n\nStorage Write Removal Bug On Conditional Early Termination\n\nThe bug may result in storage writes being incorrectly considered redundant and removed by the optimizer.\nThe problem manifests in presence of assembly functions that may conditionally terminate the external\nEVM call using the return() or stop() opcode.\n\nSee the security alert post on Storage Write Removal Bug On Conditional Early Termination\nfor...","url":"/blog/2022/09/08/solidity-0.8.17-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.8.16 Release Announcement","date":"2022-08-08","author":"Solidity Team","category":"Releases"},"content":"\nSolidity v0.8.16\nfixes an important bug.\n\nThe bug may result in small parts of dynamic tuple components being inadvertently zeroed during\nABI re-encoding when the last component is a statically-sized uint or bytes32 calldata array.\nSee Head Overflow Bug in Calldata Tuple ABI-Reencoding\nfor more information.\n\nApart from that, there are several minor bug fixes and improvements like more gas-efficient overflow checks\nfor addition and subtraction.\n\nFull Changelog\n\nImportant Bugfixes:\n\nCode Generation: Fix data corruption that affected ABI-encoding of calldata values represented by tuples: structs at any nesting level; argument...","url":"/blog/2022/08/08/solidity-0.8.16-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Head Overflow Bug in Calldata Tuple ABI-Reencoding","date":"2022-08-08","author":"Solidity Team","category":"Security Alerts"},"content":"\nOn July 5, 2022, Chance Hudson (@vimwitch) from the Ethereum Foundation discovered a bug in the Solidity code generator.\n\nThe earliest affected version of the compiler is 0.5.8, which introduced ABI-reencoding of calldata arrays and structs.\nSolidity version 0.8.16, released on August 08, 2022, provides a fix.\n\nWe assigned the bug a severity of \"medium\".\n\nWhich Contracts are Affected?\n\nThe effects of the bug manifest when a contract performs ABI-encoding of a tuple that meets all of the following conditions:\n\nThe last component of the tuple...","url":"/blog/2022/08/08/calldata-tuple-reencoding-head-overflow-bug"}],"page":1,"totalPages":16},"__N_SSG":true}