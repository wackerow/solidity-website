{"pageProps":{"allPostsData":[{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.7.6 Release Announcement","date":"2020-12-16","author":"Solidity Team","category":"Releases"},"content":"\nSolidity v0.7.6 adds better support for calldata types. Furthermore, the fallback function can now have a parameter and explicitly return data.\n\nNotable New Features\n\nDetection of Overflowing Unicode Direction Markers\n\nThe winning entry in the\nSolidity Underhanded Contest\nused a clever combination of Unicode direction markers to deceive the reader about\nthe semantics of a time-locked upgrade mechanism. Starting from Solidity 0.7.6, the parser will reject\ncomments and Unicode strings where the text direction is not properly reset before the end of the\ncomment or string.\n\nBetter Support for...","url":"/blog/2020/12/16/solidity-0.7.6-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Launching the Solidity Developer Survey 2020","date":"2020-12-09","author":"Franziska Heintel","category":"Announcements"},"content":"\nToday we are launching the Solidity Developer Survey 2020. It is the first time we share a proper language survey and we hope to turn this into an annual tradition moving forward.\n\nYou might remember the small feedback survey we did this year as part of the Solidity Summit registration in which we asked you for the most liked and dreaded Solidity features. If you're curious to revisit the results of that click here.\n\nHelp shape the future of Solidity üîÆ\n\nSo why...","url":"/blog/2020/12/09/solidity-developer-survey-2020"},{"frontmatter":{"layout":"post","published":true,"title":"Announcing the Winners of the Underhanded Solidity Contest üë®‚ÄçüíªüèÖ","date":"2020-12-03","author":"Franziska Heintel","category":"Announcements"},"content":"\nAfter thorough assessment of all submissions, we are happy to share the winners of this year's Underhanded Solidity Contest!\n\nIf you are not familiar with it, please read the announcement from September.\n\nBefore we dive into the winning submissions, we'd like to thank all participants for taking part. In total, we received 16 qualifying submissions which you can find in this repo. All 16 submissions are eligible for a \"qualified submission\" Underhanded Solidity POAP NFT - winners will receive an additional \"Winners\"...","url":"/blog/2020/12/03/solidity-underhanded-contest-winners"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.7.5 Release Announcement","date":"2020-11-18","author":"Solidity Team","category":"Releases"},"content":"\nSolidity v0.7.5 adds the ability so select the ABI coder via pragma abicoder v1 and pragma abicoder v2 in preparation for making ABI coder v2 the default for 0.8.0 and introduces --experimental-via-ir which compiles via the new experimental Yul-based compiler pipeline.\n\nFull Changelog\n\nLanguage Features:\n\nAbility to select the abi coder using pragma abicoder v1 and pragma abicoder v2.\nInline Assembly: Use .offset and .length for calldata variables of dynamic array type to access their calldata offset and length (number of elements). Both of...","url":"/blog/2020/11/18/solidity-0.7.5-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Ask the Solidity Team Anything #1 Recap","date":"2020-11-04","author":"Solidity Team","category":"Announcements"},"content":"\nWe hosted our very first Solidity team AMA on Reddit last week! We would like to take the opportunity to summarize the most interesting and most upvoted questions & answers in this post.\n\nIf you are interested in going through the full AMA thread you can do so here.\n\nGeneral Questions\n\nRoadmap Outlook: What does the Solidity team see as its most important feature goals in the medium-long term and what are the biggest blockers to achieving those goals?\n\nAs far as the compiler...","url":"/blog/2020/11/04/solidity-ama-1-recap"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.8.x Preview Release","date":"2020-10-28","author":"Solidity Team","category":"Releases"},"content":"\nWith the Solidity 0.8.x series being just around the corner, we would like to provide insights into the upcoming breaking changes that will come with it.\n\nWe want to provide a preview release binary for everyone to try out so that you can give your feedback.\n\nThe main change for 0.8.x is the switch to checked arithmetic operations by default.\nThis means that x + y will throw an exception on overflow. In other words: You will not need SafeMath anymore!\n\nSince the scope...","url":"/blog/2020/10/28/solidity-0.8.x-preview"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.7.4 Release Announcement","date":"2020-10-19","author":"Solidity Team","category":"Releases"},"content":"\nSolidity v0.7.4 fixes a storage corruption bug of medium severity.\nTo learn more about the bug and to check if your contract is vulnerable please read this post with further details about the bug. The bug has been reported by John Toman of the Certora development team.\n\nAdditionally, v0.7.4 adds constants at file-level.\n\nImportant Bugfixes\n\nCode Generator: Fix data corruption bug when copying empty byte arrays from memory or calldata to storage. Read more here.\n\nNotable New Features\n\nConstants at File-Level\n\nIn order to make functions at...","url":"/blog/2020/10/19/solidity-0.7.4-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity Empty Byte Array Copy Bug","date":"2020-10-19","author":"Solidity Team","category":"Security Alerts"},"content":"\nOn October 14, 2020, a bug in the Solidity code generator was reported by\nJohn Toman of the Certora development team. Certora's bug disclosure post can be found here.\n\nThe bug is fixed with Solidity version 0.7.4\nreleased on October 19, 2020. The bug is present in all prior versions of Solidity.\n\nWe assigned the bug a severity level of \"medium\".\n\nWho should be concerned\n\nThis bug can cause newly created elements of bytes or string arrays in storage\nto be initialized by a non-zero value. For...","url":"/blog/2020/10/19/empty-byte-array-copy-bug"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity Dynamic Array Cleanup Bug","date":"2020-10-07","author":"Solidity Team","category":"Security Alerts"},"content":"\nOn September 17, 2020, a bug in the Solidity code generator was found. The bug is fixed with version 0.7.3\nreleased on October 7, 2020. The bug is present in all prior versions of Solidity.\n\nWe assigned the bug a severity level of \"medium\".\n\nTechnical Details of the Bug\n\nSummary: For a dynamically-sized storage-array with types of size at most 16 bytes,\nassignments that require deleting slots did not zero out the deleted slots properly.\n\nConsider a dynamically-sized array in storage whose base-type is small enough...","url":"/blog/2020/10/07/solidity-dynamic-array-cleanup-bug"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.7.3 Release Announcement","date":"2020-10-07","author":"Solidity Team","category":"Releases"},"content":"\nSolidity v0.7.3 fixes a bug in the dynamic-array cleanup.\nTo learn more about the bug and check if your contract is vulnerable please read this post with further details about the bug.\nAdditionally, v0.7.3 adds the option to stop compilation after the parsing stage using solc --stop-after parsing.\n\nImportant Bugfixes\n\nCode Generator: Properly cleanup after copying dynamic-array to storage for packed types. Read more here.\n\nNotable New Features\n\nStop Compilation after Parsing\n\nsolc --stop-after parsing (or settings.stopAfter = 'parsing' in standard-json) can now be used to instruct...","url":"/blog/2020/10/07/solidity-0.7.3-release-announcement"}],"page":6,"totalPages":16},"__N_SSG":true}