{"pageProps":{"allPostsData":[{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.2.1 Release Announcement","date":"2016-01-30","author":"Solidity Team","category":"Releases"},"content":"\nThis release includes three major features and one very important bugfix in the optimizer.\n\nIn some situations, the optimizer generated incorrect code. Please always test your code before you use it, unfortunately, we can never guarantee 100% correctness.\n\nWe are especially grateful about the many voluntary community contributions this release received.\nTwo fearless individuals dived deep into the solidity code and delivered two major features: Thanks a lot to @VoR0220 for the inline arrays and to @guanqun for the ternary operator!\nFurthermore, @bobsummerwill spent...","url":"/blog/2016/01/30/solidity-0.2.1-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.2.0 Release Announcement","date":"2015-12-01","author":"Solidity Team","category":"Releases"},"content":"\nFeatures:\n\nAllocation of memory arrays using new.\nBinding library functions to types via using x for y\nBreaking Change**: new ContractName.value(10)() has to be written as (new ContractName).value(10)()\nAdded selfdestruct as an alias for suicide.\n\nBugfixes:\n\nConstructor arguments of fixed array type were not read correctly.\nMemory allocation of structs containing arrays or strings.\nData location for explicit memory parameters in libraries was set to storage.\n\nThe two main features of this release is the ability to create memory arrays (of dynamic length) and to\nattach library functions to types....","url":"/blog/2015/12/01/solidity-0.2.0-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.1.7 Release Announcement","date":"2015-11-17","author":"Solidity Team","category":"Releases"},"content":"\nFeatures:\n\nImproved error messages for unexpected tokens.\nProof-of-concept transcompilation to why3 for formal verification of contracts.\n\nBugfixes:\n\nWriting to elements of bytes or string overwrite others.\nArrays (also strings) as indexed parameters of events.\n\"Successor block not found\" on Windows.\nUsing string literals in tuples.\nCope with invalid commit hash in version for libraries.\nSome test framework fixes on windows.\n\nA big thank you to all contributors who helped make this release possible!\n\nDownload the new version of Solidity here.\n","url":"/blog/2015/11/17/solidity-0.1.7-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.1.6 Release Announcement","date":"2015-10-16","author":"Solidity Team","category":"Releases"},"content":"\nFeatures:\n\n.push() for dynamic storage arrays.\nTuple expressions ((1,2,3) or return (1,2,3);)\nDeclaration and assignment of multiple variables (var (x,y,) = (1,2,3,4,5); or var (x,y) = f();)\nDestructuring assignment ((x,y,) = (1,2,3))\nHandling of multiple source files in the json compiler.\n\nBugfixes:\n\nInternal error about usage of library function with invalid types.\nCorrectly parse Library.structType a at statement level.\nCorrectly report source locations of parenthesized expressions (as part of \"tuple\" story).\n\nA big thank you to all contributors who helped make this release possible!\n\nDownload the new version of Solidity here.\n","url":"/blog/2015/10/16/solidity-0.1.6-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.1.5 Release Announcement","date":"2015-10-07","author":"Solidity Team","category":"Releases"},"content":"\nChanges:\n\nBreaking change in storage encoding: Encode short byte arrays and strings together with their length in storage.\nReport warnings.\nAllow storage reference types for public library functions.\nAccess to types declared in other contracts and libraries via ..\nVersion stamp at beginning of runtime bytecode of libraries.\nBugfix: Problem with initialized string state variables and dynamic data in constructor.\nBugfix: Resolve dependencies concerning new automatically.\nBugfix: Allow four indexed arguments for anonymous events.\nBugfix: Detect too large integer constants in functions that accept arbitrary parameters.\n\nA big thank you...","url":"/blog/2015/10/07/solidity-0.1.5-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.1.4 Release Announcement","date":"2015-09-30","author":"Solidity Team","category":"Releases"},"content":"\nChanges:\n\nBugfix: combined-json output of solc incorrectly returned the runtime binary instead of the binary.\nBugfix: Accessing fixed-size array return values.\nBugfix: Disallow assignment from literal strings to storage pointers.\nRefactoring: Move type checking into its own module.\n\nA big thank you to all contributors who helped make this release possible!\n\nDownload the new version of Solidity here.\n","url":"/blog/2015/09/30/solidity-0.1.4-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.1.3 Release Announcement","date":"2015-09-22","author":"Solidity Team","category":"Releases"},"content":"\nChanges:\n\nthrow statement.\nLibraries that contain functions which are called via CALLCODE.\nLinker stage for compiler to insert other contract's addresses (used for libraries).\nCompiler option to output runtime part of contracts.\nCompile-time out of bounds check for access to fixed-size arrays by integer constants.\nVersion string includes libevmasm/libethereum's version (contains the optimizer).\nBugfix: Accessors for constant public state variables.\nBugfix: Propagate exceptions in clone contracts.\nBugfix: Empty single-line comments are now treated properly.\nBugfix: Properly check the number of indexed arguments for events.\nBugfix: Strings in struct constructors.\n\nA big thank...","url":"/blog/2015/09/22/solidity-0.1.3-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.1.2 Release Announcement","date":"2015-08-21","author":"Solidity Team","category":"Releases"},"content":"\nChanges:\n\nImproved commandline interface (breaking change).\nExplicit conversion between bytes and string.\nBugfix: Value transfer used in clone contracts.\nBugfix: Problem with strings as mapping keys.\nBugfix: Prevent usage of some operators.\n\nA big thank you to all contributors who helped make this release possible!\n\nDownload the new version of Solidity here.\n","url":"/blog/2015/08/21/solidity-0.1.2-release-announcement"}],"page":16,"totalPages":16},"__N_SSG":true}