{"pageProps":{"allPostsData":[{"frontmatter":{"layout":"post","published":true,"title":"Solidity Summit 2022 Goes Amsterdam","date":"2022-02-22","author":"Franziska Heintel","category":"Announcements"},"content":"\nThe Solidity Summit is finally back! After a first virtual Solidity Summit in 2020, we are excited to announce an in-person event for 2022!\n\nSolidity Summit 2022 is part of Devconnect and will happen on Wednesday, April 20 2022, in Amsterdam.\n\nWhat is the Solidity Summit?\n\nThe Solidity Summit is a collaborative event focusing on the future of Solidity. It's a get together for advanced Solidity users and other Solidity ecosystem stakeholders such as developers interested in language design, tooling builders, auditors and...","url":"/blog/2022/02/22/solidity-summit-2022-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.8.12 Release Announcement","date":"2022-02-16","author":"Solidity Team","category":"Releases"},"content":"\nSolidity v0.8.12\nimproves the JavaScript / Wasm binary and fixes several bugs.\n\nNotable New Features\n\nEmscripten Build / solc-js\n\nWe were able to reduce the size of the JavaScript / WebAssembly\nbinaries from 27 MB to just over 8 MB. The reason for the large binary\nin the first place is that we include the SMT solver Z3.\n\nThe size reduction is achieved by compressing the binary using LZ4 and\ndecompressing it when it is loaded, which should be completely transparent to the user.\nWe were initially worried that...","url":"/blog/2022/02/16/solidity-0.8.12-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Underhanded Solidity Contest 2022","date":"2022-02-09","author":"Franziska Heintel","category":"Announcements"},"content":"\nThe long wait is over: The Underhanded Solidity Contest is back with a 2022 edition!\n\nAfter a successful revival in 2020, we believe it's time for the great Solidity minds to get together again and compete over the next big underhanded hack!\n\nIn case you're new to this, let's get you up to speed with a quick recap on what the Underhanded Solidity Contest (USC) is all about:\n\nIn a nutshell, the USC is about finding loopholes or \"hiding spots\" in the Solidity...","url":"/blog/2022/02/09/underhanded-solidity-contest-2022-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity Developer Survey 2021 Results","date":"2022-02-07","author":"Franziska Heintel","category":"Announcements"},"content":"\nIn this post, we will be summarizing and analyzing the results of the 2021 Solidity Developer Survey.\n\nA big thank you goes out to everybody who took the time and participated!\n\nYour input is invaluable to us and plays a crucial role in helping to continuously improve the Solidity developer experience as a whole.\n\nSummary & Notable Insights\n\nSurvey Audience**: In total, 435 developers from 73 different countries participated in the 2021 survey. Compared to 2020, that is more than a 100% increase in...","url":"/blog/2022/02/07/solidity-developer-survey-2021-results"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.8.11 Release Announcement","date":"2021-12-20","author":"Solidity Team","category":"Releases"},"content":"\nSolidity v0.8.11\nadds a first implementation of a Language Server, allows a safer way to\nperform ABI-encoding and fixes several bugs.\n\nNotable New Features\n\nLanguage Server Preview\n\nLanguage Server Protocol\nis an initiative that allows better interoperability between IDEs and\ncompilers, or more generally, language diagnostics tools. The idea is that\ninstead of writing a different plugin for each combination of IDEs and\nlanguages, every IDE implements a single client and every compiler implements\na single server and since both of them use the same protocol, you can combine\nall of...","url":"/blog/2021/12/20/solidity-0.8.11-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity Developer Survey 2021 is Live!","date":"2021-11-18","author":"Franziska Heintel","category":"Announcements"},"content":"\nToday, we launched the Solidity Developer Survey 2021. Please all take 10 minutes to participate and let us know your feedback!\n\nThis marks the second time we are conducting a structured big developer survey. You can find the results of last year's Solidity developer survey here.\n\nShape the Future of Solidity ðŸ”®\n\nThe survey helps us to further improve the Solidity language and compiler and shape the future roadmap of Solidity. We can't wait to hear your thoughts on the prioritization of new...","url":"/blog/2021/11/18/solidity-developer-survey-2021"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.8.10 Release Announcement","date":"2021-11-09","author":"Solidity Team","category":"Releases"},"content":"\nSolidity v0.8.10 can now report contract invariants and reentrancy properties through the SMTChecker. It also contains some new optimizations with regards to external function calls and enables the new EVM code generator for pure Yul mode.\n\nNotable New Features\n\nNew EVM Code Transform for Compilation via Yul IR\n\nWith this release, we introduce a new EVM code generation backend that is used for the experimental compilation pipeline of Solidity via Yul (with enabled optimizer), as well as for optimized compilation of Yul input.\n\nWhile...","url":"/blog/2021/11/09/solidity-0.8.10-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"User Defined Value Types Bug","date":"2021-09-29","author":"Solidity Team","category":"Security Alerts"},"content":"\nOn September 28th, 2021, Harry Altman (@haltman-at) of Truffle\ndiscovered a bug in user defined value types.\n\nThe bug has no influence on the correctness of Solidity contracts, but contracts compiled with\nSolidity 0.8.8 that use the new feature are unnecessarily wasteful and might have problems with\ntooling or contract upgrades.\n\nThe bug exists only in Solidity 0.8.8 and is fixed in 0.8.9.\n\nWe assigned the bug a severity of \"very low\".\n\nStorage Layout of User Defined Value Types\n\nThe compiler did not correctly compute the storage layout...","url":"/blog/2021/09/29/user-defined-value-types-bug"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.8.9 Release Announcement","date":"2021-09-29","author":"Solidity Team","category":"Releases"},"content":"\nSolidity v0.8.9 is a pure bugfix release and fixes two important, but low severity, bugs.\n\nThe first bug is related to immutables of signed integer types shorter than 256 bits. The bug causes sign extension (cleanup) of those values to not always being properly performed. It was introduced in Solidity 0.6.5. Read more in the respective security alert.\nThe second bug was introduced with user defined value types in Solidity v0.8.8 (released two days ago). User defined types with underlying type shorter...","url":"/blog/2021/09/29/solidity-0.8.9-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Signed Immutables Bug","date":"2021-09-29","author":"Solidity Team","category":"Security Alerts"},"content":"\nOn September 28th, 2021, the Solidity team discovered that\nfor immutable variables of a signed integer type shorter than 256 bits,\nsign extension (cleanup) of its value is not always properly performed.\n\nTo our knowledge, the value can only be accessed in its unclean state\nwhen using inline assembly.\nThe bug is present since the introduction of the\nimmutable feature in Solidity 0.6.5 and is fixed in 0.8.9.\n\nWe assigned the bug a severity of \"very low\".\n\nTechnical Details\n\nWhen immutable variables are assigned in Solidity during the construction...","url":"/blog/2021/09/29/signed-immutables-bug"}],"page":3,"totalPages":16},"__N_SSG":true}