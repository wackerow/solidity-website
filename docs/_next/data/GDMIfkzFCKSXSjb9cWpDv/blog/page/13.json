{"pageProps":{"allPostsData":[{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.16 Release Announcement","date":"2017-08-24","author":"Solidity Team","category":"Releases"},"content":"\nThis release introduces several new features, some of which have to be\nexplicitly activated using pragma experimental ;.\n\nWe split the constant keyword for functions into pure (neither reads from nor writes to the state)\nand view (does not modify the state). They are not enforced yet, but will most likely make use\nof the the new STATIC_CALL feature after Metropolis.\n\nFurthermore, the ABI encoder was re-implemented in a much cleaner way using our new intermediate language. It can encode arbitrarily nested arrays and will...","url":"/blog/2017/08/24/solidity-0.4.16-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.15 Release Announcement","date":"2017-08-08","author":"Solidity Team","category":"Releases"},"content":"\nThis is mainly a bugfix release that corrects a problem with the return value of the low-level delegatecall function and removes some invalid warning messages.\n\nFeatures:\n\nType Checker: Show unimplemented function if trying to instantiate an abstract class.\n\nBugfixes:\n\nCode Generator: .delegatecall() should always return execution outcome.\nCode Generator: Provide \"new account gas\" for low-level callcode and delegatecall.\nType Checker: Constructors must be implemented if declared.\nType Checker: Disallow the .gas() modifier on ecrecover, sha256 and ripemd160.\nType Checker: Do not mark overloaded functions as shadowing other functions.\nType...","url":"/blog/2017/08/08/solidity-0.4.15-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.14 Release Announcement","date":"2017-07-31","author":"Solidity Team","category":"Releases"},"content":"\nThis release contains several new features and bugfixes and also an important security fix: The ecrecover function can be forced to return invalid data, which can be used to bypass authentication in very special circumstances.\n\nFeatures:\n\nC API (jsonCompiler): Export the license method.\nCode Generator: Optimise the fallback function, by removing a useless jump.\nInline Assembly: Show useful error message if trying to access calldata variables.\nInline Assembly: Support variable declaration without initial value (defaults to 0).\nMetadata: Only include files which were used to compile...","url":"/blog/2017/07/31/solidity-0.4.14-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.13 Release Announcement","date":"2017-07-06","author":"Solidity Team","category":"Releases"},"content":"\nThis is a small bugfix release that fixes several trivial but very annoying bugs that were introduced with 0.4.12. We also deprecate some old features in preparation of the breaking release 0.5.0.\n\nFeatures:\n\nSyntax Checker: Deprecated throw in favour of require(), assert() and revert().\nType Checker: Warn if a local storage reference variable does not explicitly use the keyword storage.\n\nBugfixes:\n\nCode Generator: Correctly unregister modifier variables.\nCompiler Interface: Only output AST if analysis was successful.\nError Output: Do not omit the error type.\n\nA big thank you...","url":"/blog/2017/07/06/solidity-0.4.13-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.12 Release Announcement","date":"2017-07-03","author":"Solidity Team","category":"Releases"},"content":"\nThis release introduces the AST export, solidifies inline assembly, introduces some more warnings and fixes several bugs.\n\nManual jumps in assembly are deprecated in favour of the structured constructs switch, for and function calls also to provide better portability in the future.\n\nFeatures:\n\nAssembly: Add CREATE2 (EIP86), STATICCALL (EIP214), RETURNDATASIZE and RETURNDATACOPY (EIP211) instructions.\nAssembly: Display auxiliary data in the assembly output.\nAssembly: Renamed SHA3 to KECCAK256.\nAST: export all attributes to JSON format.\nC API (jsonCompiler): Use the Standard JSON I/O internally.\nCode Generator: Added the Whiskers...","url":"/blog/2017/07/03/solidity-0.4.12-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity Optimizer Bug","date":"2017-05-03","author":"Martin Swende","category":"Security Alerts"},"content":"\nThis post was originally published on the Ethereum blog.\n\nA bug in the Solidity optimizer was reported through the Ethereum Foundation Bounty program, by Christoph Jentzsch. This bug is patched as of 2017-05-03, with the release of Solidity 0.4.11.\n\nBackground\n\nThe bug in question concerned how the optimizer optimizes on constants in the byte code. By \"byte code constants\", we mean anything which is PUSHed on the stack (not to be confused with Solidity constants). For example, if the value 0xfffffffffffffffffffffffffffffffffffffffffffffffe is PUSHed,...","url":"/blog/2017/05/03/solidity-optimizer-bug"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.11 Release Announcement","date":"2017-05-03","author":"Solidity Team","category":"Releases"},"content":"\nThis release fixes a bug in the optimizer (more about this on the blog), introduces the standard JSON interface, adds interface contracts and implements some additional safety checks.\n\nThe standard JSON interface provides a unified way to invoke the Solidity compiler in order to ease cross-platform adoption and compilation verification.\n\nFeatures:\n\nImplement the Standard JSON Input / Output API\nSupport interface contracts.\nC API (jsonCompiler): Add the compileStandard() method to process a Standard JSON I/O.\nCommandline interface: Add the standard-json parameter to process a Standard JSON...","url":"/blog/2017/05/03/solidity-0.4.11-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.10 Release Announcement","date":"2017-03-15","author":"Solidity Team","category":"Releases"},"content":"\nThis release is focused on stability and also introduces some new smart contract safety features: require, assert and transfer. Note that the new revert function will only be gas-efficient starting from homestead.\n\nFeatures:\n\nAdd assert(condition), which throws if condition is false (meant for internal errors).\nAdd require(condition), which throws if condition is false (meant for invalid input).\nCommandline interface: Do not overwrite files unless forced.\nIntroduce .transfer(value) for sending Ether.\nCode generator: Support revert() to abort with rolling back, but not consuming all gas.\nInline assembly: Support...","url":"/blog/2017/03/15/solidity-0.4.10-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.9 Release Announcement","date":"2017-01-31","author":"Solidity Team","category":"Releases"},"content":"\nThis release fixes quite some bugs and also adds several new features.\n\nThings to look out for:\n\nTo disambiguate contracts and libraries of the same name in different files, everything is now prefixed by \"filename:\". This applies to the compiler output, the linker input and other things.\nInternal exceptions are now thrown by using an invalid opcode (0xfe), manual exceptions still use an invalid jump.\n\nFeatures:\n\nCompiler interface: Contracts and libraries can be referenced with a file: prefix to make them unique.\nCompiler interface: Report source...","url":"/blog/2017/01/31/solidity-0.4.9-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.8 Release Announcement","date":"2017-01-13","author":"Solidity Team","category":"Releases"},"content":"\nFeatures:\n\nOptimiser: Performance improvements.\nOutput: Print assembly in new standardized Solidity assembly format.\n\nBugfixes:\n\nRemappings: Prefer longer context over longer prefix.\nType checker, code generator: enable access to events of base contracts' names.\nImports: import \".dir/a\" is not a relative path. Relative paths begin with directory . or ...\nType checker: disallow inheritances of different kinds (e.g. a function and a modifier) of members of the same name\n\nA big thank you to all contributors who helped make this release possible!\n\nDownload the new version of Solidity here.\n","url":"/blog/2017/01/13/solidity-0.4.8-release-announcement"}],"page":13,"totalPages":16},"__N_SSG":true}