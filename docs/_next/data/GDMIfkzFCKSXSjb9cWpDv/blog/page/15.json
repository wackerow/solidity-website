{"pageProps":{"allPostsData":[{"frontmatter":{"layout":"post","published":true,"title":"Dev Update: Formal Methods","date":"2016-09-01","author":"Christian Reitwiessner","category":"Announcements"},"content":"\nThis post was originally published on the Ethereum blog.\n\nToday, I am delighted to announce that Yoichi Hirai (@pirapira on github) is joining the Ethereum project as a formal verification engineer. He holds a PhD from the University of Tokyo on the topic of formalizing communicating parallel processes and created formal verification tools for Ethereum in his spare time.\n\nIn his own words:\nIâ€™m joining Ethereum as a formal verification engineer. My reasoning: formal verification makes sense as a profession only in a...","url":"/blog/2016/09/01/formal-methods-roadmap"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.3.6 Release Announcement","date":"2016-08-10","author":"Solidity Team","category":"Releases"},"content":"\nThis is the first release from the new \"solidity-standalone\" repository. It does not have dependencies to cpp-ethereum anymore and can be built just from the solidity github repository.\n\nNote that the optimizer was disabled in some situations which could lead to larger (but correcter) code.\n\nFeatures:\n\nFormal verification: Take external effects on a contract into account.\nType Checker: Warning about unused return value of low-level calls and send.\nOutput: Source location and node id as part of AST output\nOutput: Source location mappings for bytecode\nOutput: Formal...","url":"/blog/2016/08/10/solidity-0.3.6-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.3.5 Release Announcement","date":"2016-06-10","author":"Solidity Team","category":"Releases"},"content":"\nFeatures:\n\nContext-dependent path remappings (different modules can use the same library in different versions)\n\nBugfixes:\n\nType Checking: Dynamic return types were removed when fetching data from external calls, now they are replaced by an \"unusable\" type.\nType Checking: Overrides by constructors were considered making a function non-abstract.\n\nA big thank you to all contributors who helped make this release possible!\n\nDownload the new version of Solidity here.\n","url":"/blog/2016/06/10/solidity-0.3.5-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Smart Contract Security","date":"2016-06-10","author":"Christian Reitwiessner","category":"Security Alerts"},"content":"\nThis post was originally published on the Ethereum blog.\n\nSolidity was started in October 2014 when neither the Ethereum network nor the virtual machine had any real-world testing, the gas costs at that time were even drastically different from what they are now. Furthermore, some of the early design decisions were taken over from Serpent. During the last couple of months, examples and patterns that were initially considered best-practice were exposed to reality and some of them actually turned out to...","url":"/blog/2016/06/10/smart-contract-security"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.3.4 Release Announcement","date":"2016-05-31","author":"Solidity Team","category":"Releases"},"content":"\nThis release contains no changes outside of the documentation.\n\nA big thank you to all contributors who helped make this release possible!\n\nDownload the new version of Solidity here.\n","url":"/blog/2016/05/31/solidity-0.3.4-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.3.3 Release Announcement","date":"2016-05-27","author":"Solidity Team","category":"Releases"},"content":"\nThis release mainly makes libraries more flexible in that it allows internal functions to be called.\n\nFeatures\n\nAllow internal library functions to be called (by \"inlining\")\nFractional/rational constants (only usable with fixed point types, which are still in progress)\nInline assembly has access to internal functions (as jump labels)\nRunning solc without arguments on a terminal will print help.\n\nFixes\n\nCode Generation: Remove some non-determinism in code generation.\nCode Generation: Corrected usage of not / bnot / iszero in inline assembly\nCode Generation: Correctly clean bytesNN types before comparison\n\nA...","url":"/blog/2016/05/27/solidity-0.3.3-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.3.2 Release Announcement","date":"2016-04-18","author":"Solidity Team","category":"Releases"},"content":"\nThis is mainly a bugfix release. Under the hood, we are in the process of separating the Solidity source code from the rest of the cpp-ethereum source code so that it can soon be built (and released) in isolation.\n\nFixes:\n\nCode generation: Dynamic arrays of structs were not deleted correctly.\nCode generation: Static arrays in constructor parameter list were not decoded correctly.\nParser: Inline assembly parser: byte opcode was unusable\nError reporting: tokens for variably-sized types were not converted to string properly\n\nA big thank you...","url":"/blog/2016/04/18/solidity-0.3.2-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.3.1 Release Announcement","date":"2016-03-31","author":"Solidity Team","category":"Releases"},"content":"\nThis release mainly introduces inline assembly (documentation). Inline assembly provides a way to write low-level but still well readable code. Together with the coming features of inline library functions and templates, it allows to move much of the development that had to be done in the compiler itself into libraries written in Solidity. In the future, it will be possible to introduce new versatile types that still look like builtins.\n\nFeatures:\n\ninline assembly\n\nFixes:\n\nCode generation: array access with narrow types did not clean...","url":"/blog/2016/03/31/solidity-0.3.1-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.3.0 Release Announcement","date":"2016-03-11","author":"Solidity Team","category":"Releases"},"content":"\nThis version is synchronized to the Homestead changes on the main Ethereum network and introduces various breaking changes.\n\nBREAKING CHANGES:\n\nYou should not rely on division for literals resulting in a (truncated) integer. This is still the case but will change once we implement fixed point types, i.e. in the future 1/2 == 0.5 will be true, currently we have 1/2 == 0. Note that this only applies to literals ((2 + 7) / 2) and not variables (x / 2).\nLibrary calls...","url":"/blog/2016/03/11/solidity-0.3.0-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.2.2 Release Announcement","date":"2016-02-17","author":"Solidity Team","category":"Releases"},"content":"\nFeatures:\n\nIndex access for types bytes1, ..., bytes32 (only read access for now).\n\nBugfixes:\n\nType checker crash for wrong number of base constructor parameters.\n\nA big thank you to all contributors who helped make this release possible!\n\nDownload the new version of Solidity here.\n","url":"/blog/2016/02/17/solidity-0.2.2-release-announcement"}],"page":15,"totalPages":16},"__N_SSG":true}