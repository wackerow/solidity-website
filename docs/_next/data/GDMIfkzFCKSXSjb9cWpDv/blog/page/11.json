{"pageProps":{"allPostsData":[{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.26 Release Announcement","date":"2019-04-29","author":"Solidity Team","category":"Releases"},"content":"\nThis is a bugfix release for the 0.4.x series that contains backported fixes for important bugs that affected code generation. It also contains a fix that makes the emscripten target compatible with newer browser versions.\n\nImportant Bugfixes:\n\nCode Generator: Fix initialization routine of uninitialized internal function pointers in constructor context.\nType System: Use correct type name for contracts in event parameters when used in libraries. This affected code generation.\n\nBugfixes:\n\nABIEncoderV2: Refuse to generate code that is known to be potentially buggy.\nGeneral: Split rule list...","url":"/blog/2019/04/29/solidity-0.4.26-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity Optimizer and ABIEncoderV2 Bugs","date":"2019-03-26","author":"Solidity and Security Team","category":"Security Alerts"},"content":"\nThis post was originally published on the Ethereum blog.\n\nThrough the Ethereum bug bounty program, we received a report about a flaw within the new experimental ABI encoder (referred to as ABIEncoderV2). Upon investigation, it was found that the component suffers from a few different variations of the same type. The first part of this announcement explains this bug in detail. The new ABI encoder is still marked as experimental, but we nevertheless think that this deserves a prominent announcement since...","url":"/blog/2019/03/26/solidity-optimizer-and-abiencoderv2-bug"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.5.7 Release Announcement","date":"2019-03-26","author":"Solidity Team","category":"Releases"},"content":"\nThis release mainly fixes bugs in the optimizer and in the experimental ABI encoder. For details about the bug, please see the official announcement.\n\nFurthermore, this release also allows you to use Yul as a language option (instead of \"Solidity\") in the standard-json-interface.\n\nImportant Bugfixes:\n\nABIEncoderV2: Fix bugs related to loading short value types from storage when encoding an array or struct from storage.\nABIEncoderV2: Fix buffer overflow problem when encoding packed array from storage.\nOptimizer: Fix wrong ordering of arguments in byte optimization rule...","url":"/blog/2019/03/26/solidity-0.5.7-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.5.6 Release Announcement","date":"2019-03-13","author":"Solidity Team","category":"Releases"},"content":"\nThis release mainly fixes an optimizer bug related to multiple shift opcodes that was introduced in the previous release. It is unlikely that any existing contracts are affected, but you should still not use Solidity 0.5.5.\n\nApart from that, the support for calldata structs and arrays by ABIEncoderV2 is almost finished now, we added some more optimizer rules and added enums and one-dimensional arrays to the SMT checker.\n\nImportant Bugfixes:\n\nYul Optimizer: Fix visitation order bug for the structural simplifier.\nOptimizer: Fix overflow in...","url":"/blog/2019/03/13/solidity-0.5.6-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.5.5 Release Announcement","date":"2019-03-05","author":"Solidity Team","category":"Releases"},"content":"\nThis release focuses on the stabilization of the ABIEncoderV2 and the optimizer. We also prepared for the Petersburg release which is the default EVM now and improved the SMT checker, such that it now reports less false positives when using SafeMath.\nYou can now activate the experimental Yul optimizer using settings: {optimizer: {enabled: true, details: {yul: true}}} or in the commandline via solc optimize-yul.\n\nLanguage Features:\n\nAdd support for getters of mappings with string or bytes key types.\nMeta programming: Provide access to the...","url":"/blog/2019/03/05/solidity-0.5.5-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.5.4 Release Announcement","date":"2019-02-12","author":"Solidity Team","category":"Releases"},"content":"\nThis release adds support for calldata structs and packed encoding with ABIEncoderV2. We also introduced some changes to the C API and added support for continuous fuzzing via Google oss-fuzz. In addition to that, we added a new commandline option for improved (colorized) diagnostics formatting.\n\nLanguage Features:\n\nAllow calldata structs without dynamically encoded members with ABIEncoderV2.\n\nCompiler Features:\n\nABIEncoderV2: Implement packed encoding.\nC API (libsolc / raw soljson.js): Introduce solidity_free method which releases all internal buffers to save memory.\nCommandline Interface: Adds new option new-reporter for...","url":"/blog/2019/02/12/solidity-0.5.4-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.5.3 Release Announcement","date":"2019-01-22","author":"Solidity Team","category":"Releases"},"content":"\nThis release adds support for accessing the code of a contract type, which will hopefully make the new CREATE2 opcode easier to use. We also added some static analysis features to the compiler, but most changes were done \"under the hood\" to pave the way for using the new Yul-based optimizer with ABIEncoderV2.\n\nLanguage Features:\n\nProvide access to creation and runtime code of contracts via type(C).creationCode / type(C).runtimeCode.\n\nCompiler Features:\n\nControl Flow Graph: Warn about unreachable code.\nSMTChecker: Support basic typecasts without truncation.\nSMTChecker: Support external...","url":"/blog/2019/01/22/solidity-0.5.3-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.5.2 Release Announcement","date":"2018-12-19","author":"Solidity Team","category":"Releases"},"content":"\nThis release of the Solidity compiler includes several performance optimizations. These include faster compilation time but also cheaper contracts in some situations. This version also checks for all instances of uninitialized storage references, has some improved error messages and other checks.\n\nYou can now create complete contracts in Yul through the support of the Yul object format and the special functions datasize, dataoffset and datacopy.\n\nA big thank you to all contributors who helped make this release possible!\n\nDownload the new version of...","url":"/blog/2018/12/19/solidity-0.5.2-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.5.1 Release Announcement","date":"2018-12-03","author":"Solidity Team","category":"Releases"},"content":"\nThis release improves the usability of interfaces, fixes some bugs, extends the SMT checker and provides an early preview of the Yul optimizer.\n\nA big thank you to all contributors who helped make this release possible!\n\nDownload the new version of Solidity here.\n","url":"/blog/2018/12/03/solidity-0.5.1-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.5.0 Release Announcement","date":"2018-11-13","author":"Solidity Team","category":"Releases"},"content":"\nThis is a major breaking release of the Solidity language and compiler that includes many new safety features. In general, programmers have to be more explicit, some weird edge-cases are removed from the language and the low-level compiler interface is much simpler.\n\nThis release was long overdue and as a result has amassed an incredibly long list of changes. Please refer to the \"Solidity v0.5.0 Breaking Changes‚Äù section in the documentation about a good description of what has changed and how...","url":"/blog/2018/11/13/solidity-0.5.0-release-announcement"}],"page":11,"totalPages":16},"__N_SSG":true}