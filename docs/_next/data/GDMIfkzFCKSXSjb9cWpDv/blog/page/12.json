{"pageProps":{"allPostsData":[{"frontmatter":{"layout":"post","published":true,"title":"Solidity Bugfix Release","date":"2018-09-13","author":"Solidity Team","category":"Security Alerts"},"content":"\nThis post was originally published on the Ethereum blog.\n\nThe latest version 0.4.25 release of Solidity fixes\ntwo important bugs.\nAnother important bug has already been fixed in version 0.4.22 but it was only discovered recently that the bug existed.\n\nNote that the Ethereum Foundation runs a bounty program for the code generator part of Solidity.\n\nCleanup of Exponent in Exponentiation\n\nLikelihood of occurrence: very low\nExploitability: high\nDiscoverability by tests: low\nFixed in version: 0.4.25\n\nSummary: Using short types in the exponent of an exponentiation operation can lead to...","url":"/blog/2018/09/13/solidity-bugfix-release"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.25 Release Announcement","date":"2018-09-13","author":"Solidity Team","category":"Releases"},"content":"\nThis release fixed a cleanup error concerning the exponentiation operator. It is a bugfix-only release\nand does not contain any features. A more detailed description of the bugs fixed can be found\non the ethereum blog.\n\nNote that nightly builds of Solidity currently contain changes unrelated to this bugfix release.\n\nA big thank you to all contributors who helped make this release possible!\n\nDownload the new version of Solidity here.\n","url":"/blog/2018/09/13/solidity-0.4.25-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.24 Release Announcement","date":"2018-05-16","author":"Solidity Team","category":"Releases"},"content":"\nAll remaining breaking changes planned for version 0.5.0 that can be implemented in a backwards-compatible way made it into this release. Solidity can now detect uninitialized storage pointers using control-flow analysis. It is again possible to assign multiple return values from a function to newly declared variables and the SMT checker is able to work with simple storage variables.\n\nA big thank you to all contributors who helped make this release possible!\n\nDownload the new version of Solidity here.\n","url":"/blog/2018/05/16/solidity-0.4.24-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.23 Release Announcement","date":"2018-04-19","author":"Solidity Team","category":"Releases"},"content":"\nBugfix release: In the previous release, it was possible to define two constructors (one using the new constructor-keyword syntax, another one with the old syntax) for a contract, but only one of them got used in the end. We also included other bugfixes.\n\nA big thank you to all contributors who helped make this release possible!\n\nDownload the new version of Solidity here.\n","url":"/blog/2018/04/19/solidity-0.4.23-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.22 Release Announcement","date":"2018-04-17","author":"Solidity Team","category":"Releases"},"content":"\nThis release features several major and long-awaited changes:\n\nIt is now possible to access dynamic data (arrays, strings, etc) returned by function calls.\nYou can specify error reason strings for revert and require (support by tooling is still pending).\nWe added the global functions abi.encode(), abi.encodePacked(), abi.encodeWithSelector() and abi.encodeWithSignature() which expose the ABI encoding functions and each return a bytes value.\nConstructors should now be defined using constructor(uint arg1, uint arg2) { ... } to make them stand out and avoid bugs when contracts...","url":"/blog/2018/04/17/solidity-0.4.22-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.21 Release Announcement","date":"2018-03-08","author":"Solidity Team","category":"Releases"},"content":"\nWe again introduced several changes that are scheduled for version 0.5.0 and can be activated using pragma experimental \"v0.5.0\";. In this release, this pragma does not generate a warning anymore, so you can (and should) use it in production code.\n\nIn addition to that, you can now specify which EVM version the contract should be compiled for. Valid values are \"homestead\", \"tangerineWhistle\", \"spuriousDragon\", \"byzantium\" (the default) and \"constantinople\". Depending on this setting, different opcodes will be used in some cases. The...","url":"/blog/2018/03/08/solidity-0.4.21-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.20 Release Announcement","date":"2018-02-14","author":"Solidity Team","category":"Releases"},"content":"\nThis release includes some usability and security improvements and a further evolution of the SMT component. The var keyword has been deprecated for security reasons.\n\nSignificant steps were made in writing optimisation stages for the intermediate language, which will be used by the new ABI encoder to produce highly optimised output. The main goal is to have a resulting bytecode size similar to the old ABI encoder, while having more runtime checks for a stricter decoding process. This is not yet...","url":"/blog/2018/02/14/solidity-0.4.20-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.19 Release Announcement","date":"2017-11-30","author":"Solidity Team","category":"Releases"},"content":"\nIn the last weeks, we have mainly been working on big internal changes. One of them is the new ABI decoder, which is still in experimental mode, but will hopefully be production-usable soon. External contributions like allowing constant variables for array lengths and improved error messages should make your life as a programmer easier. Finally, the standard-json-io-system now allows to select certain artifacts from a contract which should speed up your code-compile-test-cycle even more!\n\nFeatures:\n\nCode Generator: New ABI decoder which supports...","url":"/blog/2017/11/30/solidity-0.4.19-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.18 Release Announcement","date":"2017-10-18","author":"Solidity Team","category":"Releases"},"content":"\nThis release adds further backwards-incompatible security measures enabled via pragma experimental \"v0.5.0\"; and contains another important feature: You can now select to compile only certain contracts using the outputSelection field of the standard-json-io compiler interface, which should speed up tools like truffle tremendously.\n\nThere are also two important bug fixes: One was an oversight in the way bytes variables are allocated in memory and can reduce the memory requirements 32-fold. The second is a security fix: In extremely specific circumstances, it...","url":"/blog/2017/10/18/solidity-0.4.18-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.17 Release Announcement","date":"2017-09-21","author":"Solidity Team","category":"Releases"},"content":"\nAs we are getting closer to the next breaking release, we want to give everyone a heads up by introducing pragma experimental \"v0.5.0\" which already enables some of the new safety features of the 0.5.0 release.\n\nFurthermore, this release finally checks the modifiers view (used to be named constant) and pure on functions. As a rule of thumb, use view if your function does not modify storage and pure if it does not even read any state information - but the...","url":"/blog/2017/09/21/solidity-0.4.17-release-announcement"}],"page":12,"totalPages":16},"__N_SSG":true}