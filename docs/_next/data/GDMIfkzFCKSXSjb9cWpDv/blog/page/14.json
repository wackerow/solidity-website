{"pageProps":{"allPostsData":[{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.7 Release Announcement","date":"2016-12-15","author":"Solidity Team","category":"Releases"},"content":"\nFeatures:\n\nBitshift operators.\nType checker: Warn when msg.value is used in non-payable function.\nCode generator: Inject the Swarm hash of a metadata file into the bytecode.\nCode generator: Replace expensive memcpy precompile by simple assembly loop.\nOptimizer: Some dead code elimination.\n\nBugfixes:\n\nCode generator: throw if calling the identity precompile failed during memory (array) copying.\nType checker: string literals that are not valid UTF-8 cannot be converted to string type\nCode generator: any non-zero value given as a boolean argument is now converted into 1.\nAST Json Converter: replace VariableDefinitionStatement...","url":"/blog/2016/12/15/solidity-0.4.7-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.6 Release Announcement","date":"2016-11-22","author":"Solidity Team","category":"Releases"},"content":"\nBugfixes:\n\nOptimizer: Knowledge about state was not correctly cleared for JUMPDESTs\n\nSwarm hash of js compiler: bzzr:/b873fa122233c91b1531527c390f6ca49df4d2a2c5f75706f4b612a0c813cb6a\n\nA big thank you to all contributors who helped make this release possible!\n\nDownload the new version of Solidity here.\n","url":"/blog/2016/11/22/solidity-0.4.6-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.5 Release Announcement","date":"2016-11-21","author":"Solidity Team","category":"Releases"},"content":"\nThis Solidity release adds function types. Use-cases include supplying callbacks for asynchronous or off-chain operations or generic library features (for example map-reduce-style programming). This release also improves the safety of enums and sending Ether to a contract constructor.\n\nFeatures:\n\nFunction types\nDo-while loops: support for a do  while (); control structure\nInline assembly: support invalidJumpLabel as a jump label.\nType checker: now more eagerly searches for a common type of an inline array with mixed types\nCode generator: generates a runtime error when an out-of-range...","url":"/blog/2016/11/21/solidity-0.4.5-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Analysis of Storage Corruption Bug","date":"2016-11-09","author":"Christian Reitwiessner","category":"Security Alerts"},"content":"\nThis post was originally published on the Ethereum blog.\n\nThis blog post provides an update on our findings following the discovery of the storage corruption bug last week.\nIn summary, the bug was much less severe than we initially thought. The small number of affected contracts we found is either only exploitable by the owner, or the exploit can only cause a disruption in the user interface and not in the actual contract logic. All exploitable contracts/dapps we reviewed can be fixed...","url":"/blog/2016/11/09/analysis-storage-corruption-bug"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.4 Release Announcement","date":"2016-11-01","author":"Solidity Team","category":"Releases"},"content":"\nThis is a bugfix release that fixes a storage corruption that appears when multiple variables are stored in the same slot (details).\n\nBugfixes:\n\nType checker: forbid signed exponential that led to an incorrect use of EXP opcode.\nCode generator: properly clean higher order bytes before storing in storage.\n\nA big thank you to all contributors who helped make this release possible!\n\nDownload the new version of Solidity here.\n","url":"/blog/2016/11/01/solidity-0.4.4-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Security Alert: Variables can be overwritten in storage","date":"2016-11-01","author":"Christian Reitwiessner","category":"Security Alerts"},"content":"\nThis post was originally published on the Ethereum blog.\n\nSummary: In some situations, variables can overwrite other variables in storage.\n\n*Affected Solidity compiler versions: *0.1.6 to 0.4.3 (including 0.4.4 pre-release versions)\n\nDetailed description:\n\nStorage variables that are smaller than 256 bits are packed together into the same 256 bit slot if they can fit. If a value larger than what is allowed by the type is assigned to the first variable, that value will overwrite the second variable.\n\nThis means if an attacker can cause...","url":"/blog/2016/11/01/security-alert-solidity-variables-can-overwritten-storage"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.3 Release Announcement","date":"2016-10-25","author":"Solidity Team","category":"Releases"},"content":"\nThis is a real bugfix release as you can see from the changelog below. The most important fix concerns the optimizer which generated invalid code connected to the SHA3 opcode in certain situations.\n\nFeatures:\n\nInline assembly: support both suicide and selfdestruct opcodes\n  (note: suicide is deprecated).\nInline assembly: issue warning if stack is not balanced after block.\nInclude keccak256() as an alias to sha3().\nSupport shifting constant numbers.\n\nBugfixes:\n\nCommandline interface: Disallow unknown options in solc.\nName resolver: Allow inheritance of enum definitions.\nType checker: Proper type checking...","url":"/blog/2016/10/25/solidity-0.4.3-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.2 Release Announcement","date":"2016-09-17","author":"Solidity Team","category":"Releases"},"content":"\nBugfixes:\n\nCode Generator: Fix library functions being called from payable functions.\nType Checker: Fixed a crash about invalid array types.\nCode Generator: Fixed a call gas bug that became visible after\n  version 0.4.0 for calls where the output is larger than the input.\n\nA big thank you to all contributors who helped make this release possible!\n\nDownload the new version of Solidity here.\n","url":"/blog/2016/09/17/solidity-0.4.2-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.1 Release Announcement","date":"2016-09-09","author":"Solidity Team","category":"Releases"},"content":"\nThis is a bugfix release that fixes an error when compiling libraries with the latest version 0.4.0.\n\nA big thank you to all contributors who helped make this release possible!\n\nDownload the new version of Solidity here.\n","url":"/blog/2016/09/09/solidity-0.4.1-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.4.0 Release Announcement","date":"2016-09-08","author":"Solidity Team","category":"Releases"},"content":"\nNote: Version 0.4.0 is unable to compile libraries. Please upgrade to 0.4.1.\n\nThis release deliberately breaks backwards compatibility mostly to enforce some safety features. The most important change is that you have to explicitly specify if functions can receive ether via the payable modifier. Furthermore, more situations cause exceptions to be thrown.\n\nMinimal changes to be made for upgrade:\n\nAdd payable to all functions that want to receive Ether (including the constructor and the fallback function).\nChange ` to ;` in modifiers.\nAdd version pragma...","url":"/blog/2016/09/08/solidity-0.4.0-release-announcement"}],"page":14,"totalPages":16},"__N_SSG":true}