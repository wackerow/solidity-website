{"pageProps":{"allPostsData":[{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.8.3 Release Announcement","date":"2021-03-23","author":"Solidity Team","category":"Releases"},"content":"\nSolidity v0.8.3 fixes the Solidity Optimizer Keccak Caching Bug, which is present in all prior versions of Solidity, and, in addition, includes two improvements to the optimizer which can provide a big gas benefit when writing structs that cover a full storage slot to storage.\n\nImportant Bugfixes\n\nSolidity Optimizer Keccak Caching Bug\n\nOn March 20, 2021, a bug in Solidity‚Äôs bytecode optimizer was found by differential fuzzing. The bug is fixed with this version. The bug is present in all prior versions of...","url":"/blog/2021/03/23/solidity-0.8.3-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity Optimizer Keccak Caching Bug","date":"2021-03-23","author":"Solidity Team","category":"Security Alerts"},"content":"\nOn March 20, 2021, a bug in Solidity's bytecode optimizer was found by differential fuzzing. The bug\nis fixed with version 0.8.3 released on\nMarch 23, 2021. The bug is present in all prior versions of Solidity.\n\nWe assigned the bug a severity level of \"medium\".\n\nTechnical Details\n\nSummary: The bytecode optimizer incorrectly re-used previously evaluated Keccak-256 hashes. You\nare unlikely to be affected if you do not compute Keccak-256 hashes in inline assembly.\n\nSolidity's bytecode optimizer has a step that can compute Keccak-256 hashes, if the...","url":"/blog/2021/03/23/keccak-optimizer-bug"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.8.2 Release Announcement","date":"2021-03-02","author":"Solidity Team","category":"Releases"},"content":"\nSolidity v0.8.2 adds an optimizer stage that can inline small amounts of code to save gas and\nprovides more means to work with code documentation by exporting inline comments\nand allowing custom natspec tags.\n\nNotable New Features\n\nInliner\n\nThis release adds a simple inliner to the low-level optimizer of Solidity.\nIt can inline short functions that do not contain control-flow branches or\nopcodes with side-effects. If you want to learn more about the inliner, read this post.\n\nCustom Natspec and Exported Documentation\n\nIt is now possible to use documentation...","url":"/blog/2021/03/02/solidity-0.8.2-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Saving Gas with Simple Inlining","date":"2021-03-02","author":"Christian Reitwiessner","category":"Explainers"},"content":"\nSolidity v0.8.2 adds a simple inliner to the low-level optimizer of Solidity. In this post, we examine how it works and take a look at synergies with other steps of the optimizer.\n\nLow-Level Inliner\n\nThe Low-Level Inliner is a component of the low-level optimizer of the Solidity compiler.\nTo save gas, it can inline short functions that do not contain control-flow branches or\nopcodes with side-effects.\n\nThe decision to inline or not is based on the trade-off parameter \"runs\":\nThe combined code deposit cost and execution...","url":"/blog/2021/03/02/saving-gas-with-simple-inliner"},{"frontmatter":{"layout":"post","published":true,"title":"Contributing to Solidity 101","date":"2021-02-15","author":"Franziska Heintel","category":"Explainers"},"content":"\nThe Solidity programming language is an open-source project governed by a core team. We rely on the community‚Äôs feedback, input and contributions to make the language as effective, safe and useful as possible.\n\nIn this post, we will walk you through the various different ways how you can get involved contributing to Solidity! Do not hesitate to contact us in case anything is left unclear after reading the post.\n\nOverview of Contribution Opportunities\n\nThere are plenty of options how you can contribute to...","url":"/blog/2021/02/15/contributing-to-solidity-101"},{"frontmatter":{"layout":"post","published":true,"title":"An Introduction to Solidity's Fuzz Testing Approach","date":"2021-02-10","author":"Bhargava Shastry","category":"Explainers"},"content":"\nSecurity vulnerabilities and bugs detract from software quality.\nTo discover them early, at best before they are released, we have adopted fuzz testing: feeding randomly generated programs to the Solidity compiler and observing the compilation runtime and code generated.\n\nSince Q1 2019, the Solidity compiler is fuzz tested via Google's open-source software fuzz (oss-fuzz) framework.\n\nIn this post, we briefly describe the work that has been done on this front, and work that is currently in progress.\n\nFuzzer Overview\n\nBroadly speaking, we have developed two...","url":"/blog/2021/02/10/an-introduction-to-soliditys-fuzz-testing-approach"},{"frontmatter":{"layout":"post","published":true,"title":"Launching the Solidity Forum üóÉÔ∏è","date":"2021-02-01","author":"Franziska Heintel","category":"Announcements"},"content":"\nIn our effort to foster exchange of information, encourage more developers to give feedback about Solidity and join the discussions on language design and future direction of the compiler, we are happy to launch the Solidity forum today!\n\nMoving forward the Solidity forum will be the dedicated place to discuss topics and questions related to‚Ä¶\n\nThe design of the Solidity programming language.\nThe Solidity compiler.\nUseful Solidity tips and code snippets.\nSolidity documentation and its translation.\nDiscussions and announcements about Solidity releases.\n\nIt will not be the...","url":"/blog/2021/02/01/launching-the-solidity-forum"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.8.1 Release Announcement","date":"2021-01-27","author":"Solidity Team","category":"Releases"},"content":"\nSolidity v0.8.1 introduces\nmany new features for the SMTChecker (see below), updates the\nemscripten version for building soljson.js to 2.0.12,\nallows to catch panic errors and adds other small improvements.\n\nNotable New Features\n\nSMTChecker Counterexamples and Synthesis of External Functions\n\nThe SMTChecker already reports transaction traces as counterexamples to failing verification\ntargets, but 0.8.1 adds internal calls, msg.value and synthesized unknown code called\nexternally in the form of reentrant calls to counterexamples.\nA recent blog post\npresents that topic in more detail.\n\nHow to select SMTChecker targets\n\nPrior to 0.8.1, the SMTChecker...","url":"/blog/2021/01/27/solidity-0.8.1-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity Developer Survey 2020 Results","date":"2021-01-26","author":"Franziska Heintel","category":"Announcements"},"content":"\nBefore we dive into the results we want to extend a big thank you to all of the Solidity developers that participated in the very first Solidity Developer Survey, which we conducted at the end of last year!\n\nWe were overwhelmed by the high quality of the submissions and are happy to extract important insights from your input.\n\nIn this post, we'll be summarizing and commenting on the results of the survey.\n\nPlease note that none of the questions in the survey were...","url":"/blog/2021/01/26/solidity-developer-survey-2020-results"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.8.0 Release Announcement","date":"2020-12-16","author":"Solidity Team","category":"Releases"},"content":"\nSolidity 0.8.0 is a breaking release of the Solidity compiler and language.\n\nSome of the new features of this release have been elaborated in the 0.8.x preview release post. Please consider the preview release binary superseded and do not use it anymore.\n\nNotable New Features and Changes\n\nAs per ususal, this breaking release does not include many features but rather changes that require a\nbackwards-incompatible adjustment in syntax or semantics. For a detailed explanation,\nplease see the documentation.\n\nThe change that will affect most users is...","url":"/blog/2020/12/16/solidity-v0.8.0-release-announcement"}],"page":5,"totalPages":16},"__N_SSG":true}