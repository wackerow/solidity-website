{"pageProps":{"allPostsData":[{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.6.0 Release Announcement","date":"2019-12-17","author":"Solidity Team","category":"Releases"},"content":"\nThis is a major breaking release of the Solidity compiler and language. Changes include explicit virtual and override keywords in inheritance, support for try/catch, splitting the fallback function into a receive Ether function and an actual fallback function and limitations on how the length of an array can be changed, among others. For a detailed explanation, please see the documentation or refer to the list below that shows every single change.\n\nFrom this release on, ABIEncoderV2 is not considered experimental any...","url":"/blog/2019/12/17/solidity-0.6.0-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.5.15 Release Announcement","date":"2019-12-17","author":"Solidity Team","category":"Releases"},"content":"\nThis release fixes a bug that was introduced in 0.5.14 (the previous release). You are only affected if you manually enabled the Yul optimizer (not the regular optimizer) and either used Yul stand-alone or via ABIEncoderV2. For more details, please see buglist.json.\n\nBugfixes:\n\nYul Optimizer: Fix incorrect redundant load optimization crossing user-defined functions that contain for-loops with memory / storage writes.\n\nA big thank you to all contributors who helped make this release possible!\n\nDownload the new version of Solidity here.\n","url":"/blog/2019/12/17/solidity-0.5.15-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.5.14 Release Announcement","date":"2019-12-09","author":"Solidity Team","category":"Releases"},"content":"\nSolidity 0.5.14 sets the default EVM version to \"Istanbul\" and is targeted as the last release in the 0.5.x series.\n\nThe SMT checker supports constructors now and it is possible to directly translate EVM-flavoured Yul to Ewasm from the commandline interface.\n\nLanguage Features:\n\nAllow to obtain the selector of public or external library functions via a member .selector.\nParser: Allow splitting string and hexadecimal string literals into multiple parts.\nInline Assembly: Support constants that reference other constants.\n\nCompiler Features:\n\nCommandline Interface: Allow translation from yul / strict...","url":"/blog/2019/12/09/solidity-0.5.14-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.5.13 Release Announcement","date":"2019-11-14","author":"Solidity Team","category":"Releases"},"content":"\nSolidity 0.5.13 provides Istanbul-EVM compatibility (default is still set to Petersburg), is the first version to generate Ethereum-Webassembly (EWasm) binary output (not fully working yet, though), improves the developer experience by listing potential overloads when resolution fails and can output the layout of the storage variables of a contract. As with all other releases, the coverage of the SMT checker is further improved.\n\nLanguage Features:\n\nAllow to obtain the address of a linked library with address(LibraryName).\n\nCompiler Features:\n\nCode Generator: Use SELFBALANCE opcode for...","url":"/blog/2019/11/14/solidity-0.5.13-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.5.12 Release Announcement","date":"2019-10-01","author":"Solidity Team","category":"Releases"},"content":"\nThis is a small bugfix release that also includes loop support for the SMT solver and some improvements to the Yul optimizer. The reason for the smaller feature set is that we are mainly working on the upcoming 0.6.0 release.\n\nLanguage Features:\n\nType Checker: Allow assignment to external function arguments except for reference types.\n\nCompiler Features:\n\nABI Output: Change sorting order of functions from selector to kind, name.\nOptimizer: Add rule that replaces the BYTE opcode by 0 if the first argument is larger than...","url":"/blog/2019/10/01/solidity-0.5.12-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.5.11 Release Announcement","date":"2019-08-12","author":"Solidity Team","category":"Releases"},"content":"\nThis release fixes a bug related to calldata structs in ABIEncoderV2 and calldata decoding in V1. Several internal bugs of the SMT checker are fixed.\nFurthermore, internal types are added to the ABI output which allows you to see which struct type is behind an ABI tuple. Finally, Yul and web assembly support are progressing.\n\nWe also improved our testing framework which now allows for semantics tests to run in 4 seconds instead of 1 minute.\n\nLanguage Features:\n\nInline Assembly: Support direct constants of...","url":"/blog/2019/08/12/solidity-0.5.11-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity Storage Array Bugs","date":"2019-06-25","author":"Solidity and Security Team","category":"Security Alerts"},"content":"\nThis post was originally published on the Ethereum blog.\n\nThis blog post is about two bugs connected to storage arrays which are otherwise unrelated. Both have been present in the compiler for a long time and have only been discovered now even though a contract containing them should very likely show malfunctions in tests.\n\nDaenam Kim with help from Nguyen Pham, both from Curvegrid discovered an issue where invalid data is stored in connection with arrays of signed integers.\n\nThis bug has been...","url":"/blog/2019/06/25/solidity-storage-array-bugs"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.5.10 Release Announcement","date":"2019-06-25","author":"Solidity Team","category":"Releases"},"content":"\nApart from further invisible work on the Yul optimizer, the Solidity to Yul code generation, the eWasm backend and the SMT checker, this release contains two important bug fixes related to storage arrays.\n\nFor details see our earlier blog post.\n\nIt also contains an experimental mode that allows recovery from parser error (implemented by @rocky, funded by ConsenSys) in the hope that this might be useful for IDE developers.\n\nImportant Bugfixes:\n\nABIEncoderV2: Fix incorrect abi encoding of storage array of data type that occupy...","url":"/blog/2019/06/25/solidity-0.5.10-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.5.9 Release Announcement","date":"2019-05-28","author":"Solidity Team","category":"Releases"},"content":"\nAs in previous releases, we spent most of the time making Solidity future-proof by further working on the Yul optimizer, the Solidity to Yul (and eWasm) translator and the SMT Checker.\n\nCode generated from Solidity now always includes the version number in the CBOR metadata so that it becomes possible to quickly assess whether a contract might be affected by a compiler bug or not.\n\nLanguage Features:\n\nInline Assembly: Revert change introduced in 0.5.7: The callvalue() instruction does not require payable anymore.\nStatic Analyzer:...","url":"/blog/2019/05/28/solidity-0.5.9-release-announcement"},{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.5.8 Release Announcement","date":"2019-04-30","author":"Solidity Team","category":"Releases"},"content":"\nThis release fixes important but very unlikely bugs and further completes ABIEncoderV2, SMTChecker and Yul and improves the optimizer.\n\nNotably, if ABIEncoderV2 is activated, the ABI decoder will now revert on input with dirty higher order bits instead of ignoring those bits.\n\nImportant Bugfixes:\n\nCode Generator: Fix initialization routine of uninitialized internal function pointers in constructor context.\nType System: Use correct type name for contracts in event parameters when used in libraries. This affected code generation.\nYul Optimizer: Fix SSA transform for multi-assignments.\n\nLanguage Features:\n\nABIEncoderV2: Implement...","url":"/blog/2019/04/30/solidity-0.5.8-release-announcement"}],"page":10,"totalPages":16},"__N_SSG":true}