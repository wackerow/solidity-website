{"pageProps":{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.8.1 Release Announcement","date":"2021-01-27","author":"Solidity Team","category":"Releases"},"content":"\n[Solidity v0.8.1](https://github.com/ethereum/solidity/releases/tag/v0.8.1) introduces\nmany new features for the SMTChecker (see below), updates the\nemscripten version for building soljson.js to 2.0.12,\nallows to catch panic errors and adds other small improvements.\n\n## Notable New Features\n\n### SMTChecker Counterexamples and Synthesis of External Functions\n\nThe SMTChecker already reports transaction traces as counterexamples to failing verification\ntargets, but 0.8.1 adds internal calls, `msg.value` and synthesized unknown code called\nexternally in the form of reentrant calls to counterexamples.\nA [recent blog post](https://fv.ethereum.org/2021/01/18/smtchecker-and-synthesis-of-external-functions/)\npresents that topic in more detail.\n\n### How to select SMTChecker targets\n\nPrior to 0.8.1, the SMTChecker would automatically create verification targets for all types.\nNow the user can choose which verification targets should be checked via the CLI option\n`--model-checker-targets`, or the standard JSON setting `modelCheckerSettings.targets`.\nThe valid target strings are `underflow`, `overflow`, `divByZero`, `constantCondition`,\n`balance`, `popEmptyArray` and `assert`. Multiple targets can be chosen simultaneously\nseparated by a comma, without spaces: `underflow,overflow,assert`.\nFor a detailed description of the verification targets, please see the [SMTChecker docs](https://docs.soliditylang.org/en/v0.8.0/security-considerations.html#formal-verification).\n\n### Catch Panic\n\nThe `Panic(uint)` revert error was introduced with 0.8.0, but there was not yet a way\nto catch and decode such an error in a `try/catch` statement. This has been added\nnow:\n\n    try otherContract.f() { }\n    catch Panic(uint _code) {\n      if (_code == 0x01) { revert(\"Assertion failed\"); }\n      else if (_code == 0x11) { revert (\"Underflow/overflow\"); }\n      // We ignore the other errors.\n    }\n\nIf you neither have a `catch Panic(uint)` clause nor a catch clause without error type in your `try/catch` statement,\nthe revert will \"bubble up\", i.e. the calling contract will revert.\n\nRegardless of whether or not you catch the error, the effects of the call will always be reverted.\n\nNote that you cannot know whether the error happened in the called contract (`otherContract`)\nitself or in a contract called from `otherContract`.\n\n### Code Length Shortcut\n\nFrom v0.8.0 on, the size of the code at address `a` could be accessed by\nusing `a.code.length`. However, this involved copying the code to memory,\neven if you did not use `a.code`.\nIn this release, a shortcut was implemented that directly returns the\nvalue of `extcodesize(<address>)` and avoids copying code to memory.\n\n## Full Changelog\n\n### Language Features:\n\n- Possibility to use `catch Panic(uint code)` to catch a panic failure from an external call.\n\n### Compiler Features:\n\n- Code Generator: Reduce the cost of `<address>.code.length` by using `extcodesize` directly.\n- Command Line Interface: Allow `=` as separator between library name and address in `--libraries` commandline option.\n- Command Line Interface: New option `--model-checker-targets` allows specifying which targets should be checked. The valid options are `all`, `constantCondition`, `underflow`, `overflow`, `divByZero`, `balance`, `assert`, `popEmptyArray`, where the default is `all`. Multiple targets can be chosen at the same time, separated by a comma without spaces: `underflow,overflow,assert`.\n- Command Line Interface: Only accept library addresses with a prefix of `0x` in `--libraries` commandline option.\n- Optimizer: Add rule to replace `iszero(sub(x,y))` by `eq(x,y)`.\n- Parser: Report meaningful error if parsing a version pragma failed.\n- SMTChecker: Output internal and trusted external function calls in a counterexample's transaction trace.\n- SMTChecker: Show `msg.value` in counterexample transaction traces when greater than 0.\n- SMTChecker: Show contract name in counterexample function call.\n- SMTChecker: Support ABI functions as uninterpreted functions.\n- SMTChecker: Support try/catch statements.\n- SMTChecker: Synthesize untrusted functions called externally.\n- SMTChecker: Use checked arithmetic by default and support `unchecked` blocks.\n- Standard JSON: New option `modelCheckerSettings.targets` allows specifying which targets should be checked. The valid options are `all`, `constantCondition`, `underflow`, `overflow`, `divByZero`, `balance`, `assert`, `popEmptyArray`, where the default is `all`. Multiple targets can be chosen at the same time, separated by a comma without spaces: `underflow,overflow,assert`.\n\n### Bugfixes:\n\n- Code Generator: Fix length check when decoding malformed error data in catch clause.\n- Control Flow Graph: Fix missing error caused by read from/write to uninitialized variables.\n- SMTChecker: Fix false negatives in overriding modifiers and functions.\n- SMTChecker: Fix false negatives in the presence of inline assembly.\n- SMTChecker: Fix false negatives when analyzing external function calls.\n- SMTChecker: Fix internal error on `block.chainid`.\n- SMTChecker: Fix internal error on pushing string literal to `bytes` array.\n- SMTChecker: Fix missing type constraints for block variables.\n- Type Checker: Fix infinite loop when accessing circular constants from inline assembly.\n- Type Checker: Fix internal error caused by constant structs containing mappings.\n- Type System: Disallow implicit conversion from `uintN` to `intM` when `M > N`, and by extension, explicit conversion between the same types is also disallowed.\n\n### Build System:\n\n- Update the soljson.js build to emscripten 2.0.12 and boost 1.75.0.\n\nA big thank you to all contributors who helped make this release possible!\n\nDownload the new version of Solidity [here](https://github.com/ethereum/solidity/releases/tag/v0.8.1).\n","availableURLs":["/2023/05/10/solidity-0.8.20-release-announcement","/2023/03/10/solidity-developer-survey-2022-results","/2023/02/22/user-defined-operators","/2023/02/22/solidity-0.8.19-release-announcement","/2023/02/01/solidity-0.8.18-release-announcement","/2022/12/07/solidity-developer-survey-2022-announcement","/2022/12/05/solidity-core-team-updates","/2022/09/08/storage-write-removal-before-conditional-termination","/2022/09/08/solidity-0.8.17-release-announcement","/2022/08/08/solidity-0.8.16-release-announcement","/2022/08/08/calldata-tuple-reencoding-head-overflow-bug","/2022/06/15/solidity-0.8.15-release-announcement","/2022/06/15/inline-assembly-memory-side-effects-bug","/2022/06/15/dirty-bytes-array-to-storage-bug","/2022/05/17/solidity-0.8.14-release-announcement","/2022/05/17/data-location-inheritance-bug","/2022/05/17/calldata-reencode-size-check-bug","/2022/05/03/solidity-summit-2022-recap","/2022/04/08/announcing-the-underhanded-contest-winners-2022","/2022/03/16/solidity-0.8.13-release-announcement","/2022/03/16/encodecall-bug","/2022/02/22/solidity-summit-2022-announcement","/2022/02/16/solidity-0.8.12-release-announcement","/2022/02/09/underhanded-solidity-contest-2022-announcement","/2022/02/07/solidity-developer-survey-2021-results","/2021/12/20/solidity-0.8.11-release-announcement","/2021/11/18/solidity-developer-survey-2021","/2021/11/09/solidity-0.8.10-release-announcement","/2021/09/29/user-defined-value-types-bug","/2021/09/29/solidity-0.8.9-release-announcement","/2021/09/29/signed-immutables-bug","/2021/09/27/user-defined-value-types","/2021/09/27/solidity-0.8.8-release-announcement","/2021/08/11/solidity-0.8.7-release-announcement","/2021/06/22/solidity-0.8.6-release-announcement","/2021/06/10/solidity-0.8.5-release-announcement","/2021/05/03/soliditylangorg-umbrella-domain","/2021/04/21/solidity-0.8.4-release-announcement","/2021/04/21/decoding-from-memory-bug","/2021/04/21/custom-errors","/2021/04/01/announcing-solidity-collectibles","/2021/03/23/solidity-0.8.3-release-announcement","/2021/03/23/keccak-optimizer-bug","/2021/03/02/solidity-0.8.2-release-announcement","/2021/03/02/saving-gas-with-simple-inliner","/2021/02/15/contributing-to-solidity-101","/2021/02/10/an-introduction-to-soliditys-fuzz-testing-approach","/2021/02/01/launching-the-solidity-forum","/2021/01/27/solidity-0.8.1-release-announcement","/2021/01/26/solidity-developer-survey-2020-results","/2020/12/16/solidity-v0.8.0-release-announcement","/2020/12/16/solidity-0.7.6-release-announcement","/2020/12/09/solidity-developer-survey-2020","/2020/12/03/solidity-underhanded-contest-winners","/2020/11/18/solidity-0.7.5-release-announcement","/2020/11/04/solidity-ama-1-recap","/2020/10/28/solidity-0.8.x-preview","/2020/10/19/solidity-0.7.4-release-announcement","/2020/10/19/empty-byte-array-copy-bug","/2020/10/07/solidity-dynamic-array-cleanup-bug","/2020/10/07/solidity-0.7.3-release-announcement","/2020/09/28/solidity-0.7.2-release-announcement","/2020/09/21/solidity-underhanded-contest","/2020/09/18/meet-the-team","/2020/09/02/solidity-0.7.1-release-announcement","/2020/07/28/solidity-v0.7.0-release-announcement","/2020/07/22/Solidity-0612-release-announcement","/2020/07/08/solidity-turns-5","/2020/07/07/Solidity-0611-release-announcement","/2020/06/25/sourcify-faq","/2020/06/18/solidity-0.6-inheritance","/2020/06/11/Solidity-0610-release-announcement","/2020/06/09/solidity-summit-recap","/2020/06/05/Solidity-069-release-announcement","/2020/06/02/Sourcify-Towards-Safer-Contract-Interaction-for-Humans","/2020/05/26/array-slices","/2020/05/14/Solidity-068-release-announcement","/2020/05/13/immutable-keyword","/2020/05/04/solidity-0.6.7-release-announcement","/2020/04/17/Solidity-Summit-2020-Goes-Interspace","/2020/04/09/solidity-0.6.6-release-announcement","/2020/04/06/solidity-0.6.5-release-announcement","/2020/04/06/memory-creation-overflow-bug","/2020/03/23/fallback-receive-split","/2020/03/17/solidity-0.5.17-release-announcement","/2020/03/10/solidity-0.6.4-release-announcement","/2020/02/18/solidity-0.6.3-release-announcement","/2020/01/29/solidity-0.6-try-catch","/2020/01/27/solidity-0.6.2-release-announcement","/2020/01/02/solidity-0.6.1-release-announcement","/2020/01/02/solidity-0.5.16-release-announcement","/2019/12/17/solidity-0.6.0-release-announcement","/2019/12/17/solidity-0.5.15-release-announcement","/2019/12/09/solidity-0.5.14-release-announcement","/2019/11/14/solidity-0.5.13-release-announcement","/2019/10/01/solidity-0.5.12-release-announcement","/2019/08/12/solidity-0.5.11-release-announcement","/2019/06/25/solidity-storage-array-bugs","/2019/06/25/solidity-0.5.10-release-announcement","/2019/05/28/solidity-0.5.9-release-announcement","/2019/04/30/solidity-0.5.8-release-announcement","/2019/04/29/solidity-0.4.26-release-announcement","/2019/03/26/solidity-optimizer-and-abiencoderv2-bug","/2019/03/26/solidity-0.5.7-release-announcement","/2019/03/13/solidity-0.5.6-release-announcement","/2019/03/05/solidity-0.5.5-release-announcement","/2019/02/12/solidity-0.5.4-release-announcement","/2019/01/22/solidity-0.5.3-release-announcement","/2018/12/19/solidity-0.5.2-release-announcement","/2018/12/03/solidity-0.5.1-release-announcement","/2018/11/13/solidity-0.5.0-release-announcement","/2018/09/13/solidity-bugfix-release","/2018/09/13/solidity-0.4.25-release-announcement","/2018/05/16/solidity-0.4.24-release-announcement","/2018/04/19/solidity-0.4.23-release-announcement","/2018/04/17/solidity-0.4.22-release-announcement","/2018/03/08/solidity-0.4.21-release-announcement","/2018/02/14/solidity-0.4.20-release-announcement","/2017/11/30/solidity-0.4.19-release-announcement","/2017/10/18/solidity-0.4.18-release-announcement","/2017/09/21/solidity-0.4.17-release-announcement","/2017/08/24/solidity-0.4.16-release-announcement","/2017/08/08/solidity-0.4.15-release-announcement","/2017/07/31/solidity-0.4.14-release-announcement","/2017/07/06/solidity-0.4.13-release-announcement","/2017/07/03/solidity-0.4.12-release-announcement","/2017/05/03/solidity-optimizer-bug","/2017/05/03/solidity-0.4.11-release-announcement","/2017/03/15/solidity-0.4.10-release-announcement","/2017/01/31/solidity-0.4.9-release-announcement","/2017/01/13/solidity-0.4.8-release-announcement","/2016/12/15/solidity-0.4.7-release-announcement","/2016/11/22/solidity-0.4.6-release-announcement","/2016/11/21/solidity-0.4.5-release-announcement","/2016/11/09/analysis-storage-corruption-bug","/2016/11/01/solidity-0.4.4-release-announcement","/2016/11/01/security-alert-solidity-variables-can-overwritten-storage","/2016/10/25/solidity-0.4.3-release-announcement","/2016/09/17/solidity-0.4.2-release-announcement","/2016/09/09/solidity-0.4.1-release-announcement","/2016/09/08/solidity-0.4.0-release-announcement","/2016/09/01/formal-methods-roadmap","/2016/08/10/solidity-0.3.6-release-announcement","/2016/06/10/solidity-0.3.5-release-announcement","/2016/06/10/smart-contract-security","/2016/05/31/solidity-0.3.4-release-announcement","/2016/05/27/solidity-0.3.3-release-announcement","/2016/04/18/solidity-0.3.2-release-announcement","/2016/03/31/solidity-0.3.1-release-announcement","/2016/03/11/solidity-0.3.0-release-announcement","/2016/02/17/solidity-0.2.2-release-announcement","/2016/01/30/solidity-0.2.1-release-announcement","/2015/12/01/solidity-0.2.0-release-announcement","/2015/11/17/solidity-0.1.7-release-announcement","/2015/10/16/solidity-0.1.6-release-announcement","/2015/10/07/solidity-0.1.5-release-announcement","/2015/09/30/solidity-0.1.4-release-announcement","/2015/09/22/solidity-0.1.3-release-announcement","/2015/08/21/solidity-0.1.2-release-announcement"]},"__N_SSG":true}