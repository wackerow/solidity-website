{"pageProps":{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.8.7 Release Announcement","date":"2021-08-11","author":"Solidity Team","category":"Releases"},"content":"\n[Solidity v0.8.7](https://github.com/ethereum/solidity/releases/tag/v0.8.7) introduces support for\nthe [London upgrade](https://blog.ethereum.org/2021/07/15/london-mainnet-announcement/), includes\nvarious improvements to Yul to EVM code transformation, the SMTChecker and some bugfixes.\n\n_Please note: Unfortunately, the npm package of this version is corrupted. Pulling the `solc-js` repository directly will work._\n\n## Support for London Upgrade\n\nSolidity adds support for the `BASEFEE` opcode ([EIP-3198](https://eips.ethereum.org/EIPS/eip-3198)\nand [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)) which exposes the block's base fee. This\ncan be accessed via the global `block.basefee` or using `basefee()` in inline assembly or Yul.\n\nThe following contract illustrates an example:\n\n```solidity\ncontract Basefee {\n    function basefee_global() external view returns (uint) {\n        return block.basefee;\n    }\n    function basefee_inline_assembly() external view returns (uint ret) {\n        assembly {\n            ret := basefee()\n        }\n    }\n}\n```\n\n## SMTChecker\n\nThe SMTChecker now bundles all unproved target reports in a single message,\ndecluttering the tool's output and hopefully making any important information\nmore visible. The command line option `--model-checker-show-unproved` and the\nJSON option `settings.modelChecker.showUnproved=true` can be used to list all\nthe unproved targets.\n\nThe SMT encoding of division and modulo operations actually uses an equivalent\nencoding with multiplication and slack variables for solver performance.\nHowever, some non-default solvers work better with the precise encoding for\nthose operations. The command line option `--model-checker-div-mod-no-slacks`\nand the JSON option `settings.modelChecker.divModNoSlacks` allow the user to\nchoose the precise encoding for division and modulo. This option is expected to\nbe useful only when employing other solvers than z3.\n\nLastly, underflow and overflow targets are not checked by default anymore.\nThis follows the broad use of compiler generated checks which are expected to\nhappen in Solidity >=0.8.0. Underflow and overflow checks can still be performed\nby selecting them via the command line option `--model-checker-targets` or\nthe JSON option `settings.modelChecker.targets`.\n\nPlease see the [SMTChecker documentation](https://docs.soliditylang.org/en/latest/smtchecker.html) in the Solidity docs for more detailed\ninformation about these and other model checker options.\n\n## Full Changelog\n\nLanguage Features:\n\n- Introduce global `block.basefee` for retrieving the base fee of the current block.\n- Yul: Introduce builtin `basefee()` for retrieving the base fee of the current block.\n\nCompiler Features:\n\n- AssemblyStack: Also run opcode-based optimizer when compiling Yul code.\n- Commandline Interface: option `--pretty-json` works also with `--standard--json`.\n- EVM: Set the default EVM version to \"London\".\n- SMTChecker: Do not check underflow and overflow by default.\n- SMTChecker: Unproved targets are hidden by default, and the SMTChecker only states how many unproved targets there are. They can be listed using the command line option `--model-checker-show-unproved` or the JSON option `settings.modelChecker.showUnproved`.\n- SMTChecker: new setting to enable/disable encoding of division and modulo with slack variables. The command line option is `--model-checker-div-mod-slacks` and the JSON option is `settings.modelChecker.divModWithSlacks`.\n- Yul EVM Code Transform: Also pop unused argument slots for functions without return variables (under the same restrictions as for functions with return variables).\n- Yul EVM Code Transform: Do not reuse stack slots that immediately become unreachable.\n- Yul Optimizer: Move function arguments and return variables to memory with the experimental Stack Limit Evader (which is not enabled by default).\n\nBugfixes:\n\n- Code Generator: Fix crash when passing an empty string literal to `bytes.concat()`.\n- Code Generator: Fix internal compiler error when calling functions bound to calldata structs and arrays.\n- Code Generator: Fix internal compiler error when passing a 32-byte hex literal or a zero literal to `bytes.concat()` by disallowing such literals.\n- Commandline Interface: Apply `--optimizer-runs` option in assembly / yul mode.\n- Commandline Interface: Fix crash when a directory path is passed to `--standard-json`.\n- Commandline Interface: Read JSON from standard input when `--standard-json` gets `-` as a file name.\n- Standard JSON: Include source location for errors in files with empty name.\n- Type Checker: Fix internal error and prevent static calls to unimplemented modifiers.\n- Yul Code Generator: Fix internal compiler error when using a long literal with bitwise negation.\n- Yul Code Generator: Fix source location references for calls to builtin functions.\n- Yul Parser: Fix source location references for `if` statements.\n\nA big thank you to all contributors who helped make this release possible!\n\nDownload the new version of Solidity [here](https://github.com/ethereum/solidity/releases/tag/v0.8.7).\n","availableURLs":["/2023/05/10/solidity-0.8.20-release-announcement","/2023/03/10/solidity-developer-survey-2022-results","/2023/02/22/user-defined-operators","/2023/02/22/solidity-0.8.19-release-announcement","/2023/02/01/solidity-0.8.18-release-announcement","/2022/12/07/solidity-developer-survey-2022-announcement","/2022/12/05/solidity-core-team-updates","/2022/09/08/storage-write-removal-before-conditional-termination","/2022/09/08/solidity-0.8.17-release-announcement","/2022/08/08/solidity-0.8.16-release-announcement","/2022/08/08/calldata-tuple-reencoding-head-overflow-bug","/2022/06/15/solidity-0.8.15-release-announcement","/2022/06/15/inline-assembly-memory-side-effects-bug","/2022/06/15/dirty-bytes-array-to-storage-bug","/2022/05/17/solidity-0.8.14-release-announcement","/2022/05/17/data-location-inheritance-bug","/2022/05/17/calldata-reencode-size-check-bug","/2022/05/03/solidity-summit-2022-recap","/2022/04/08/announcing-the-underhanded-contest-winners-2022","/2022/03/16/solidity-0.8.13-release-announcement","/2022/03/16/encodecall-bug","/2022/02/22/solidity-summit-2022-announcement","/2022/02/16/solidity-0.8.12-release-announcement","/2022/02/09/underhanded-solidity-contest-2022-announcement","/2022/02/07/solidity-developer-survey-2021-results","/2021/12/20/solidity-0.8.11-release-announcement","/2021/11/18/solidity-developer-survey-2021","/2021/11/09/solidity-0.8.10-release-announcement","/2021/09/29/user-defined-value-types-bug","/2021/09/29/solidity-0.8.9-release-announcement","/2021/09/29/signed-immutables-bug","/2021/09/27/user-defined-value-types","/2021/09/27/solidity-0.8.8-release-announcement","/2021/08/11/solidity-0.8.7-release-announcement","/2021/06/22/solidity-0.8.6-release-announcement","/2021/06/10/solidity-0.8.5-release-announcement","/2021/05/03/soliditylangorg-umbrella-domain","/2021/04/21/solidity-0.8.4-release-announcement","/2021/04/21/decoding-from-memory-bug","/2021/04/21/custom-errors","/2021/04/01/announcing-solidity-collectibles","/2021/03/23/solidity-0.8.3-release-announcement","/2021/03/23/keccak-optimizer-bug","/2021/03/02/solidity-0.8.2-release-announcement","/2021/03/02/saving-gas-with-simple-inliner","/2021/02/15/contributing-to-solidity-101","/2021/02/10/an-introduction-to-soliditys-fuzz-testing-approach","/2021/02/01/launching-the-solidity-forum","/2021/01/27/solidity-0.8.1-release-announcement","/2021/01/26/solidity-developer-survey-2020-results","/2020/12/16/solidity-v0.8.0-release-announcement","/2020/12/16/solidity-0.7.6-release-announcement","/2020/12/09/solidity-developer-survey-2020","/2020/12/03/solidity-underhanded-contest-winners","/2020/11/18/solidity-0.7.5-release-announcement","/2020/11/04/solidity-ama-1-recap","/2020/10/28/solidity-0.8.x-preview","/2020/10/19/solidity-0.7.4-release-announcement","/2020/10/19/empty-byte-array-copy-bug","/2020/10/07/solidity-dynamic-array-cleanup-bug","/2020/10/07/solidity-0.7.3-release-announcement","/2020/09/28/solidity-0.7.2-release-announcement","/2020/09/21/solidity-underhanded-contest","/2020/09/18/meet-the-team","/2020/09/02/solidity-0.7.1-release-announcement","/2020/07/28/solidity-v0.7.0-release-announcement","/2020/07/22/Solidity-0612-release-announcement","/2020/07/08/solidity-turns-5","/2020/07/07/Solidity-0611-release-announcement","/2020/06/25/sourcify-faq","/2020/06/18/solidity-0.6-inheritance","/2020/06/11/Solidity-0610-release-announcement","/2020/06/09/solidity-summit-recap","/2020/06/05/Solidity-069-release-announcement","/2020/06/02/Sourcify-Towards-Safer-Contract-Interaction-for-Humans","/2020/05/26/array-slices","/2020/05/14/Solidity-068-release-announcement","/2020/05/13/immutable-keyword","/2020/05/04/solidity-0.6.7-release-announcement","/2020/04/17/Solidity-Summit-2020-Goes-Interspace","/2020/04/09/solidity-0.6.6-release-announcement","/2020/04/06/solidity-0.6.5-release-announcement","/2020/04/06/memory-creation-overflow-bug","/2020/03/23/fallback-receive-split","/2020/03/17/solidity-0.5.17-release-announcement","/2020/03/10/solidity-0.6.4-release-announcement","/2020/02/18/solidity-0.6.3-release-announcement","/2020/01/29/solidity-0.6-try-catch","/2020/01/27/solidity-0.6.2-release-announcement","/2020/01/02/solidity-0.6.1-release-announcement","/2020/01/02/solidity-0.5.16-release-announcement","/2019/12/17/solidity-0.6.0-release-announcement","/2019/12/17/solidity-0.5.15-release-announcement","/2019/12/09/solidity-0.5.14-release-announcement","/2019/11/14/solidity-0.5.13-release-announcement","/2019/10/01/solidity-0.5.12-release-announcement","/2019/08/12/solidity-0.5.11-release-announcement","/2019/06/25/solidity-storage-array-bugs","/2019/06/25/solidity-0.5.10-release-announcement","/2019/05/28/solidity-0.5.9-release-announcement","/2019/04/30/solidity-0.5.8-release-announcement","/2019/04/29/solidity-0.4.26-release-announcement","/2019/03/26/solidity-optimizer-and-abiencoderv2-bug","/2019/03/26/solidity-0.5.7-release-announcement","/2019/03/13/solidity-0.5.6-release-announcement","/2019/03/05/solidity-0.5.5-release-announcement","/2019/02/12/solidity-0.5.4-release-announcement","/2019/01/22/solidity-0.5.3-release-announcement","/2018/12/19/solidity-0.5.2-release-announcement","/2018/12/03/solidity-0.5.1-release-announcement","/2018/11/13/solidity-0.5.0-release-announcement","/2018/09/13/solidity-bugfix-release","/2018/09/13/solidity-0.4.25-release-announcement","/2018/05/16/solidity-0.4.24-release-announcement","/2018/04/19/solidity-0.4.23-release-announcement","/2018/04/17/solidity-0.4.22-release-announcement","/2018/03/08/solidity-0.4.21-release-announcement","/2018/02/14/solidity-0.4.20-release-announcement","/2017/11/30/solidity-0.4.19-release-announcement","/2017/10/18/solidity-0.4.18-release-announcement","/2017/09/21/solidity-0.4.17-release-announcement","/2017/08/24/solidity-0.4.16-release-announcement","/2017/08/08/solidity-0.4.15-release-announcement","/2017/07/31/solidity-0.4.14-release-announcement","/2017/07/06/solidity-0.4.13-release-announcement","/2017/07/03/solidity-0.4.12-release-announcement","/2017/05/03/solidity-optimizer-bug","/2017/05/03/solidity-0.4.11-release-announcement","/2017/03/15/solidity-0.4.10-release-announcement","/2017/01/31/solidity-0.4.9-release-announcement","/2017/01/13/solidity-0.4.8-release-announcement","/2016/12/15/solidity-0.4.7-release-announcement","/2016/11/22/solidity-0.4.6-release-announcement","/2016/11/21/solidity-0.4.5-release-announcement","/2016/11/09/analysis-storage-corruption-bug","/2016/11/01/solidity-0.4.4-release-announcement","/2016/11/01/security-alert-solidity-variables-can-overwritten-storage","/2016/10/25/solidity-0.4.3-release-announcement","/2016/09/17/solidity-0.4.2-release-announcement","/2016/09/09/solidity-0.4.1-release-announcement","/2016/09/08/solidity-0.4.0-release-announcement","/2016/09/01/formal-methods-roadmap","/2016/08/10/solidity-0.3.6-release-announcement","/2016/06/10/solidity-0.3.5-release-announcement","/2016/06/10/smart-contract-security","/2016/05/31/solidity-0.3.4-release-announcement","/2016/05/27/solidity-0.3.3-release-announcement","/2016/04/18/solidity-0.3.2-release-announcement","/2016/03/31/solidity-0.3.1-release-announcement","/2016/03/11/solidity-0.3.0-release-announcement","/2016/02/17/solidity-0.2.2-release-announcement","/2016/01/30/solidity-0.2.1-release-announcement","/2015/12/01/solidity-0.2.0-release-announcement","/2015/11/17/solidity-0.1.7-release-announcement","/2015/10/16/solidity-0.1.6-release-announcement","/2015/10/07/solidity-0.1.5-release-announcement","/2015/09/30/solidity-0.1.4-release-announcement","/2015/09/22/solidity-0.1.3-release-announcement","/2015/08/21/solidity-0.1.2-release-announcement"]},"__N_SSG":true}