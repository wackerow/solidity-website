{"pageProps":{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.8.10 Release Announcement","date":"2021-11-09","author":"Solidity Team","category":"Releases"},"content":"\n[Solidity v0.8.10](https://github.com/ethereum/solidity/releases/tag/v0.8.10) can now report contract invariants and reentrancy properties through the SMTChecker. It also contains some new optimizations with regards to external function calls and enables the new EVM code generator for pure Yul mode.\n\n## Notable New Features\n\n### New EVM Code Transform for Compilation via Yul IR\n\nWith this release, we introduce a new EVM code generation backend that is used for the experimental compilation pipeline of Solidity via Yul (with enabled optimizer), as well as for optimized compilation of Yul input.\n\nWhile previously any Yul variable had a fixed position on stack during its entire lifetime, the new code transform drops this restriction and attempts to determine a more optimal layout that (1) reduces the required amount of swapping and thereby reduces gas cost and (2) keeps overall stack usage as low as possible to work against stack-too-deep errors.\n\nWe simultaneously enable the previously experimental StackLimitEvader for code generated via Yul, which will - under certain conditions - move Yul variables from stack to memory to prevent stack-too-deep errors. However, this transformation is only enabled in the absence of inline assembly for now, since there is no way to indicate that inline assembly will respect Solidity's memory model, which is a prerequisite for the transformation to be valid.\n\nIn our benchmarks, the new code transform has resulted in significant runtime gas savings, although at the cost of a slight increase in code size.\n\nThis change will also affect the generation of optimized code with Yul as input, i.e. `solc --strict-assembly --optimize` will also use the new code transform.\nTo enable the StackLimitEvader, Yul code needs to indicate that it respects an area of reserved memory. This can be done with the `memoryguard` instruction as described in our [documentation](https://docs.soliditylang.org/en/latest/yul.html?#memoryguard): Yul code containing `let ptr := memoryguard(size)`, where `size` is a literal, promises to keep the memory in the range `[size, ptr)` untouched at all times, allowing the compiler to use this range for moving stack variables, if necessary.\n\n## Full Changelog\n\nLanguage Features:\n\n- Inline Assembly: Support `.address` and `.selector` on external function pointers to access their address and function selector.\n\nCompiler Features:\n\n- Code Generator: Skip existence check for external contract if return data is expected. In this case, the ABI decoder will revert if the contract does not exist.\n- Commandline Interface: Accept nested brackets in step sequences passed to `--yul-optimizations`.\n- Commandline Interface: Add `--debug-info` option for selecting how much extra debug information should be included in the produced EVM assembly and Yul code.\n- Commandline Interface: Support `--asm`, `--bin`, `--ir-optimized`, `--ewasm` and `--ewasm-ir` output selection options in assembler mode.\n- Commandline Interface: Use different colors when printing errors, warnings and infos.\n- JSON AST: Set absolute paths of imports earlier, in the `parsing` stage.\n- SMTChecker: Output values for `block.*`, `msg.*` and `tx.*` variables that are present in the called functions.\n- SMTChecker: Report contract invariants and reentrancy properties. This can be enabled via the CLI option `--model-checker-invariants` or the Standard JSON option `settings.modelChecker.invariants`.\n- Standard JSON: Accept nested brackets in step sequences passed to `settings.optimizer.details.yulDetails.optimizerSteps`.\n- Standard JSON: Add `settings.debug.debugInfo` option for selecting how much extra debug information should be included in the produced EVM assembly and Yul code.\n- Yul EVM Code Transform: Switch to new optimized code transform when compiling via Yul with enabled optimizer.\n- Yul Optimizer: Take control-flow side-effects of user-defined functions into account in various optimizer steps.\n\nBugfixes:\n\n- Code Generator: Fix constructor source mappings for immutables.\n- Commandline Interface: Disallow `--error-recovery` option outside of the compiler mode.\n- Commandline Interface: Don't return zero exit code when writing linked files to disk fails.\n- Commandline Interface: Fix extra newline character being appended to sources passed through standard input, affecting their hashes.\n- Commandline Interface: Report output selection options unsupported by the selected input mode instead of ignoring them.\n- Commandline Interface: When linking only accept exact matches for library names passed to the `--libraries` option. Library names not prefixed with a file name used to match any library with that name.\n- SMTChecker: Fix internal error in magic type access (`block`, `msg`, `tx`).\n- SMTChecker: Fix internal error in the CHC engine when passing gas in the function options.\n- TypeChecker: Fix internal error when using arrays and structs with user defined value types before declaration.\n- TypeChecker: Fix internal error when using user defined value types in public library functions.\n- TypeChecker: Improved error message for constant variables with (nested) mapping types.\n- Yul Assembler: Fix internal error when function names are not unique.\n- Yul IR Generator: Do not output empty switches/if-bodies for empty contracts.\n\nImportant Bugfixes in Experimental Features:\n\n- Yul IR Generator: Changes to function return variables referenced in modifier invocation arguments were not properly forwarded if there was more than one return variable.\n\nBuild System:\n\n- Pass linker-only emscripten options only when linking.\n- Remove obsolete compatibility workaround for emscripten builds.\n- Update emscripten to version 2.0.33.\n\nA big thank you to all contributors who helped make this release possible!\n\nDownload the new version of Solidity [here](https://github.com/ethereum/solidity/releases/tag/v0.8.10).\n","availableURLs":["/2023/05/10/solidity-0.8.20-release-announcement","/2023/03/10/solidity-developer-survey-2022-results","/2023/02/22/user-defined-operators","/2023/02/22/solidity-0.8.19-release-announcement","/2023/02/01/solidity-0.8.18-release-announcement","/2022/12/07/solidity-developer-survey-2022-announcement","/2022/12/05/solidity-core-team-updates","/2022/09/08/storage-write-removal-before-conditional-termination","/2022/09/08/solidity-0.8.17-release-announcement","/2022/08/08/solidity-0.8.16-release-announcement","/2022/08/08/calldata-tuple-reencoding-head-overflow-bug","/2022/06/15/solidity-0.8.15-release-announcement","/2022/06/15/inline-assembly-memory-side-effects-bug","/2022/06/15/dirty-bytes-array-to-storage-bug","/2022/05/17/solidity-0.8.14-release-announcement","/2022/05/17/data-location-inheritance-bug","/2022/05/17/calldata-reencode-size-check-bug","/2022/05/03/solidity-summit-2022-recap","/2022/04/08/announcing-the-underhanded-contest-winners-2022","/2022/03/16/solidity-0.8.13-release-announcement","/2022/03/16/encodecall-bug","/2022/02/22/solidity-summit-2022-announcement","/2022/02/16/solidity-0.8.12-release-announcement","/2022/02/09/underhanded-solidity-contest-2022-announcement","/2022/02/07/solidity-developer-survey-2021-results","/2021/12/20/solidity-0.8.11-release-announcement","/2021/11/18/solidity-developer-survey-2021","/2021/11/09/solidity-0.8.10-release-announcement","/2021/09/29/user-defined-value-types-bug","/2021/09/29/solidity-0.8.9-release-announcement","/2021/09/29/signed-immutables-bug","/2021/09/27/user-defined-value-types","/2021/09/27/solidity-0.8.8-release-announcement","/2021/08/11/solidity-0.8.7-release-announcement","/2021/06/22/solidity-0.8.6-release-announcement","/2021/06/10/solidity-0.8.5-release-announcement","/2021/05/03/soliditylangorg-umbrella-domain","/2021/04/21/solidity-0.8.4-release-announcement","/2021/04/21/decoding-from-memory-bug","/2021/04/21/custom-errors","/2021/04/01/announcing-solidity-collectibles","/2021/03/23/solidity-0.8.3-release-announcement","/2021/03/23/keccak-optimizer-bug","/2021/03/02/solidity-0.8.2-release-announcement","/2021/03/02/saving-gas-with-simple-inliner","/2021/02/15/contributing-to-solidity-101","/2021/02/10/an-introduction-to-soliditys-fuzz-testing-approach","/2021/02/01/launching-the-solidity-forum","/2021/01/27/solidity-0.8.1-release-announcement","/2021/01/26/solidity-developer-survey-2020-results","/2020/12/16/solidity-v0.8.0-release-announcement","/2020/12/16/solidity-0.7.6-release-announcement","/2020/12/09/solidity-developer-survey-2020","/2020/12/03/solidity-underhanded-contest-winners","/2020/11/18/solidity-0.7.5-release-announcement","/2020/11/04/solidity-ama-1-recap","/2020/10/28/solidity-0.8.x-preview","/2020/10/19/solidity-0.7.4-release-announcement","/2020/10/19/empty-byte-array-copy-bug","/2020/10/07/solidity-dynamic-array-cleanup-bug","/2020/10/07/solidity-0.7.3-release-announcement","/2020/09/28/solidity-0.7.2-release-announcement","/2020/09/21/solidity-underhanded-contest","/2020/09/18/meet-the-team","/2020/09/02/solidity-0.7.1-release-announcement","/2020/07/28/solidity-v0.7.0-release-announcement","/2020/07/22/Solidity-0612-release-announcement","/2020/07/08/solidity-turns-5","/2020/07/07/Solidity-0611-release-announcement","/2020/06/25/sourcify-faq","/2020/06/18/solidity-0.6-inheritance","/2020/06/11/Solidity-0610-release-announcement","/2020/06/09/solidity-summit-recap","/2020/06/05/Solidity-069-release-announcement","/2020/06/02/Sourcify-Towards-Safer-Contract-Interaction-for-Humans","/2020/05/26/array-slices","/2020/05/14/Solidity-068-release-announcement","/2020/05/13/immutable-keyword","/2020/05/04/solidity-0.6.7-release-announcement","/2020/04/17/Solidity-Summit-2020-Goes-Interspace","/2020/04/09/solidity-0.6.6-release-announcement","/2020/04/06/solidity-0.6.5-release-announcement","/2020/04/06/memory-creation-overflow-bug","/2020/03/23/fallback-receive-split","/2020/03/17/solidity-0.5.17-release-announcement","/2020/03/10/solidity-0.6.4-release-announcement","/2020/02/18/solidity-0.6.3-release-announcement","/2020/01/29/solidity-0.6-try-catch","/2020/01/27/solidity-0.6.2-release-announcement","/2020/01/02/solidity-0.6.1-release-announcement","/2020/01/02/solidity-0.5.16-release-announcement","/2019/12/17/solidity-0.6.0-release-announcement","/2019/12/17/solidity-0.5.15-release-announcement","/2019/12/09/solidity-0.5.14-release-announcement","/2019/11/14/solidity-0.5.13-release-announcement","/2019/10/01/solidity-0.5.12-release-announcement","/2019/08/12/solidity-0.5.11-release-announcement","/2019/06/25/solidity-storage-array-bugs","/2019/06/25/solidity-0.5.10-release-announcement","/2019/05/28/solidity-0.5.9-release-announcement","/2019/04/30/solidity-0.5.8-release-announcement","/2019/04/29/solidity-0.4.26-release-announcement","/2019/03/26/solidity-optimizer-and-abiencoderv2-bug","/2019/03/26/solidity-0.5.7-release-announcement","/2019/03/13/solidity-0.5.6-release-announcement","/2019/03/05/solidity-0.5.5-release-announcement","/2019/02/12/solidity-0.5.4-release-announcement","/2019/01/22/solidity-0.5.3-release-announcement","/2018/12/19/solidity-0.5.2-release-announcement","/2018/12/03/solidity-0.5.1-release-announcement","/2018/11/13/solidity-0.5.0-release-announcement","/2018/09/13/solidity-bugfix-release","/2018/09/13/solidity-0.4.25-release-announcement","/2018/05/16/solidity-0.4.24-release-announcement","/2018/04/19/solidity-0.4.23-release-announcement","/2018/04/17/solidity-0.4.22-release-announcement","/2018/03/08/solidity-0.4.21-release-announcement","/2018/02/14/solidity-0.4.20-release-announcement","/2017/11/30/solidity-0.4.19-release-announcement","/2017/10/18/solidity-0.4.18-release-announcement","/2017/09/21/solidity-0.4.17-release-announcement","/2017/08/24/solidity-0.4.16-release-announcement","/2017/08/08/solidity-0.4.15-release-announcement","/2017/07/31/solidity-0.4.14-release-announcement","/2017/07/06/solidity-0.4.13-release-announcement","/2017/07/03/solidity-0.4.12-release-announcement","/2017/05/03/solidity-optimizer-bug","/2017/05/03/solidity-0.4.11-release-announcement","/2017/03/15/solidity-0.4.10-release-announcement","/2017/01/31/solidity-0.4.9-release-announcement","/2017/01/13/solidity-0.4.8-release-announcement","/2016/12/15/solidity-0.4.7-release-announcement","/2016/11/22/solidity-0.4.6-release-announcement","/2016/11/21/solidity-0.4.5-release-announcement","/2016/11/09/analysis-storage-corruption-bug","/2016/11/01/solidity-0.4.4-release-announcement","/2016/11/01/security-alert-solidity-variables-can-overwritten-storage","/2016/10/25/solidity-0.4.3-release-announcement","/2016/09/17/solidity-0.4.2-release-announcement","/2016/09/09/solidity-0.4.1-release-announcement","/2016/09/08/solidity-0.4.0-release-announcement","/2016/09/01/formal-methods-roadmap","/2016/08/10/solidity-0.3.6-release-announcement","/2016/06/10/solidity-0.3.5-release-announcement","/2016/06/10/smart-contract-security","/2016/05/31/solidity-0.3.4-release-announcement","/2016/05/27/solidity-0.3.3-release-announcement","/2016/04/18/solidity-0.3.2-release-announcement","/2016/03/31/solidity-0.3.1-release-announcement","/2016/03/11/solidity-0.3.0-release-announcement","/2016/02/17/solidity-0.2.2-release-announcement","/2016/01/30/solidity-0.2.1-release-announcement","/2015/12/01/solidity-0.2.0-release-announcement","/2015/11/17/solidity-0.1.7-release-announcement","/2015/10/16/solidity-0.1.6-release-announcement","/2015/10/07/solidity-0.1.5-release-announcement","/2015/09/30/solidity-0.1.4-release-announcement","/2015/09/22/solidity-0.1.3-release-announcement","/2015/08/21/solidity-0.1.2-release-announcement"]},"__N_SSG":true}