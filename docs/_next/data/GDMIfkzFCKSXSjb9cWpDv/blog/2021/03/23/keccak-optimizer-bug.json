{"pageProps":{"frontmatter":{"layout":"post","published":true,"title":"Solidity Optimizer Keccak Caching Bug","date":"2021-03-23","author":"Solidity Team","category":"Security Alerts"},"content":"\nOn March 20, 2021, a bug in Solidity's bytecode optimizer was found by differential fuzzing. The bug\nis fixed with [version 0.8.3](https://github.com/ethereum/solidity/releases/tag/v0.8.3) released on\nMarch 23, 2021. **The bug is present in all prior versions of Solidity.**\n\nWe assigned the bug a severity level of \"medium\".\n\n## Technical Details\n\n**Summary**: The bytecode optimizer incorrectly re-used previously evaluated Keccak-256 hashes. You\nare unlikely to be affected if you do not compute Keccak-256 hashes in inline assembly.\n\nSolidity's bytecode optimizer has a step that can compute Keccak-256 hashes, if the contents of the\nmemory, over which the Keccak-256 built-in function is invoked, are known during compilation time.\nThis step also has a mechanism to determine that two Keccak-256 hashes are equal even if the values\nin memory are not known during compile time. This step had a bug where Keccak-256 hashes of the\nsame memory content, but of different sizes were considered equal. The following is a simple example\nthat illustrates the bug:\n\n```solidity\ncontract C {\n  function bug() public returns (uint a, uint b) {\n    assembly {\n      mstore(0, 0)\n      // The optimizer computes the value at compile time:\n      // 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\n      a := keccak256(0, 32)\n      // The optimizer incorrectly uses the cached value\n      // and transforms the next line to\n      // b := 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\n      // instead of\n      // b := 0xe2b9f9f9430b05bfa9a3abd3bac9a181434d23a707ef1cde8bd25d30203538d8\n      b := keccak256(0, 23)\n    }\n  }\n}\n```\n\nIn the above example, both the Keccak-256 hashes can be computed at compile time. Here are two other\ncases where the hashes cannot be computed at compile time, yet the optimizer considered them equal\nand thus modified the semantics:\n\n```solidity\ncontract C {\n  function bug(string memory s) public returns (bool ret) {\n    assembly {\n      let a := keccak256(s, 32)\n      let b := keccak256(s, 8)\n      // Here `a` and `b` were considered equal,\n      // leading to `ret` being incorrectly set to true.\n      ret := eq(a, b)\n    }\n  }\n}\n```\n\n```solidity\ncontract C {\n  function bug() public view returns (bool ret) {\n    assembly {\n      let x := calldataload(0)\n      mstore(0, x)\n      mstore(0x20, x)\n      let a := keccak256(0, 4)\n      // even though the memory location is different,\n      // the 32-byte content is the same.\n      let b := keccak256(0x20, 8)\n      // Here `a` and `b` were considered equal,\n      // leading to `ret` being incorrectly set to true.\n      ret := eq(a, b)\n    }\n  }\n}\n```\n\nSpecifically, `keccak256(mpos1, length1)` and `keccak256(mpos2, length2)` in some cases were\nconsidered equal if `length1` and `length2`, when rounded up to nearest multiple of 32 were the\nsame, and when the memory contents at `mpos1` and `mpos2` can be deduced to be equal.\n\nYou may be **affected** if you compute multiple Keccak-256 hashes of the same content, but with\ndifferent lengths inside inline assembly, and enabled the optimizer.\n\n### Unaffected Cases\n\nYou are unaffected if your code:\n\n- uses `keccak256` with a length that is not known at compile time,\n- only uses `keccak256` with a length that is always a multiple of 32. In particular,\n  for storage slot computation, the Solidity compiler always computes Keccak-256 hash over memory\n  regions whose lengths and offsets are multiples of 32,\n- contains pairs of `keccak256` hashes that are separated by certain instructions such as:\n  - an instruction that breaks the control flow, e.g., `jumpi`, `jump` etc. In high level code, this\n    would be function calls, if statements, loops, etc,\n  - an instruction that writes to memory other than a very simple `mstore`, e.g., `call`,\n    `returndatacopy`, etc.\n\nNote that, apart from the builtin function `keccak256`, the compiler internally generates code that\nmakes use of the Keccak-256 hash. For example,\n\n- in certain indexed event arguments,\n- in the function `abi.encodeWithSignature`,\n- when using `string` or `bytes` as keys in mappings,\n- when accessing the data location of `mapping` and `array` types.\n\n### Severity\n\nMost usages of `keccak256` fall under one of the unaffected cases mentioned in the previous section.\nIn particular, this can only affect pairs of `keccak256` opcodes without an intermediate jump or an\nexternal call, which makes the likelyhood of the bug being present in existing code very low. This\nis also be validated by the fact that the bug has been present in the optimizer for so long without\nbeing detected. Therefore, we assigned the bug a \"medium\" severity level.\n\n### Fuzzing\n\nThe bug was discovered by differentially testing the current code-generation and the upcoming Yul\nbased code-generation with fuzzer generated input. Essentially, the example in\n[solidity#11131](https://github.com/ethereum/solidity/issues/11131) produced different results, when\ncompiled using different code-generation paths; this is because the bytecode optimizer, in which the\nbug was present, is only activated in the old code-generation, and the Yul based codegen currently\nonly uses the Yul-optimizer that does not contain this bug.\n\nThis bug discovery is part of ongoing fuzzing related work. You can read more about Solidity's\napproach to fuzzing in this introductory [blog\npost.](https://blog.soliditylang.org/2021/02/10/an-introduction-to-soliditys-fuzz-testing-approach/)\n","availableURLs":["/2023/05/10/solidity-0.8.20-release-announcement","/2023/03/10/solidity-developer-survey-2022-results","/2023/02/22/user-defined-operators","/2023/02/22/solidity-0.8.19-release-announcement","/2023/02/01/solidity-0.8.18-release-announcement","/2022/12/07/solidity-developer-survey-2022-announcement","/2022/12/05/solidity-core-team-updates","/2022/09/08/storage-write-removal-before-conditional-termination","/2022/09/08/solidity-0.8.17-release-announcement","/2022/08/08/solidity-0.8.16-release-announcement","/2022/08/08/calldata-tuple-reencoding-head-overflow-bug","/2022/06/15/solidity-0.8.15-release-announcement","/2022/06/15/inline-assembly-memory-side-effects-bug","/2022/06/15/dirty-bytes-array-to-storage-bug","/2022/05/17/solidity-0.8.14-release-announcement","/2022/05/17/data-location-inheritance-bug","/2022/05/17/calldata-reencode-size-check-bug","/2022/05/03/solidity-summit-2022-recap","/2022/04/08/announcing-the-underhanded-contest-winners-2022","/2022/03/16/solidity-0.8.13-release-announcement","/2022/03/16/encodecall-bug","/2022/02/22/solidity-summit-2022-announcement","/2022/02/16/solidity-0.8.12-release-announcement","/2022/02/09/underhanded-solidity-contest-2022-announcement","/2022/02/07/solidity-developer-survey-2021-results","/2021/12/20/solidity-0.8.11-release-announcement","/2021/11/18/solidity-developer-survey-2021","/2021/11/09/solidity-0.8.10-release-announcement","/2021/09/29/user-defined-value-types-bug","/2021/09/29/solidity-0.8.9-release-announcement","/2021/09/29/signed-immutables-bug","/2021/09/27/user-defined-value-types","/2021/09/27/solidity-0.8.8-release-announcement","/2021/08/11/solidity-0.8.7-release-announcement","/2021/06/22/solidity-0.8.6-release-announcement","/2021/06/10/solidity-0.8.5-release-announcement","/2021/05/03/soliditylangorg-umbrella-domain","/2021/04/21/solidity-0.8.4-release-announcement","/2021/04/21/decoding-from-memory-bug","/2021/04/21/custom-errors","/2021/04/01/announcing-solidity-collectibles","/2021/03/23/solidity-0.8.3-release-announcement","/2021/03/23/keccak-optimizer-bug","/2021/03/02/solidity-0.8.2-release-announcement","/2021/03/02/saving-gas-with-simple-inliner","/2021/02/15/contributing-to-solidity-101","/2021/02/10/an-introduction-to-soliditys-fuzz-testing-approach","/2021/02/01/launching-the-solidity-forum","/2021/01/27/solidity-0.8.1-release-announcement","/2021/01/26/solidity-developer-survey-2020-results","/2020/12/16/solidity-v0.8.0-release-announcement","/2020/12/16/solidity-0.7.6-release-announcement","/2020/12/09/solidity-developer-survey-2020","/2020/12/03/solidity-underhanded-contest-winners","/2020/11/18/solidity-0.7.5-release-announcement","/2020/11/04/solidity-ama-1-recap","/2020/10/28/solidity-0.8.x-preview","/2020/10/19/solidity-0.7.4-release-announcement","/2020/10/19/empty-byte-array-copy-bug","/2020/10/07/solidity-dynamic-array-cleanup-bug","/2020/10/07/solidity-0.7.3-release-announcement","/2020/09/28/solidity-0.7.2-release-announcement","/2020/09/21/solidity-underhanded-contest","/2020/09/18/meet-the-team","/2020/09/02/solidity-0.7.1-release-announcement","/2020/07/28/solidity-v0.7.0-release-announcement","/2020/07/22/Solidity-0612-release-announcement","/2020/07/08/solidity-turns-5","/2020/07/07/Solidity-0611-release-announcement","/2020/06/25/sourcify-faq","/2020/06/18/solidity-0.6-inheritance","/2020/06/11/Solidity-0610-release-announcement","/2020/06/09/solidity-summit-recap","/2020/06/05/Solidity-069-release-announcement","/2020/06/02/Sourcify-Towards-Safer-Contract-Interaction-for-Humans","/2020/05/26/array-slices","/2020/05/14/Solidity-068-release-announcement","/2020/05/13/immutable-keyword","/2020/05/04/solidity-0.6.7-release-announcement","/2020/04/17/Solidity-Summit-2020-Goes-Interspace","/2020/04/09/solidity-0.6.6-release-announcement","/2020/04/06/solidity-0.6.5-release-announcement","/2020/04/06/memory-creation-overflow-bug","/2020/03/23/fallback-receive-split","/2020/03/17/solidity-0.5.17-release-announcement","/2020/03/10/solidity-0.6.4-release-announcement","/2020/02/18/solidity-0.6.3-release-announcement","/2020/01/29/solidity-0.6-try-catch","/2020/01/27/solidity-0.6.2-release-announcement","/2020/01/02/solidity-0.6.1-release-announcement","/2020/01/02/solidity-0.5.16-release-announcement","/2019/12/17/solidity-0.6.0-release-announcement","/2019/12/17/solidity-0.5.15-release-announcement","/2019/12/09/solidity-0.5.14-release-announcement","/2019/11/14/solidity-0.5.13-release-announcement","/2019/10/01/solidity-0.5.12-release-announcement","/2019/08/12/solidity-0.5.11-release-announcement","/2019/06/25/solidity-storage-array-bugs","/2019/06/25/solidity-0.5.10-release-announcement","/2019/05/28/solidity-0.5.9-release-announcement","/2019/04/30/solidity-0.5.8-release-announcement","/2019/04/29/solidity-0.4.26-release-announcement","/2019/03/26/solidity-optimizer-and-abiencoderv2-bug","/2019/03/26/solidity-0.5.7-release-announcement","/2019/03/13/solidity-0.5.6-release-announcement","/2019/03/05/solidity-0.5.5-release-announcement","/2019/02/12/solidity-0.5.4-release-announcement","/2019/01/22/solidity-0.5.3-release-announcement","/2018/12/19/solidity-0.5.2-release-announcement","/2018/12/03/solidity-0.5.1-release-announcement","/2018/11/13/solidity-0.5.0-release-announcement","/2018/09/13/solidity-bugfix-release","/2018/09/13/solidity-0.4.25-release-announcement","/2018/05/16/solidity-0.4.24-release-announcement","/2018/04/19/solidity-0.4.23-release-announcement","/2018/04/17/solidity-0.4.22-release-announcement","/2018/03/08/solidity-0.4.21-release-announcement","/2018/02/14/solidity-0.4.20-release-announcement","/2017/11/30/solidity-0.4.19-release-announcement","/2017/10/18/solidity-0.4.18-release-announcement","/2017/09/21/solidity-0.4.17-release-announcement","/2017/08/24/solidity-0.4.16-release-announcement","/2017/08/08/solidity-0.4.15-release-announcement","/2017/07/31/solidity-0.4.14-release-announcement","/2017/07/06/solidity-0.4.13-release-announcement","/2017/07/03/solidity-0.4.12-release-announcement","/2017/05/03/solidity-optimizer-bug","/2017/05/03/solidity-0.4.11-release-announcement","/2017/03/15/solidity-0.4.10-release-announcement","/2017/01/31/solidity-0.4.9-release-announcement","/2017/01/13/solidity-0.4.8-release-announcement","/2016/12/15/solidity-0.4.7-release-announcement","/2016/11/22/solidity-0.4.6-release-announcement","/2016/11/21/solidity-0.4.5-release-announcement","/2016/11/09/analysis-storage-corruption-bug","/2016/11/01/solidity-0.4.4-release-announcement","/2016/11/01/security-alert-solidity-variables-can-overwritten-storage","/2016/10/25/solidity-0.4.3-release-announcement","/2016/09/17/solidity-0.4.2-release-announcement","/2016/09/09/solidity-0.4.1-release-announcement","/2016/09/08/solidity-0.4.0-release-announcement","/2016/09/01/formal-methods-roadmap","/2016/08/10/solidity-0.3.6-release-announcement","/2016/06/10/solidity-0.3.5-release-announcement","/2016/06/10/smart-contract-security","/2016/05/31/solidity-0.3.4-release-announcement","/2016/05/27/solidity-0.3.3-release-announcement","/2016/04/18/solidity-0.3.2-release-announcement","/2016/03/31/solidity-0.3.1-release-announcement","/2016/03/11/solidity-0.3.0-release-announcement","/2016/02/17/solidity-0.2.2-release-announcement","/2016/01/30/solidity-0.2.1-release-announcement","/2015/12/01/solidity-0.2.0-release-announcement","/2015/11/17/solidity-0.1.7-release-announcement","/2015/10/16/solidity-0.1.6-release-announcement","/2015/10/07/solidity-0.1.5-release-announcement","/2015/09/30/solidity-0.1.4-release-announcement","/2015/09/22/solidity-0.1.3-release-announcement","/2015/08/21/solidity-0.1.2-release-announcement"]},"__N_SSG":true}