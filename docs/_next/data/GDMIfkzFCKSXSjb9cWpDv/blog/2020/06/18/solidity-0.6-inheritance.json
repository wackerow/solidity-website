{"pageProps":{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.6.x features: inheritance","date":"2020-06-18","author":"Elena Gesheva","category":"Explainers"},"content":"\nSimilar to object-oriented programming in Solidity - a contract-oriented language - the inheritance and polymorphism features are as widely adopted and critical for the language evolution. There is hardly any Solidity developer who hasn't used these language features in their contracts to decouple logic and increase code reuse. With version 0.6 of the language the main improvements introduced are to make existing rules explicit in addition to introducing interface inheritance and disallowing the dangerous state variable shadowing. The compiler continues to use C3 Linearization, see [Solidity documentation](https://solidity.readthedocs.io/en/latest/contracts.html?#inheritance) for inheritance.\n\n## Explicit `virtual` and `override`\n\nFunctions are no longer virtual by default. This means that a call to a non-virtual function will always execute that function regardless of any other contract in the inheritance hierarchy. This reduces ambiguity that exists in version 0.5 where all functions are implicitly virtual, allowing to be overridden further down the inheritance structure. This is especially dangerous in big inheritance graphs where this ambiguity can lead to unintended behaviour and bugs.\n\nFor example in contract `C` below calling `setValue` calls the most derived implementation which is from contract `B`. However this is non-obvious from the implementation.\n\n```solidity\npragma solidity ^0.5.17;\ncontract A {\n    uint public x;\n    function setValue(uint _x) public {\n        x = _x;\n    }\n}\n\ncontract B {\n    uint public y;\n    function setValue(uint _y) public {\n        y = _y;\n    }\n}\n\ncontract C is A, B {\n}\n```\n\nWith version 0.6 for the example above the compiler raises a type error: `Derived contract must override function \"setValue\". Two or more base classes define functions with the same name and parameter types`. The above is an example of multiple inheritance where the same function is inherited from multiple base classes - `A` and `B`. In this case, it has to be overridden and the bases have to be listed in the override specifier. Important to note that the order in `override(A,B)` does not matter - specifically it does not change the behaviour of `super` - this is still dictated by the C3 linearization of the inheritance graph which is determined by the order in the `contract C is A, B { ... }` declaration.\n\n```solidity\npragma solidity ^0.6.10;\ncontract A {\n    uint public x;\n    function setValue(uint _x) public virtual {\n        x = _x;\n    }\n}\n\ncontract B {\n    uint public y;\n    function setValue(uint _y) public virtual {\n        y = _y;\n    }\n}\n\ncontract C is A, B {\n    function setValue(uint _x) public override(A,B) {\n        A.setValue(_x);\n    }\n}\n```\n\nNote that you can only override functions if they are marked `virtual`. Additionally, any overriding function must be marked `override`. If that again should be overridable, it has to also be marked `virtual`.\n\n`interface` functions are implicitly `virtual` so when implementing an interface you have to explicitly override its functions in the implementation. There is an ongoing discussion on this design [here](https://github.com/ethereum/solidity/issues/8281).\n\nIt's worth noting that the keyword `super` works as it did before: It calls the function one level higher up in the flattened inheritance hierarchy. Also unchanged: `super` is still not allowed on `external` functions.\n\n## Interfaces can inherit\n\nThis functionality is new to version 0.6 and allows interface inheritance. The resulting interface is a combination of all inherited interfaces' functions which the contract has to implement.\n\n```solidity\npragma solidity ^0.6.10;\ninterface X {\n    function setValue(uint _x) external;\n}\n\ninterface Y is X {\n    function getValue() external returns (uint);\n}\n\ncontract Z is Y {\n    uint x;\n    function setValue(uint _x) external override { x = _x; }\n    function getValue() external override returns (uint) { return x; }\n}\n```\n\nNote that if the contract does not implement all functions it has to be marked as `abstract`.\n\n```solidity\npragma solidity ^0.6.10;\nabstract contract Z is Y {\n    uint x;\n    function setValue(uint _x) external override { x = _x; }\n}\n```\n\n## Abstract contracts\n\nWith version 0.5 a contract that doesn't implement all of its functions is implicitly made abstract by the compiler:\n\n```solidity\npragma solidity ^0.5.17;\ncontract X {\n    function setValue(uint _x) public virtual;\n}\n```\n\nWith 0.6 this differentiation has to be explicit with the compiler generating error `contract X should be made abstract` otherwise\n\n```solidity\npragma solidity ^0.6.10;\nabstract contract X {\n    function setValue(uint _x) public virtual;\n}\n```\n\n## Public variables safer override for external functions\n\nAlthough this feature existed before 0.6 it is now safer with the added checks that the getter function of the variable (generated by the compiler) matches the parameter and return type of the overriden external function. With version 0.5 it is possible these were allowed to differ as shown in the following example:\n\n```solidity\npragma solidity ^0.5.17;\ninterface A\n{\n    function f() external pure returns(uint8);\n}\n\ncontract B is A\n{\n    uint256 public f = 257;\n}\n```\n\nContract `A`'s call to underlying contract `B` would return `1` as the `257` value overflows when cast to `uint8`.\n\nWith 0.6 now the above generates `TypeError: Overriding public state variable return types differ` forcing us to resolve the type conflict thus avoiding the overflow:\n\n```solidity\npragma solidity ^0.6.10;\ninterface A\n{\n    function f() external pure returns(uint256);\n}\n\ncontract B is A\n{\n    uint256 public override f = 257;\n}\n```\n\nNote that `public` state variables can only override `external` functions and it remains disallowed for variables to override `internal` or `public` functions.\n\n## No state variables shadowing\n\nInheriting visible state variables with the same name in version 0.5 was allowed by the compiler and is only raised as a problem by some static analysis tools. The following example demonstrates the problem with this design:\n\n```solidity\npragma solidity ^0.5.17;\ncontract A {\n    uint public x;\n\n    function setValue1(uint _x) public { x = _x; }\n}\n\ncontract B is A {\n    uint public x;\n\n    function setValue2(uint _x) public { x = _x; }\n}\n```\n\nIn this context functions in contract `A` referencing `x` are using its own instance of that state variable - `A.x` whereas for `B` it's `B.x`. Therefore the result of calling `B.setValue2(100)` would be that `B.x` will be set to `100` while calling `B.setValue1(200)` will set `A.x` to `200`.\n\nWith 0.6 this is now prohibited and raises a compiler `DeclarationError: Identifier already declared` error.\n","availableURLs":["/2023/05/10/solidity-0.8.20-release-announcement","/2023/03/10/solidity-developer-survey-2022-results","/2023/02/22/user-defined-operators","/2023/02/22/solidity-0.8.19-release-announcement","/2023/02/01/solidity-0.8.18-release-announcement","/2022/12/07/solidity-developer-survey-2022-announcement","/2022/12/05/solidity-core-team-updates","/2022/09/08/storage-write-removal-before-conditional-termination","/2022/09/08/solidity-0.8.17-release-announcement","/2022/08/08/solidity-0.8.16-release-announcement","/2022/08/08/calldata-tuple-reencoding-head-overflow-bug","/2022/06/15/solidity-0.8.15-release-announcement","/2022/06/15/inline-assembly-memory-side-effects-bug","/2022/06/15/dirty-bytes-array-to-storage-bug","/2022/05/17/solidity-0.8.14-release-announcement","/2022/05/17/data-location-inheritance-bug","/2022/05/17/calldata-reencode-size-check-bug","/2022/05/03/solidity-summit-2022-recap","/2022/04/08/announcing-the-underhanded-contest-winners-2022","/2022/03/16/solidity-0.8.13-release-announcement","/2022/03/16/encodecall-bug","/2022/02/22/solidity-summit-2022-announcement","/2022/02/16/solidity-0.8.12-release-announcement","/2022/02/09/underhanded-solidity-contest-2022-announcement","/2022/02/07/solidity-developer-survey-2021-results","/2021/12/20/solidity-0.8.11-release-announcement","/2021/11/18/solidity-developer-survey-2021","/2021/11/09/solidity-0.8.10-release-announcement","/2021/09/29/user-defined-value-types-bug","/2021/09/29/solidity-0.8.9-release-announcement","/2021/09/29/signed-immutables-bug","/2021/09/27/user-defined-value-types","/2021/09/27/solidity-0.8.8-release-announcement","/2021/08/11/solidity-0.8.7-release-announcement","/2021/06/22/solidity-0.8.6-release-announcement","/2021/06/10/solidity-0.8.5-release-announcement","/2021/05/03/soliditylangorg-umbrella-domain","/2021/04/21/solidity-0.8.4-release-announcement","/2021/04/21/decoding-from-memory-bug","/2021/04/21/custom-errors","/2021/04/01/announcing-solidity-collectibles","/2021/03/23/solidity-0.8.3-release-announcement","/2021/03/23/keccak-optimizer-bug","/2021/03/02/solidity-0.8.2-release-announcement","/2021/03/02/saving-gas-with-simple-inliner","/2021/02/15/contributing-to-solidity-101","/2021/02/10/an-introduction-to-soliditys-fuzz-testing-approach","/2021/02/01/launching-the-solidity-forum","/2021/01/27/solidity-0.8.1-release-announcement","/2021/01/26/solidity-developer-survey-2020-results","/2020/12/16/solidity-v0.8.0-release-announcement","/2020/12/16/solidity-0.7.6-release-announcement","/2020/12/09/solidity-developer-survey-2020","/2020/12/03/solidity-underhanded-contest-winners","/2020/11/18/solidity-0.7.5-release-announcement","/2020/11/04/solidity-ama-1-recap","/2020/10/28/solidity-0.8.x-preview","/2020/10/19/solidity-0.7.4-release-announcement","/2020/10/19/empty-byte-array-copy-bug","/2020/10/07/solidity-dynamic-array-cleanup-bug","/2020/10/07/solidity-0.7.3-release-announcement","/2020/09/28/solidity-0.7.2-release-announcement","/2020/09/21/solidity-underhanded-contest","/2020/09/18/meet-the-team","/2020/09/02/solidity-0.7.1-release-announcement","/2020/07/28/solidity-v0.7.0-release-announcement","/2020/07/22/Solidity-0612-release-announcement","/2020/07/08/solidity-turns-5","/2020/07/07/Solidity-0611-release-announcement","/2020/06/25/sourcify-faq","/2020/06/18/solidity-0.6-inheritance","/2020/06/11/Solidity-0610-release-announcement","/2020/06/09/solidity-summit-recap","/2020/06/05/Solidity-069-release-announcement","/2020/06/02/Sourcify-Towards-Safer-Contract-Interaction-for-Humans","/2020/05/26/array-slices","/2020/05/14/Solidity-068-release-announcement","/2020/05/13/immutable-keyword","/2020/05/04/solidity-0.6.7-release-announcement","/2020/04/17/Solidity-Summit-2020-Goes-Interspace","/2020/04/09/solidity-0.6.6-release-announcement","/2020/04/06/solidity-0.6.5-release-announcement","/2020/04/06/memory-creation-overflow-bug","/2020/03/23/fallback-receive-split","/2020/03/17/solidity-0.5.17-release-announcement","/2020/03/10/solidity-0.6.4-release-announcement","/2020/02/18/solidity-0.6.3-release-announcement","/2020/01/29/solidity-0.6-try-catch","/2020/01/27/solidity-0.6.2-release-announcement","/2020/01/02/solidity-0.6.1-release-announcement","/2020/01/02/solidity-0.5.16-release-announcement","/2019/12/17/solidity-0.6.0-release-announcement","/2019/12/17/solidity-0.5.15-release-announcement","/2019/12/09/solidity-0.5.14-release-announcement","/2019/11/14/solidity-0.5.13-release-announcement","/2019/10/01/solidity-0.5.12-release-announcement","/2019/08/12/solidity-0.5.11-release-announcement","/2019/06/25/solidity-storage-array-bugs","/2019/06/25/solidity-0.5.10-release-announcement","/2019/05/28/solidity-0.5.9-release-announcement","/2019/04/30/solidity-0.5.8-release-announcement","/2019/04/29/solidity-0.4.26-release-announcement","/2019/03/26/solidity-optimizer-and-abiencoderv2-bug","/2019/03/26/solidity-0.5.7-release-announcement","/2019/03/13/solidity-0.5.6-release-announcement","/2019/03/05/solidity-0.5.5-release-announcement","/2019/02/12/solidity-0.5.4-release-announcement","/2019/01/22/solidity-0.5.3-release-announcement","/2018/12/19/solidity-0.5.2-release-announcement","/2018/12/03/solidity-0.5.1-release-announcement","/2018/11/13/solidity-0.5.0-release-announcement","/2018/09/13/solidity-bugfix-release","/2018/09/13/solidity-0.4.25-release-announcement","/2018/05/16/solidity-0.4.24-release-announcement","/2018/04/19/solidity-0.4.23-release-announcement","/2018/04/17/solidity-0.4.22-release-announcement","/2018/03/08/solidity-0.4.21-release-announcement","/2018/02/14/solidity-0.4.20-release-announcement","/2017/11/30/solidity-0.4.19-release-announcement","/2017/10/18/solidity-0.4.18-release-announcement","/2017/09/21/solidity-0.4.17-release-announcement","/2017/08/24/solidity-0.4.16-release-announcement","/2017/08/08/solidity-0.4.15-release-announcement","/2017/07/31/solidity-0.4.14-release-announcement","/2017/07/06/solidity-0.4.13-release-announcement","/2017/07/03/solidity-0.4.12-release-announcement","/2017/05/03/solidity-optimizer-bug","/2017/05/03/solidity-0.4.11-release-announcement","/2017/03/15/solidity-0.4.10-release-announcement","/2017/01/31/solidity-0.4.9-release-announcement","/2017/01/13/solidity-0.4.8-release-announcement","/2016/12/15/solidity-0.4.7-release-announcement","/2016/11/22/solidity-0.4.6-release-announcement","/2016/11/21/solidity-0.4.5-release-announcement","/2016/11/09/analysis-storage-corruption-bug","/2016/11/01/solidity-0.4.4-release-announcement","/2016/11/01/security-alert-solidity-variables-can-overwritten-storage","/2016/10/25/solidity-0.4.3-release-announcement","/2016/09/17/solidity-0.4.2-release-announcement","/2016/09/09/solidity-0.4.1-release-announcement","/2016/09/08/solidity-0.4.0-release-announcement","/2016/09/01/formal-methods-roadmap","/2016/08/10/solidity-0.3.6-release-announcement","/2016/06/10/solidity-0.3.5-release-announcement","/2016/06/10/smart-contract-security","/2016/05/31/solidity-0.3.4-release-announcement","/2016/05/27/solidity-0.3.3-release-announcement","/2016/04/18/solidity-0.3.2-release-announcement","/2016/03/31/solidity-0.3.1-release-announcement","/2016/03/11/solidity-0.3.0-release-announcement","/2016/02/17/solidity-0.2.2-release-announcement","/2016/01/30/solidity-0.2.1-release-announcement","/2015/12/01/solidity-0.2.0-release-announcement","/2015/11/17/solidity-0.1.7-release-announcement","/2015/10/16/solidity-0.1.6-release-announcement","/2015/10/07/solidity-0.1.5-release-announcement","/2015/09/30/solidity-0.1.4-release-announcement","/2015/09/22/solidity-0.1.3-release-announcement","/2015/08/21/solidity-0.1.2-release-announcement"]},"__N_SSG":true}