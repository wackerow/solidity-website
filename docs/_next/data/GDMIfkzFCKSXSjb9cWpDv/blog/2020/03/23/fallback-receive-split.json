{"pageProps":{"frontmatter":{"layout":"post","published":true,"title":"Solidity 0.6.x features: fallback and receive functions","date":"2020-03-26","author":"Elena Gesheva","category":"Explainers"},"content":"\nIn versions of Solidity before 0.6.x, developers typically used the [fallback function](https://solidity.readthedocs.io/en/v0.5.15/contracts.html#fallback-function) to handle logic in two scenarios:\n\n- contract received ether and no data\n- contract received data but no function matched the function called\n\nThe main use case of the pre-0.6.x fallback function is to receive ether and react\nto it, a typical pattern used by token-style contracts to reject transfers, emit\nevents or forward the ether. The function executes when a contract is called\nwithout any data e.g. via `.send()` or `.transfer()` functions. The 0.5.x\nsyntax is:\n\n```solidity\n    pragma solidity ^0.5.0;\n    contract Charity {\n        function() external payable {\n            // React to receiving ether\n        }\n    }\n```\n\nThe second use case was made popular by the \"delegate proxy\" pattern\nfor implementing upgradable contracts. It has a simple Proxy contract that\nonly declares a fallback function. The fallback function is invoked when no\nfunction in the contract matches the function identifier in the call data.\nThis permits the \"delegate proxy\" pattern where functionality is implemented\noutside the called contract. Sample implementation:\n\n```solidity\n    pragma solidity ^0.5.0;\n    contract DelegateProxy {\n        address internal implementation;\n\n        function() external payable {\n            address addr = implementation;\n\n            assembly {\n                calldatacopy(0, 0, calldatasize())\n                let result := delegatecall(gas(), addr, 0, calldatasize(), 0, 0)\n                returndatacopy(0, 0, returndatasize())\n                switch result\n                case 0 { revert(0, returndatasize()) }\n                default { return(0, returndatasize()) }\n            }\n        }\n    }\n```\n\nCalling the contract uses assembly code that we won't go into detail here,\nbut you can read more in [Zeppelin's documentation](https://docs.openzeppelin.com/upgrades/2.6/proxies).\n\n## Splitting the fallback function\n\nWe realised that the dual-purpose of the function confused developers, which\ncould lead to potential security problems. For example, a developer typically implements a fallback function, expecting only ether transfers to call it, but\nit is also called when a function is missing from a contract. And confusingly,\nas this was expected behaviour, no error was reported. Example implementation\ndemonstrating this confusing behaviour is below.\n\n```solidity\n    pragma solidity ^0.5.0;\n    contract Charity {\n        mapping (address => uint256) public donations;\n\n        function processDonation(address user) external payable {\n            donations[user] += msg.value;\n        }\n    }\n    contract Receiver {\n        event ValueReceived(address user, uint amount);\n\n        function() external payable {\n            emit ValueReceived(msg.sender, msg.value);\n        }\n    }\n    contract CharitySplitter {\n        function donate(Charity charity) external payable {\n            charity.processDonation.value(msg.value)(msg.sender);\n        }\n    }\n```\n\nWhen calling `CharitySplitter.donate()` with a charity contract address,\nits `processDonation` function is correctly invoked to process the donation\nas expected. However if by mistake the `Receiver` contract address is passed,\nits fallback function ends up being called, swallowing the sent value.\n\n```solidity\n    const goodCharity = await Charity.new();\n    const receiver = await Receiver.new();\n    const badCharity = await Charity.at(receiver.address);\n    const charitySplitter = await CharitySplitter.new();\n    // Charity.processDonation is executed successfully and 10 wei donation is recorded\n    await charitySplitter.donate(goodCharity, { value: 10 });\n    // Triggers the underlying Receiver fallback function\n    // 10 wei is acquired and ValueReceived event emitted\n    await charitySplitter.donate(badCharity, { value: 10 });\n```\n\nSince the EVM is untyped, Solidity is unable to check the actual type of a\ncontract from its address and has to rely on what the user supplies. The\nfunction signatures also do not provide a perfect solution against type\nconfusion but can work in many cases.\n\nThis is why in version 0.6.x, the fallback function was split into two\nseparate functions:\n\n- [receive()](https://solidity.readthedocs.io/en/latest/contracts.html#receive-ether-function) `external payable` — for empty calldata (and any value)\n- [fallback()](https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function) `external payable` — when no other function matches (not even the receive function). Optionally `payable`.\n\nThis separation provides an alternative to the fallback function for\ncontracts that want to receive plain ether.\n\n### receive()\n\nA contract can now have only one `receive` function, declared with the syntax:\n`receive() external payable {…}` (without the `function` keyword).\n\nIt executes on calls to the contract with no data (`calldata`), e.g. calls made\nvia `send()` or `transfer()`.\n\nThe function cannot have arguments, cannot return anything and must have\n`external` visibility and `payable` state mutability. To replicate the example\nabove under 0.6.0, use the following code:\n\n```solidity\n    pragma solidity ^0.5.0;\n    contract Charity {\n        receive() external payable {\n            // React to receiving ether\n        }\n    }\n```\n\n### fallback()\n\nThe fallback function now has a different syntax, declared using\n`fallback() external [payable] {…}` (without the `function` keyword). This\nfunction cannot have arguments, cannot return anything and must have\n`external` visibility. The fallback function always receives data, but to\nalso receive Ether, you should mark it as `payable`. To replicate the example\nabove under 0.6.0, use the following code:\n\n```solidity\n    pragma solidity ^0.6.0;\n\n    contract DelegateProxy {\n        address internal implementation;\n\n        fallback() external payable {\n            address addr = implementation;\n\n            assembly {\n                calldatacopy(0, 0, calldatasize())\n                let result := delegatecall(gas(), addr, 0, calldatasize(), 0, 0)\n                returndatacopy(0, 0, returndatasize())\n                switch result\n                case 0 { revert(0, returndatasize()) }\n                default { return(0, returndatasize()) }\n            }\n        }\n    }\n```\n\n### Migrated and fixed sample contract\n\nThus we translate the problematic contract to v0.6.x , having it declare a\n`receive()` function which only accepts incoming ether without data and\navoids the type confusion that led to the loss of value demonstrated above.\n\n```solidity\n    pragma solidity ^0.6.0;\n    contract Charity {\n        mapping (address => uint256) public donations;\n\n        function processDonation(address user) external payable {\n            donations[user] += msg.value;\n        }\n    }\n    contract Receiver {\n        event ValueReceived(address user, uint amount);\n\n        receive() external payable {\n            emit ValueReceived(msg.sender, msg.value);\n        }\n    }\n\n    contract CharitySplitter {\n        function donate(Charity charity) external payable {\n            charity.processDonation{value:msg.value}(msg.sender);\n        }\n    }\n```\n\nThe calls to the fixed contract will now revert when called with the `Receiver` contract address fails:\n\n```solidity\n    // The following call now reverts\n    await charitySplitter.donate(badCharity, { value: 10 });\n```\n\nWe hope you find the logical division of the fallback function clearer for your design, and welcome any feedback you have on the new syntax.\n","availableURLs":["/2023/05/10/solidity-0.8.20-release-announcement","/2023/03/10/solidity-developer-survey-2022-results","/2023/02/22/user-defined-operators","/2023/02/22/solidity-0.8.19-release-announcement","/2023/02/01/solidity-0.8.18-release-announcement","/2022/12/07/solidity-developer-survey-2022-announcement","/2022/12/05/solidity-core-team-updates","/2022/09/08/storage-write-removal-before-conditional-termination","/2022/09/08/solidity-0.8.17-release-announcement","/2022/08/08/solidity-0.8.16-release-announcement","/2022/08/08/calldata-tuple-reencoding-head-overflow-bug","/2022/06/15/solidity-0.8.15-release-announcement","/2022/06/15/inline-assembly-memory-side-effects-bug","/2022/06/15/dirty-bytes-array-to-storage-bug","/2022/05/17/solidity-0.8.14-release-announcement","/2022/05/17/data-location-inheritance-bug","/2022/05/17/calldata-reencode-size-check-bug","/2022/05/03/solidity-summit-2022-recap","/2022/04/08/announcing-the-underhanded-contest-winners-2022","/2022/03/16/solidity-0.8.13-release-announcement","/2022/03/16/encodecall-bug","/2022/02/22/solidity-summit-2022-announcement","/2022/02/16/solidity-0.8.12-release-announcement","/2022/02/09/underhanded-solidity-contest-2022-announcement","/2022/02/07/solidity-developer-survey-2021-results","/2021/12/20/solidity-0.8.11-release-announcement","/2021/11/18/solidity-developer-survey-2021","/2021/11/09/solidity-0.8.10-release-announcement","/2021/09/29/user-defined-value-types-bug","/2021/09/29/solidity-0.8.9-release-announcement","/2021/09/29/signed-immutables-bug","/2021/09/27/user-defined-value-types","/2021/09/27/solidity-0.8.8-release-announcement","/2021/08/11/solidity-0.8.7-release-announcement","/2021/06/22/solidity-0.8.6-release-announcement","/2021/06/10/solidity-0.8.5-release-announcement","/2021/05/03/soliditylangorg-umbrella-domain","/2021/04/21/solidity-0.8.4-release-announcement","/2021/04/21/decoding-from-memory-bug","/2021/04/21/custom-errors","/2021/04/01/announcing-solidity-collectibles","/2021/03/23/solidity-0.8.3-release-announcement","/2021/03/23/keccak-optimizer-bug","/2021/03/02/solidity-0.8.2-release-announcement","/2021/03/02/saving-gas-with-simple-inliner","/2021/02/15/contributing-to-solidity-101","/2021/02/10/an-introduction-to-soliditys-fuzz-testing-approach","/2021/02/01/launching-the-solidity-forum","/2021/01/27/solidity-0.8.1-release-announcement","/2021/01/26/solidity-developer-survey-2020-results","/2020/12/16/solidity-v0.8.0-release-announcement","/2020/12/16/solidity-0.7.6-release-announcement","/2020/12/09/solidity-developer-survey-2020","/2020/12/03/solidity-underhanded-contest-winners","/2020/11/18/solidity-0.7.5-release-announcement","/2020/11/04/solidity-ama-1-recap","/2020/10/28/solidity-0.8.x-preview","/2020/10/19/solidity-0.7.4-release-announcement","/2020/10/19/empty-byte-array-copy-bug","/2020/10/07/solidity-dynamic-array-cleanup-bug","/2020/10/07/solidity-0.7.3-release-announcement","/2020/09/28/solidity-0.7.2-release-announcement","/2020/09/21/solidity-underhanded-contest","/2020/09/18/meet-the-team","/2020/09/02/solidity-0.7.1-release-announcement","/2020/07/28/solidity-v0.7.0-release-announcement","/2020/07/22/Solidity-0612-release-announcement","/2020/07/08/solidity-turns-5","/2020/07/07/Solidity-0611-release-announcement","/2020/06/25/sourcify-faq","/2020/06/18/solidity-0.6-inheritance","/2020/06/11/Solidity-0610-release-announcement","/2020/06/09/solidity-summit-recap","/2020/06/05/Solidity-069-release-announcement","/2020/06/02/Sourcify-Towards-Safer-Contract-Interaction-for-Humans","/2020/05/26/array-slices","/2020/05/14/Solidity-068-release-announcement","/2020/05/13/immutable-keyword","/2020/05/04/solidity-0.6.7-release-announcement","/2020/04/17/Solidity-Summit-2020-Goes-Interspace","/2020/04/09/solidity-0.6.6-release-announcement","/2020/04/06/solidity-0.6.5-release-announcement","/2020/04/06/memory-creation-overflow-bug","/2020/03/23/fallback-receive-split","/2020/03/17/solidity-0.5.17-release-announcement","/2020/03/10/solidity-0.6.4-release-announcement","/2020/02/18/solidity-0.6.3-release-announcement","/2020/01/29/solidity-0.6-try-catch","/2020/01/27/solidity-0.6.2-release-announcement","/2020/01/02/solidity-0.6.1-release-announcement","/2020/01/02/solidity-0.5.16-release-announcement","/2019/12/17/solidity-0.6.0-release-announcement","/2019/12/17/solidity-0.5.15-release-announcement","/2019/12/09/solidity-0.5.14-release-announcement","/2019/11/14/solidity-0.5.13-release-announcement","/2019/10/01/solidity-0.5.12-release-announcement","/2019/08/12/solidity-0.5.11-release-announcement","/2019/06/25/solidity-storage-array-bugs","/2019/06/25/solidity-0.5.10-release-announcement","/2019/05/28/solidity-0.5.9-release-announcement","/2019/04/30/solidity-0.5.8-release-announcement","/2019/04/29/solidity-0.4.26-release-announcement","/2019/03/26/solidity-optimizer-and-abiencoderv2-bug","/2019/03/26/solidity-0.5.7-release-announcement","/2019/03/13/solidity-0.5.6-release-announcement","/2019/03/05/solidity-0.5.5-release-announcement","/2019/02/12/solidity-0.5.4-release-announcement","/2019/01/22/solidity-0.5.3-release-announcement","/2018/12/19/solidity-0.5.2-release-announcement","/2018/12/03/solidity-0.5.1-release-announcement","/2018/11/13/solidity-0.5.0-release-announcement","/2018/09/13/solidity-bugfix-release","/2018/09/13/solidity-0.4.25-release-announcement","/2018/05/16/solidity-0.4.24-release-announcement","/2018/04/19/solidity-0.4.23-release-announcement","/2018/04/17/solidity-0.4.22-release-announcement","/2018/03/08/solidity-0.4.21-release-announcement","/2018/02/14/solidity-0.4.20-release-announcement","/2017/11/30/solidity-0.4.19-release-announcement","/2017/10/18/solidity-0.4.18-release-announcement","/2017/09/21/solidity-0.4.17-release-announcement","/2017/08/24/solidity-0.4.16-release-announcement","/2017/08/08/solidity-0.4.15-release-announcement","/2017/07/31/solidity-0.4.14-release-announcement","/2017/07/06/solidity-0.4.13-release-announcement","/2017/07/03/solidity-0.4.12-release-announcement","/2017/05/03/solidity-optimizer-bug","/2017/05/03/solidity-0.4.11-release-announcement","/2017/03/15/solidity-0.4.10-release-announcement","/2017/01/31/solidity-0.4.9-release-announcement","/2017/01/13/solidity-0.4.8-release-announcement","/2016/12/15/solidity-0.4.7-release-announcement","/2016/11/22/solidity-0.4.6-release-announcement","/2016/11/21/solidity-0.4.5-release-announcement","/2016/11/09/analysis-storage-corruption-bug","/2016/11/01/solidity-0.4.4-release-announcement","/2016/11/01/security-alert-solidity-variables-can-overwritten-storage","/2016/10/25/solidity-0.4.3-release-announcement","/2016/09/17/solidity-0.4.2-release-announcement","/2016/09/09/solidity-0.4.1-release-announcement","/2016/09/08/solidity-0.4.0-release-announcement","/2016/09/01/formal-methods-roadmap","/2016/08/10/solidity-0.3.6-release-announcement","/2016/06/10/solidity-0.3.5-release-announcement","/2016/06/10/smart-contract-security","/2016/05/31/solidity-0.3.4-release-announcement","/2016/05/27/solidity-0.3.3-release-announcement","/2016/04/18/solidity-0.3.2-release-announcement","/2016/03/31/solidity-0.3.1-release-announcement","/2016/03/11/solidity-0.3.0-release-announcement","/2016/02/17/solidity-0.2.2-release-announcement","/2016/01/30/solidity-0.2.1-release-announcement","/2015/12/01/solidity-0.2.0-release-announcement","/2015/11/17/solidity-0.1.7-release-announcement","/2015/10/16/solidity-0.1.6-release-announcement","/2015/10/07/solidity-0.1.5-release-announcement","/2015/09/30/solidity-0.1.4-release-announcement","/2015/09/22/solidity-0.1.3-release-announcement","/2015/08/21/solidity-0.1.2-release-announcement"]},"__N_SSG":true}